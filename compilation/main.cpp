#define SOUFFLE_GENERATOR_VERSION "2.4"
#include "souffle/CompiledSouffle.h"
#include "souffle/SignalHandler.h"
#include "souffle/SouffleInterface.h"
#include "souffle/datastructure/BTree.h"
#include "souffle/datastructure/Nullaries.h"
#include "souffle/datastructure/Table.h"
#include "souffle/io/IOSystem.h"
#include <any>
namespace functors {
extern "C" {
}
} //namespace functors
namespace souffle::t_btree_iii__1__0_1_2__010__100__110__111 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_1 = btree_set<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_1::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_1::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_1::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_1::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_1::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_1::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_1::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iii__1__0_1_2__010__100__110__111 
namespace souffle::t_btree_iii__1__0_1_2__010__100__110__111 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using t_ind_1 = Type::t_ind_1;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_1.insert(t, h.hints_1_lower)) {
ind_0.insert(t, h.hints_0_lower);
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_1.contains(t, h.hints_1_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_1.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_1.find(t, h.hints_1_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<iterator> Type::lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_010(lower,upper,h);
}
range<t_ind_1::iterator> Type::lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> Type::lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_100(lower,upper,h);
}
range<t_ind_1::iterator> Type::lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> Type::lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_110(lower,upper,h);
}
range<t_ind_1::iterator> Type::lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_1.find(lower, h.hints_1_lower);
    auto fin = ind_1.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> Type::lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool Type::empty() const {
return ind_1.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_1.getChunks(400);
}
void Type::purge() {
ind_0.clear();
ind_1.clear();
}
iterator Type::begin() const {
return ind_1.begin();
}
iterator Type::end() const {
return ind_1.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [1]\n";
ind_0.printStats(o);
o << " arity 3 direct b-tree index 1 lex-order [0,1,2]\n";
ind_1.printStats(o);
}
} // namespace souffle::t_btree_iii__1__0_1_2__010__100__110__111 
namespace souffle::t_btree_iii__2__0_1_2__001__110__111 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_1 = btree_set<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_1::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_1::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_1::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_1::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_1::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iii__2__0_1_2__001__110__111 
namespace souffle::t_btree_iii__2__0_1_2__001__110__111 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using t_ind_1 = Type::t_ind_1;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_1.insert(t, h.hints_1_lower)) {
ind_0.insert(t, h.hints_0_lower);
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_1.contains(t, h.hints_1_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_1.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_1.find(t, h.hints_1_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<iterator> Type::lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_001(lower,upper,h);
}
range<t_ind_1::iterator> Type::lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> Type::lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_110(lower,upper,h);
}
range<t_ind_1::iterator> Type::lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_1.find(lower, h.hints_1_lower);
    auto fin = ind_1.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> Type::lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool Type::empty() const {
return ind_1.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_1.getChunks(400);
}
void Type::purge() {
ind_0.clear();
ind_1.clear();
}
iterator Type::begin() const {
return ind_1.begin();
}
iterator Type::end() const {
return ind_1.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [2]\n";
ind_0.printStats(o);
o << " arity 3 direct b-tree index 1 lex-order [0,1,2]\n";
ind_1.printStats(o);
}
} // namespace souffle::t_btree_iii__2__0_1_2__001__110__111 
namespace souffle::t_btree_iii__0_1_2__111 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iii__0_1_2__111 
namespace souffle::t_btree_iii__0_1_2__111 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [0,1,2]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iii__0_1_2__111 
namespace souffle::t_btree_ii__0_1__11__10 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 2;
using t_tuple = Tuple<RamDomain, 2>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_10(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_10(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_ii__0_1__11__10 
namespace souffle::t_btree_ii__0_1__11__10 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[2];
std::copy(ramDomain, ramDomain + 2, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1) {
RamDomain data[2] = {a0,a1};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_10(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_10(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_10(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 2 direct b-tree index 0 lex-order [0,1]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_ii__0_1__11__10 
namespace souffle::t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_1 = btree_multiset<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
struct t_comparator_2{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_2 = btree_set<t_tuple,t_comparator_2>;
t_ind_2 ind_2;
using iterator = t_ind_2::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
t_ind_2::operation_hints hints_2_lower;
t_ind_2::operation_hints hints_2_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_1000(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_1000(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_1010(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_1010(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_1::iterator> lowerUpperRange_1110(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_1::iterator> lowerUpperRange_1110(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_2::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_2::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_1::iterator> lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_1::iterator> lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_2::iterator> lowerUpperRange_0110(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_2::iterator> lowerUpperRange_0110(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_1::iterator> lowerUpperRange_0100(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_1::iterator> lowerUpperRange_0100(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_2::iterator> lowerUpperRange_0010(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_2::iterator> lowerUpperRange_0010(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010 
namespace souffle::t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using t_ind_1 = Type::t_ind_1;
using t_ind_2 = Type::t_ind_2;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_2.insert(t, h.hints_2_lower)) {
ind_0.insert(t, h.hints_0_lower);
ind_1.insert(t, h.hints_1_lower);
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_2.contains(t, h.hints_2_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_2.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_2.find(t, h.hints_2_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_2.begin(),ind_2.end());
}
range<iterator> Type::lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_2.begin(),ind_2.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_1000(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_1000(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1000(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_1010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_1010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1010(lower,upper,h);
}
range<t_ind_1::iterator> Type::lowerUpperRange_1110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> Type::lowerUpperRange_1110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1110(lower,upper,h);
}
range<t_ind_2::iterator> Type::lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_2.find(lower, h.hints_2_lower);
    auto fin = ind_2.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> Type::lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_1::iterator> Type::lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> Type::lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1100(lower,upper,h);
}
range<t_ind_2::iterator> Type::lowerUpperRange_0110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> Type::lowerUpperRange_0110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0110(lower,upper,h);
}
range<t_ind_1::iterator> Type::lowerUpperRange_0100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> Type::lowerUpperRange_0100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0100(lower,upper,h);
}
range<t_ind_2::iterator> Type::lowerUpperRange_0010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> Type::lowerUpperRange_0010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0010(lower,upper,h);
}
bool Type::empty() const {
return ind_2.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_2.getChunks(400);
}
void Type::purge() {
ind_0.clear();
ind_1.clear();
ind_2.clear();
}
iterator Type::begin() const {
return ind_2.begin();
}
iterator Type::end() const {
return ind_2.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [0,2]\n";
ind_0.printStats(o);
o << " arity 4 direct b-tree index 1 lex-order [1,0,2]\n";
ind_1.printStats(o);
o << " arity 4 direct b-tree index 2 lex-order [2,1,0,3]\n";
ind_2.printStats(o);
}
} // namespace souffle::t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010 
namespace souffle::t_btree_i__0__1 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 1;
using t_tuple = Tuple<RamDomain, 1>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_0(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_0(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_1(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_1(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_i__0__1 
namespace souffle::t_btree_i__0__1 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[1];
std::copy(ramDomain, ramDomain + 1, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0) {
RamDomain data[1] = {a0};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_0(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_0(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_1(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_1(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 1 direct b-tree index 0 lex-order [0]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_i__0__1 
namespace souffle::t_btree_iii__1_2_0__011__111 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_011(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_011(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iii__1_2_0__011__111 
namespace souffle::t_btree_iii__1_2_0__011__111 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_011(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_011(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_011(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [1,2,0]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iii__1_2_0__011__111 
namespace souffle::t_btree_iii__2_0_1__001__111 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iii__2_0_1__001__111 
namespace souffle::t_btree_iii__2_0_1__001__111 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_001(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [2,0,1]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iii__2_0_1__001__111 
namespace souffle::t_btree_ii__1_0__11__01 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 2;
using t_tuple = Tuple<RamDomain, 2>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_01(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_01(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_ii__1_0__11__01 
namespace souffle::t_btree_ii__1_0__11__01 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[2];
std::copy(ramDomain, ramDomain + 2, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1) {
RamDomain data[2] = {a0,a1};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_01(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_01(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_01(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 2 direct b-tree index 0 lex-order [1,0]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_ii__1_0__11__01 
namespace souffle::t_btree_iiii__3_0_1_2__1111__0001 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_0001(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_0001(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiii__3_0_1_2__1111__0001 
namespace souffle::t_btree_iiii__3_0_1_2__1111__0001 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_0001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_0001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0001(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [3,0,1,2]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiii__3_0_1_2__1111__0001 
namespace souffle::t_btree_iiii__2_0_1_3__1111__0010 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_0010(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_0010(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiii__2_0_1_3__1111__0010 
namespace souffle::t_btree_iiii__2_0_1_3__1111__0010 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_0010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_0010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0010(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [2,0,1,3]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiii__2_0_1_3__1111__0010 
namespace souffle::t_btree_iii__0_1_2__100__111 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iii__0_1_2__100__111 
namespace souffle::t_btree_iii__0_1_2__100__111 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_100(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [0,1,2]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iii__0_1_2__100__111 
namespace souffle::t_btree_ii__0_1__11 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 2;
using t_tuple = Tuple<RamDomain, 2>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_ii__0_1__11 
namespace souffle::t_btree_ii__0_1__11 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[2];
std::copy(ramDomain, ramDomain + 2, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1) {
RamDomain data[2] = {a0,a1};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 2 direct b-tree index 0 lex-order [0,1]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_ii__0_1__11 
namespace souffle::t_btree_iii__1_0_2__010__110__111 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iii__1_0_2__010__110__111 
namespace souffle::t_btree_iii__1_0_2__010__110__111 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_010(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_110(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [1,0,2]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iii__1_0_2__010__110__111 
namespace souffle::t_btree_iiii__0_1_2_3__1111__1100 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiii__0_1_2_3__1111__1100 
namespace souffle::t_btree_iiii__0_1_2_3__1111__1100 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1100(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [0,1,2,3]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiii__0_1_2_3__1111__1100 
namespace souffle::t_btree_iiiii__0_1_2_3_4__11111 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 5;
using t_tuple = Tuple<RamDomain, 5>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :(0)))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]))))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiiii__0_1_2_3_4__11111 
namespace souffle::t_btree_iiiii__0_1_2_3_4__11111 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11111(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 5 direct b-tree index 0 lex-order [0,1,2,3,4]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiiii__0_1_2_3_4__11111 
namespace souffle::t_btree_iiiiii__0_1_2_3_4_5__110000__111111 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 6;
using t_tuple = Tuple<RamDomain, 6>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :((ramBitCast<RamSigned>(a[5]) < ramBitCast<RamSigned>(b[5])) ? -1 : (ramBitCast<RamSigned>(a[5]) > ramBitCast<RamSigned>(b[5])) ? 1 :(0))))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]))|| ((ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4])) && ((ramBitCast<RamSigned>(a[5]) < ramBitCast<RamSigned>(b[5]))))))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]))&&(ramBitCast<RamSigned>(a[5]) == ramBitCast<RamSigned>(b[5]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_000000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_000000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_110000(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_110000(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_111111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_111111(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiiiii__0_1_2_3_4_5__110000__111111 
namespace souffle::t_btree_iiiiii__0_1_2_3_4_5__110000__111111 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[6];
std::copy(ramDomain, ramDomain + 6, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5) {
RamDomain data[6] = {a0,a1,a2,a3,a4,a5};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_000000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_000000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_110000(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_110000(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_110000(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_111111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_111111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111111(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 6 direct b-tree index 0 lex-order [0,1,2,3,4,5]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiiiii__0_1_2_3_4_5__110000__111111 
namespace souffle::t_btree_iiii__0_1_2_3__1110__1111 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_1110(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_1110(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiii__0_1_2_3__1110__1111 
namespace souffle::t_btree_iiii__0_1_2_3__1110__1111 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_1110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_1110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1110(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [0,1,2,3]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiii__0_1_2_3__1110__1111 
namespace souffle::t_btree_iii__0_1_2__110__111 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iii__0_1_2__110__111 
namespace souffle::t_btree_iii__0_1_2__110__111 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_110(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [0,1,2]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iii__0_1_2__110__111 
namespace souffle::t_btree_iii__1_0_2__010__111 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 3;
using t_tuple = Tuple<RamDomain, 3>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iii__1_0_2__010__111 
namespace souffle::t_btree_iii__1_0_2__010__111 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_010(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 3 direct b-tree index 0 lex-order [1,0,2]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iii__1_0_2__010__111 
namespace souffle::t_btree_iiii__0_1_2_3__1111 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiii__0_1_2_3__1111 
namespace souffle::t_btree_iiii__0_1_2_3__1111 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [0,1,2,3]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiii__0_1_2_3__1111 
namespace souffle::t_btree_iiii__0_2_1_3__1010__1111 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_1010(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_1010(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiii__0_2_1_3__1010__1111 
namespace souffle::t_btree_iiii__0_2_1_3__1010__1111 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_1010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_1010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1010(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [0,2,1,3]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiii__0_2_1_3__1010__1111 
namespace souffle::t_btree_iiiii__0_1_2_3_4__11100__11111 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 5;
using t_tuple = Tuple<RamDomain, 5>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :(0)))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]))))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_11100(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_11100(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiiii__0_1_2_3_4__11100__11111 
namespace souffle::t_btree_iiiii__0_1_2_3_4__11100__11111 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_11100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_11100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11100(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11111(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 5 direct b-tree index 0 lex-order [0,1,2,3,4]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiiii__0_1_2_3_4__11100__11111 
namespace souffle::t_btree_iiii__2_3_0_1__0_1__1000__1111__1100__0011 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_1 = btree_multiset<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_1::iterator> lowerUpperRange_1000(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_1::iterator> lowerUpperRange_1000(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_1::iterator> lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_1::iterator> lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_0011(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_0011(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiii__2_3_0_1__0_1__1000__1111__1100__0011 
namespace souffle::t_btree_iiii__2_3_0_1__0_1__1000__1111__1100__0011 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using t_ind_1 = Type::t_ind_1;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
ind_1.insert(t, h.hints_1_lower);
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_1::iterator> Type::lowerUpperRange_1000(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> Type::lowerUpperRange_1000(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1000(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_1::iterator> Type::lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> Type::lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1100(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_0011(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_0011(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0011(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
ind_1.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [2,3,0,1]\n";
ind_0.printStats(o);
o << " arity 4 direct b-tree index 1 lex-order [0,1]\n";
ind_1.printStats(o);
}
} // namespace souffle::t_btree_iiii__2_3_0_1__0_1__1000__1111__1100__0011 
namespace souffle::t_btree_iiii__0_1_2_3__1000__1111__1100 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_1000(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_1000(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiii__0_1_2_3__1000__1111__1100 
namespace souffle::t_btree_iiii__0_1_2_3__1000__1111__1100 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_1000(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_1000(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1000(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1100(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [0,1,2,3]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiii__0_1_2_3__1000__1111__1100 
namespace souffle::t_btree_iiii__2_0_1_3__0_1__1111__1100__0010 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_1 = btree_multiset<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_1::iterator> lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_1::iterator> lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_0010(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_0010(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiii__2_0_1_3__0_1__1111__1100__0010 
namespace souffle::t_btree_iiii__2_0_1_3__0_1__1111__1100__0010 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using t_ind_1 = Type::t_ind_1;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
ind_1.insert(t, h.hints_1_lower);
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_1::iterator> Type::lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> Type::lowerUpperRange_1100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1100(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_0010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_0010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0010(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
ind_1.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [2,0,1,3]\n";
ind_0.printStats(o);
o << " arity 4 direct b-tree index 1 lex-order [0,1]\n";
ind_1.printStats(o);
}
} // namespace souffle::t_btree_iiii__2_0_1_3__0_1__1111__1100__0010 
namespace souffle::t_btree_ii__1_0__0__11__10__01 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 2;
using t_tuple = Tuple<RamDomain, 2>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :(0));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :(0);
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]));
 }
};
using t_ind_1 = btree_multiset<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_1::iterator> lowerUpperRange_10(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_1::iterator> lowerUpperRange_10(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_01(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_01(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_ii__1_0__0__11__10__01 
namespace souffle::t_btree_ii__1_0__0__11__10__01 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using t_ind_1 = Type::t_ind_1;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
ind_1.insert(t, h.hints_1_lower);
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[2];
std::copy(ramDomain, ramDomain + 2, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1) {
RamDomain data[2] = {a0,a1};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_00(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_11(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11(lower,upper,h);
}
range<t_ind_1::iterator> Type::lowerUpperRange_10(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> Type::lowerUpperRange_10(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_10(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_01(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_01(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_01(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
ind_1.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 2 direct b-tree index 0 lex-order [1,0]\n";
ind_0.printStats(o);
o << " arity 2 direct b-tree index 1 lex-order [0]\n";
ind_1.printStats(o);
}
} // namespace souffle::t_btree_ii__1_0__0__11__10__01 
namespace souffle::t_btree_iiiii__0_1_4_2_3__11111__11001 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 5;
using t_tuple = Tuple<RamDomain, 5>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0)))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]))|| ((ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_11001(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_11001(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiiii__0_1_4_2_3__11111__11001 
namespace souffle::t_btree_iiiii__0_1_4_2_3__11111__11001 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11111(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_11001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_11001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11001(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 5 direct b-tree index 0 lex-order [0,1,4,2,3]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiiii__0_1_4_2_3__11111__11001 
namespace souffle::t_btree_iiiii__4_0_1_2_3__11111__00001 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 5;
using t_tuple = Tuple<RamDomain, 5>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0)))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]))|| ((ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_00001(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_00001(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiiii__4_0_1_2_3__11111__00001 
namespace souffle::t_btree_iiiii__4_0_1_2_3__11111__00001 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11111(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_00001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_00001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_00001(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 5 direct b-tree index 0 lex-order [4,0,1,2,3]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiiii__4_0_1_2_3__11111__00001 
namespace souffle::t_btree_iiiii__0_1_2_3_4__11111__11000 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 5;
using t_tuple = Tuple<RamDomain, 5>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :(0)))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]))))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_11000(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_11000(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiiii__0_1_2_3_4__11111__11000 
namespace souffle::t_btree_iiiii__0_1_2_3_4__11111__11000 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11111(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_11000(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_11000(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11000(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 5 direct b-tree index 0 lex-order [0,1,2,3,4]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiiii__0_1_2_3_4__11111__11000 
namespace souffle::t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 5;
using t_tuple = Tuple<RamDomain, 5>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :(0)));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]));
 }
};
using t_ind_0 = btree_multiset<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
struct t_comparator_1{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0)))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]))|| ((ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_1 = btree_set<t_tuple,t_comparator_1>;
t_ind_1 ind_1;
struct t_comparator_2{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_2 = btree_multiset<t_tuple,t_comparator_2>;
t_ind_2 ind_2;
using iterator = t_ind_1::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
t_ind_1::operation_hints hints_1_lower;
t_ind_1::operation_hints hints_1_upper;
t_ind_2::operation_hints hints_2_lower;
t_ind_2::operation_hints hints_2_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_11100(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_11100(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_1::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_1::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_2::iterator> lowerUpperRange_11110(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_2::iterator> lowerUpperRange_11110(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_2::iterator> lowerUpperRange_10110(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_2::iterator> lowerUpperRange_10110(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_1::iterator> lowerUpperRange_00001(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_1::iterator> lowerUpperRange_00001(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_2::iterator> lowerUpperRange_00100(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_2::iterator> lowerUpperRange_00100(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_2::iterator> lowerUpperRange_00110(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_2::iterator> lowerUpperRange_00110(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_1::iterator> lowerUpperRange_00111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_1::iterator> lowerUpperRange_00111(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111 
namespace souffle::t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using t_ind_1 = Type::t_ind_1;
using t_ind_2 = Type::t_ind_2;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_1.insert(t, h.hints_1_lower)) {
ind_0.insert(t, h.hints_0_lower);
ind_2.insert(t, h.hints_2_lower);
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_1.contains(t, h.hints_1_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_1.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_1.find(t, h.hints_1_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<iterator> Type::lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_1.begin(),ind_1.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_11100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_11100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11100(lower,upper,h);
}
range<t_ind_1::iterator> Type::lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_1.find(lower, h.hints_1_lower);
    auto fin = ind_1.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> Type::lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11111(lower,upper,h);
}
range<t_ind_2::iterator> Type::lowerUpperRange_11110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> Type::lowerUpperRange_11110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11110(lower,upper,h);
}
range<t_ind_2::iterator> Type::lowerUpperRange_10110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> Type::lowerUpperRange_10110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_10110(lower,upper,h);
}
range<t_ind_1::iterator> Type::lowerUpperRange_00001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> Type::lowerUpperRange_00001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_00001(lower,upper,h);
}
range<t_ind_2::iterator> Type::lowerUpperRange_00100(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> Type::lowerUpperRange_00100(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_00100(lower,upper,h);
}
range<t_ind_2::iterator> Type::lowerUpperRange_00110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_2 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_2.end(), ind_2.end());
}
return make_range(ind_2.lower_bound(lower, h.hints_2_lower), ind_2.upper_bound(upper, h.hints_2_upper));
}
range<t_ind_2::iterator> Type::lowerUpperRange_00110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_00110(lower,upper,h);
}
range<t_ind_1::iterator> Type::lowerUpperRange_00111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_1 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_1.end(), ind_1.end());
}
return make_range(ind_1.lower_bound(lower, h.hints_1_lower), ind_1.upper_bound(upper, h.hints_1_upper));
}
range<t_ind_1::iterator> Type::lowerUpperRange_00111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_00111(lower,upper,h);
}
bool Type::empty() const {
return ind_1.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_1.getChunks(400);
}
void Type::purge() {
ind_0.clear();
ind_1.clear();
ind_2.clear();
}
iterator Type::begin() const {
return ind_1.begin();
}
iterator Type::end() const {
return ind_1.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 5 direct b-tree index 0 lex-order [0,1,2]\n";
ind_0.printStats(o);
o << " arity 5 direct b-tree index 1 lex-order [4,2,3,0,1]\n";
ind_1.printStats(o);
o << " arity 5 direct b-tree index 2 lex-order [2,3,0,1]\n";
ind_2.printStats(o);
}
} // namespace souffle::t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111 
namespace souffle::t_btree_iiiii__0_4_1_2_3__11111__10001 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 5;
using t_tuple = Tuple<RamDomain, 5>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0)))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]))|| ((ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_10001(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_10001(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiiii__0_4_1_2_3__11111__10001 
namespace souffle::t_btree_iiiii__0_4_1_2_3__11111__10001 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11111(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_10001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_10001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_10001(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 5 direct b-tree index 0 lex-order [0,4,1,2,3]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiiii__0_4_1_2_3__11111__10001 
namespace souffle::t_btree_iiiii__3_0_1_2_4__11111__00010 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 5;
using t_tuple = Tuple<RamDomain, 5>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :(0)))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]))))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_00010(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_00010(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiiii__3_0_1_2_4__11111__00010 
namespace souffle::t_btree_iiiii__3_0_1_2_4__11111__00010 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_00000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_11111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11111(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_00010(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_00010(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_00010(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 5 direct b-tree index 0 lex-order [3,0,1,2,4]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiiii__3_0_1_2_4__11111__00010 
namespace souffle::t_btree_iiiiiii__6_0_1_2_3_4_5__1111111__0000001 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 7;
using t_tuple = Tuple<RamDomain, 7>;
Table<t_tuple> dataTable;
Lock insert_lock;
struct t_comparator_0{
 int operator()(const t_tuple *a, const t_tuple *b) const {
  return (ramBitCast<RamSigned>((*a)[6]) <ramBitCast<RamSigned> ((*b)[6])) ? -1 : ((ramBitCast<RamSigned>((*a)[6]) > ramBitCast<RamSigned>((*b)[6])) ? 1 :((ramBitCast<RamSigned>((*a)[0]) <ramBitCast<RamSigned> ((*b)[0])) ? -1 : ((ramBitCast<RamSigned>((*a)[0]) > ramBitCast<RamSigned>((*b)[0])) ? 1 :((ramBitCast<RamSigned>((*a)[1]) <ramBitCast<RamSigned> ((*b)[1])) ? -1 : ((ramBitCast<RamSigned>((*a)[1]) > ramBitCast<RamSigned>((*b)[1])) ? 1 :((ramBitCast<RamSigned>((*a)[2]) <ramBitCast<RamSigned> ((*b)[2])) ? -1 : ((ramBitCast<RamSigned>((*a)[2]) > ramBitCast<RamSigned>((*b)[2])) ? 1 :((ramBitCast<RamSigned>((*a)[3]) <ramBitCast<RamSigned> ((*b)[3])) ? -1 : ((ramBitCast<RamSigned>((*a)[3]) > ramBitCast<RamSigned>((*b)[3])) ? 1 :((ramBitCast<RamSigned>((*a)[4]) <ramBitCast<RamSigned> ((*b)[4])) ? -1 : ((ramBitCast<RamSigned>((*a)[4]) > ramBitCast<RamSigned>((*b)[4])) ? 1 :((ramBitCast<RamSigned>((*a)[5]) <ramBitCast<RamSigned> ((*b)[5])) ? -1 : ((ramBitCast<RamSigned>((*a)[5]) > ramBitCast<RamSigned>((*b)[5])) ? 1 :(0))))))))))))));
 }
bool less(const t_tuple *a, const t_tuple *b) const {
  return ramBitCast<RamSigned> ((*a)[6]) < ramBitCast<RamSigned>((*b)[6])|| ((ramBitCast<RamSigned>((*a)[6]) == ramBitCast<RamSigned>((*b)[6]) && (ramBitCast<RamSigned> ((*a)[0]) < ramBitCast<RamSigned>((*b)[0])|| ((ramBitCast<RamSigned>((*a)[0]) == ramBitCast<RamSigned>((*b)[0]) && (ramBitCast<RamSigned> ((*a)[1]) < ramBitCast<RamSigned>((*b)[1])|| ((ramBitCast<RamSigned>((*a)[1]) == ramBitCast<RamSigned>((*b)[1]) && (ramBitCast<RamSigned> ((*a)[2]) < ramBitCast<RamSigned>((*b)[2])|| ((ramBitCast<RamSigned>((*a)[2]) == ramBitCast<RamSigned>((*b)[2]) && (ramBitCast<RamSigned> ((*a)[3]) < ramBitCast<RamSigned>((*b)[3])|| ((ramBitCast<RamSigned>((*a)[3]) == ramBitCast<RamSigned>((*b)[3]) && (ramBitCast<RamSigned> ((*a)[4]) < ramBitCast<RamSigned>((*b)[4])|| ((ramBitCast<RamSigned>((*a)[4]) == ramBitCast<RamSigned>((*b)[4]) && (ramBitCast<RamSigned> ((*a)[5]) < ramBitCast<RamSigned>((*b)[5])))))))))))))))))));
 }
bool equal(const t_tuple *a, const t_tuple *b) const {
return ramBitCast<RamSigned>((*a)[6]) == ramBitCast<RamSigned>((*b)[6])&&ramBitCast<RamSigned>((*a)[0]) == ramBitCast<RamSigned>((*b)[0])&&ramBitCast<RamSigned>((*a)[1]) == ramBitCast<RamSigned>((*b)[1])&&ramBitCast<RamSigned>((*a)[2]) == ramBitCast<RamSigned>((*b)[2])&&ramBitCast<RamSigned>((*a)[3]) == ramBitCast<RamSigned>((*b)[3])&&ramBitCast<RamSigned>((*a)[4]) == ramBitCast<RamSigned>((*b)[4])&&ramBitCast<RamSigned>((*a)[5]) == ramBitCast<RamSigned>((*b)[5]);
 }
};
using t_ind_0 = btree_set<const t_tuple*,t_comparator_0>;
t_ind_0 ind_0;
using iterator_0 = IterDerefWrapper<typename t_ind_0::iterator>;
using iterator = iterator_0;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext();
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5,RamDomain a6);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<iterator> lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper) const;
range<iterator_0> lowerUpperRange_1111111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<iterator_0> lowerUpperRange_1111111(const t_tuple& lower, const t_tuple& upper) const;
range<iterator_0> lowerUpperRange_0000001(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<iterator_0> lowerUpperRange_0000001(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiiiiii__6_0_1_2_3_4_5__1111111__0000001 
namespace souffle::t_btree_iiiiiii__6_0_1_2_3_4_5__1111111__0000001 {
using namespace souffle;
using iterator_0 = Type::iterator_0;
using iterator = Type::iterator;
using context = Type::context;
context Type::createContext() { return context(); }
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
const t_tuple* masterCopy = nullptr;
{
auto lease = insert_lock.acquire();
if (contains(t, h)) return false;
masterCopy = &dataTable.insert(t);
ind_0.insert(masterCopy, h.hints_0_lower);
}
return true;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[7];
std::copy(ramDomain, ramDomain + 7, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5,RamDomain a6) {
RamDomain data[7] = {a0,a1,a2,a3,a4,a5,a6};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(&t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(&t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator_0> Type::lowerUpperRange_1111111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(&lower, &upper);
if (cmp == 0) {
    auto pos = ind_0.find(&lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return range<iterator_0>(pos, fin);
}
if (cmp > 0) {
    return range<iterator_0>(ind_0.end(), ind_0.end());
}
return range<iterator_0>(ind_0.lower_bound(&lower, h.hints_0_lower), ind_0.upper_bound(&upper, h.hints_0_upper));
}
range<iterator_0> Type::lowerUpperRange_1111111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111111(lower, upper, h);
}
range<iterator_0> Type::lowerUpperRange_0000001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(&lower, &upper);
if (cmp > 0) {
    return range<iterator_0>(ind_0.end(), ind_0.end());
}
return range<iterator_0>(ind_0.lower_bound(&lower, h.hints_0_lower), ind_0.upper_bound(&upper, h.hints_0_upper));
}
range<iterator_0> Type::lowerUpperRange_0000001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0000001(lower, upper, h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
std::vector<range<iterator>> res;
for (const auto& cur : ind_0.getChunks(400)) {
    res.push_back(make_range(derefIter(cur.begin()), derefIter(cur.end())));
}
return res;
}
void Type::purge() {
ind_0.clear();
dataTable.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 7 indirect b-tree index 0 lex-order [6,0,1,2,3,4,5]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiiiiii__6_0_1_2_3_4_5__1111111__0000001 
namespace souffle::t_btree_iiii__2_3_0_1__1111__0011 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 4;
using t_tuple = Tuple<RamDomain, 4>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :(0))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_0011(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_0011(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiii__2_3_0_1__1111__0011 
namespace souffle::t_btree_iiii__2_3_0_1__1111__0011 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_0000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_1111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_0011(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_0011(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_0011(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 4 direct b-tree index 0 lex-order [2,3,0,1]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiii__2_3_0_1__1111__0011 
namespace souffle::t_btree_iiiiiiiiii__0_1_2_3_4_5_6_7_8_9__1111111111 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 10;
using t_tuple = Tuple<RamDomain, 10>;
Table<t_tuple> dataTable;
Lock insert_lock;
struct t_comparator_0{
 int operator()(const t_tuple *a, const t_tuple *b) const {
  return (ramBitCast<RamSigned>((*a)[0]) <ramBitCast<RamSigned> ((*b)[0])) ? -1 : ((ramBitCast<RamSigned>((*a)[0]) > ramBitCast<RamSigned>((*b)[0])) ? 1 :((ramBitCast<RamSigned>((*a)[1]) <ramBitCast<RamSigned> ((*b)[1])) ? -1 : ((ramBitCast<RamSigned>((*a)[1]) > ramBitCast<RamSigned>((*b)[1])) ? 1 :((ramBitCast<RamSigned>((*a)[2]) <ramBitCast<RamSigned> ((*b)[2])) ? -1 : ((ramBitCast<RamSigned>((*a)[2]) > ramBitCast<RamSigned>((*b)[2])) ? 1 :((ramBitCast<RamSigned>((*a)[3]) <ramBitCast<RamSigned> ((*b)[3])) ? -1 : ((ramBitCast<RamSigned>((*a)[3]) > ramBitCast<RamSigned>((*b)[3])) ? 1 :((ramBitCast<RamSigned>((*a)[4]) <ramBitCast<RamSigned> ((*b)[4])) ? -1 : ((ramBitCast<RamSigned>((*a)[4]) > ramBitCast<RamSigned>((*b)[4])) ? 1 :((ramBitCast<RamSigned>((*a)[5]) <ramBitCast<RamSigned> ((*b)[5])) ? -1 : ((ramBitCast<RamSigned>((*a)[5]) > ramBitCast<RamSigned>((*b)[5])) ? 1 :((ramBitCast<RamSigned>((*a)[6]) <ramBitCast<RamSigned> ((*b)[6])) ? -1 : ((ramBitCast<RamSigned>((*a)[6]) > ramBitCast<RamSigned>((*b)[6])) ? 1 :((ramBitCast<RamSigned>((*a)[7]) <ramBitCast<RamSigned> ((*b)[7])) ? -1 : ((ramBitCast<RamSigned>((*a)[7]) > ramBitCast<RamSigned>((*b)[7])) ? 1 :((ramBitCast<RamSigned>((*a)[8]) <ramBitCast<RamSigned> ((*b)[8])) ? -1 : ((ramBitCast<RamSigned>((*a)[8]) > ramBitCast<RamSigned>((*b)[8])) ? 1 :((ramBitCast<RamSigned>((*a)[9]) <ramBitCast<RamSigned> ((*b)[9])) ? -1 : ((ramBitCast<RamSigned>((*a)[9]) > ramBitCast<RamSigned>((*b)[9])) ? 1 :(0))))))))))))))))))));
 }
bool less(const t_tuple *a, const t_tuple *b) const {
  return ramBitCast<RamSigned> ((*a)[0]) < ramBitCast<RamSigned>((*b)[0])|| ((ramBitCast<RamSigned>((*a)[0]) == ramBitCast<RamSigned>((*b)[0]) && (ramBitCast<RamSigned> ((*a)[1]) < ramBitCast<RamSigned>((*b)[1])|| ((ramBitCast<RamSigned>((*a)[1]) == ramBitCast<RamSigned>((*b)[1]) && (ramBitCast<RamSigned> ((*a)[2]) < ramBitCast<RamSigned>((*b)[2])|| ((ramBitCast<RamSigned>((*a)[2]) == ramBitCast<RamSigned>((*b)[2]) && (ramBitCast<RamSigned> ((*a)[3]) < ramBitCast<RamSigned>((*b)[3])|| ((ramBitCast<RamSigned>((*a)[3]) == ramBitCast<RamSigned>((*b)[3]) && (ramBitCast<RamSigned> ((*a)[4]) < ramBitCast<RamSigned>((*b)[4])|| ((ramBitCast<RamSigned>((*a)[4]) == ramBitCast<RamSigned>((*b)[4]) && (ramBitCast<RamSigned> ((*a)[5]) < ramBitCast<RamSigned>((*b)[5])|| ((ramBitCast<RamSigned>((*a)[5]) == ramBitCast<RamSigned>((*b)[5]) && (ramBitCast<RamSigned> ((*a)[6]) < ramBitCast<RamSigned>((*b)[6])|| ((ramBitCast<RamSigned>((*a)[6]) == ramBitCast<RamSigned>((*b)[6]) && (ramBitCast<RamSigned> ((*a)[7]) < ramBitCast<RamSigned>((*b)[7])|| ((ramBitCast<RamSigned>((*a)[7]) == ramBitCast<RamSigned>((*b)[7]) && (ramBitCast<RamSigned> ((*a)[8]) < ramBitCast<RamSigned>((*b)[8])|| ((ramBitCast<RamSigned>((*a)[8]) == ramBitCast<RamSigned>((*b)[8]) && (ramBitCast<RamSigned> ((*a)[9]) < ramBitCast<RamSigned>((*b)[9]))))))))))))))))))))))))))));
 }
bool equal(const t_tuple *a, const t_tuple *b) const {
return ramBitCast<RamSigned>((*a)[0]) == ramBitCast<RamSigned>((*b)[0])&&ramBitCast<RamSigned>((*a)[1]) == ramBitCast<RamSigned>((*b)[1])&&ramBitCast<RamSigned>((*a)[2]) == ramBitCast<RamSigned>((*b)[2])&&ramBitCast<RamSigned>((*a)[3]) == ramBitCast<RamSigned>((*b)[3])&&ramBitCast<RamSigned>((*a)[4]) == ramBitCast<RamSigned>((*b)[4])&&ramBitCast<RamSigned>((*a)[5]) == ramBitCast<RamSigned>((*b)[5])&&ramBitCast<RamSigned>((*a)[6]) == ramBitCast<RamSigned>((*b)[6])&&ramBitCast<RamSigned>((*a)[7]) == ramBitCast<RamSigned>((*b)[7])&&ramBitCast<RamSigned>((*a)[8]) == ramBitCast<RamSigned>((*b)[8])&&ramBitCast<RamSigned>((*a)[9]) == ramBitCast<RamSigned>((*b)[9]);
 }
};
using t_ind_0 = btree_set<const t_tuple*,t_comparator_0>;
t_ind_0 ind_0;
using iterator_0 = IterDerefWrapper<typename t_ind_0::iterator>;
using iterator = iterator_0;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext();
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5,RamDomain a6,RamDomain a7,RamDomain a8,RamDomain a9);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<iterator> lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper) const;
range<iterator_0> lowerUpperRange_1111111111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<iterator_0> lowerUpperRange_1111111111(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiiiiiiiii__0_1_2_3_4_5_6_7_8_9__1111111111 
namespace souffle::t_btree_iiiiiiiiii__0_1_2_3_4_5_6_7_8_9__1111111111 {
using namespace souffle;
using iterator_0 = Type::iterator_0;
using iterator = Type::iterator;
using context = Type::context;
context Type::createContext() { return context(); }
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
const t_tuple* masterCopy = nullptr;
{
auto lease = insert_lock.acquire();
if (contains(t, h)) return false;
masterCopy = &dataTable.insert(t);
ind_0.insert(masterCopy, h.hints_0_lower);
}
return true;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[10];
std::copy(ramDomain, ramDomain + 10, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5,RamDomain a6,RamDomain a7,RamDomain a8,RamDomain a9) {
RamDomain data[10] = {a0,a1,a2,a3,a4,a5,a6,a7,a8,a9};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(&t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(&t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator_0> Type::lowerUpperRange_1111111111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(&lower, &upper);
if (cmp == 0) {
    auto pos = ind_0.find(&lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return range<iterator_0>(pos, fin);
}
if (cmp > 0) {
    return range<iterator_0>(ind_0.end(), ind_0.end());
}
return range<iterator_0>(ind_0.lower_bound(&lower, h.hints_0_lower), ind_0.upper_bound(&upper, h.hints_0_upper));
}
range<iterator_0> Type::lowerUpperRange_1111111111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111111111(lower, upper, h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
std::vector<range<iterator>> res;
for (const auto& cur : ind_0.getChunks(400)) {
    res.push_back(make_range(derefIter(cur.begin()), derefIter(cur.end())));
}
return res;
}
void Type::purge() {
ind_0.clear();
dataTable.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 10 indirect b-tree index 0 lex-order [0,1,2,3,4,5,6,7,8,9]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiiiiiiiii__0_1_2_3_4_5_6_7_8_9__1111111111 
namespace souffle::t_btree_iiiiiiii__0_1_3_5_6_2_4_7__11010110__11111111 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 8;
using t_tuple = Tuple<RamDomain, 8>;
Table<t_tuple> dataTable;
Lock insert_lock;
struct t_comparator_0{
 int operator()(const t_tuple *a, const t_tuple *b) const {
  return (ramBitCast<RamSigned>((*a)[0]) <ramBitCast<RamSigned> ((*b)[0])) ? -1 : ((ramBitCast<RamSigned>((*a)[0]) > ramBitCast<RamSigned>((*b)[0])) ? 1 :((ramBitCast<RamSigned>((*a)[1]) <ramBitCast<RamSigned> ((*b)[1])) ? -1 : ((ramBitCast<RamSigned>((*a)[1]) > ramBitCast<RamSigned>((*b)[1])) ? 1 :((ramBitCast<RamSigned>((*a)[3]) <ramBitCast<RamSigned> ((*b)[3])) ? -1 : ((ramBitCast<RamSigned>((*a)[3]) > ramBitCast<RamSigned>((*b)[3])) ? 1 :((ramBitCast<RamSigned>((*a)[5]) <ramBitCast<RamSigned> ((*b)[5])) ? -1 : ((ramBitCast<RamSigned>((*a)[5]) > ramBitCast<RamSigned>((*b)[5])) ? 1 :((ramBitCast<RamSigned>((*a)[6]) <ramBitCast<RamSigned> ((*b)[6])) ? -1 : ((ramBitCast<RamSigned>((*a)[6]) > ramBitCast<RamSigned>((*b)[6])) ? 1 :((ramBitCast<RamSigned>((*a)[2]) <ramBitCast<RamSigned> ((*b)[2])) ? -1 : ((ramBitCast<RamSigned>((*a)[2]) > ramBitCast<RamSigned>((*b)[2])) ? 1 :((ramBitCast<RamSigned>((*a)[4]) <ramBitCast<RamSigned> ((*b)[4])) ? -1 : ((ramBitCast<RamSigned>((*a)[4]) > ramBitCast<RamSigned>((*b)[4])) ? 1 :((ramBitCast<RamSigned>((*a)[7]) <ramBitCast<RamSigned> ((*b)[7])) ? -1 : ((ramBitCast<RamSigned>((*a)[7]) > ramBitCast<RamSigned>((*b)[7])) ? 1 :(0))))))))))))))));
 }
bool less(const t_tuple *a, const t_tuple *b) const {
  return ramBitCast<RamSigned> ((*a)[0]) < ramBitCast<RamSigned>((*b)[0])|| ((ramBitCast<RamSigned>((*a)[0]) == ramBitCast<RamSigned>((*b)[0]) && (ramBitCast<RamSigned> ((*a)[1]) < ramBitCast<RamSigned>((*b)[1])|| ((ramBitCast<RamSigned>((*a)[1]) == ramBitCast<RamSigned>((*b)[1]) && (ramBitCast<RamSigned> ((*a)[3]) < ramBitCast<RamSigned>((*b)[3])|| ((ramBitCast<RamSigned>((*a)[3]) == ramBitCast<RamSigned>((*b)[3]) && (ramBitCast<RamSigned> ((*a)[5]) < ramBitCast<RamSigned>((*b)[5])|| ((ramBitCast<RamSigned>((*a)[5]) == ramBitCast<RamSigned>((*b)[5]) && (ramBitCast<RamSigned> ((*a)[6]) < ramBitCast<RamSigned>((*b)[6])|| ((ramBitCast<RamSigned>((*a)[6]) == ramBitCast<RamSigned>((*b)[6]) && (ramBitCast<RamSigned> ((*a)[2]) < ramBitCast<RamSigned>((*b)[2])|| ((ramBitCast<RamSigned>((*a)[2]) == ramBitCast<RamSigned>((*b)[2]) && (ramBitCast<RamSigned> ((*a)[4]) < ramBitCast<RamSigned>((*b)[4])|| ((ramBitCast<RamSigned>((*a)[4]) == ramBitCast<RamSigned>((*b)[4]) && (ramBitCast<RamSigned> ((*a)[7]) < ramBitCast<RamSigned>((*b)[7]))))))))))))))))))))));
 }
bool equal(const t_tuple *a, const t_tuple *b) const {
return ramBitCast<RamSigned>((*a)[0]) == ramBitCast<RamSigned>((*b)[0])&&ramBitCast<RamSigned>((*a)[1]) == ramBitCast<RamSigned>((*b)[1])&&ramBitCast<RamSigned>((*a)[3]) == ramBitCast<RamSigned>((*b)[3])&&ramBitCast<RamSigned>((*a)[5]) == ramBitCast<RamSigned>((*b)[5])&&ramBitCast<RamSigned>((*a)[6]) == ramBitCast<RamSigned>((*b)[6])&&ramBitCast<RamSigned>((*a)[2]) == ramBitCast<RamSigned>((*b)[2])&&ramBitCast<RamSigned>((*a)[4]) == ramBitCast<RamSigned>((*b)[4])&&ramBitCast<RamSigned>((*a)[7]) == ramBitCast<RamSigned>((*b)[7]);
 }
};
using t_ind_0 = btree_set<const t_tuple*,t_comparator_0>;
t_ind_0 ind_0;
using iterator_0 = IterDerefWrapper<typename t_ind_0::iterator>;
using iterator = iterator_0;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext();
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5,RamDomain a6,RamDomain a7);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<iterator> lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper) const;
range<iterator_0> lowerUpperRange_11010110(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<iterator_0> lowerUpperRange_11010110(const t_tuple& lower, const t_tuple& upper) const;
range<iterator_0> lowerUpperRange_11111111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<iterator_0> lowerUpperRange_11111111(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiiiiiii__0_1_3_5_6_2_4_7__11010110__11111111 
namespace souffle::t_btree_iiiiiiii__0_1_3_5_6_2_4_7__11010110__11111111 {
using namespace souffle;
using iterator_0 = Type::iterator_0;
using iterator = Type::iterator;
using context = Type::context;
context Type::createContext() { return context(); }
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
const t_tuple* masterCopy = nullptr;
{
auto lease = insert_lock.acquire();
if (contains(t, h)) return false;
masterCopy = &dataTable.insert(t);
ind_0.insert(masterCopy, h.hints_0_lower);
}
return true;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[8];
std::copy(ramDomain, ramDomain + 8, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5,RamDomain a6,RamDomain a7) {
RamDomain data[8] = {a0,a1,a2,a3,a4,a5,a6,a7};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(&t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(&t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator_0> Type::lowerUpperRange_11010110(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(&lower, &upper);
if (cmp > 0) {
    return range<iterator_0>(ind_0.end(), ind_0.end());
}
return range<iterator_0>(ind_0.lower_bound(&lower, h.hints_0_lower), ind_0.upper_bound(&upper, h.hints_0_upper));
}
range<iterator_0> Type::lowerUpperRange_11010110(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11010110(lower, upper, h);
}
range<iterator_0> Type::lowerUpperRange_11111111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(&lower, &upper);
if (cmp == 0) {
    auto pos = ind_0.find(&lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return range<iterator_0>(pos, fin);
}
if (cmp > 0) {
    return range<iterator_0>(ind_0.end(), ind_0.end());
}
return range<iterator_0>(ind_0.lower_bound(&lower, h.hints_0_lower), ind_0.upper_bound(&upper, h.hints_0_upper));
}
range<iterator_0> Type::lowerUpperRange_11111111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_11111111(lower, upper, h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
std::vector<range<iterator>> res;
for (const auto& cur : ind_0.getChunks(400)) {
    res.push_back(make_range(derefIter(cur.begin()), derefIter(cur.end())));
}
return res;
}
void Type::purge() {
ind_0.clear();
dataTable.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 8 indirect b-tree index 0 lex-order [0,1,3,5,6,2,4,7]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiiiiiii__0_1_3_5_6_2_4_7__11010110__11111111 
namespace souffle::t_btree_iiiiiii__0_6_1_2_3_4_5__1111111__1000001 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 7;
using t_tuple = Tuple<RamDomain, 7>;
Table<t_tuple> dataTable;
Lock insert_lock;
struct t_comparator_0{
 int operator()(const t_tuple *a, const t_tuple *b) const {
  return (ramBitCast<RamSigned>((*a)[0]) <ramBitCast<RamSigned> ((*b)[0])) ? -1 : ((ramBitCast<RamSigned>((*a)[0]) > ramBitCast<RamSigned>((*b)[0])) ? 1 :((ramBitCast<RamSigned>((*a)[6]) <ramBitCast<RamSigned> ((*b)[6])) ? -1 : ((ramBitCast<RamSigned>((*a)[6]) > ramBitCast<RamSigned>((*b)[6])) ? 1 :((ramBitCast<RamSigned>((*a)[1]) <ramBitCast<RamSigned> ((*b)[1])) ? -1 : ((ramBitCast<RamSigned>((*a)[1]) > ramBitCast<RamSigned>((*b)[1])) ? 1 :((ramBitCast<RamSigned>((*a)[2]) <ramBitCast<RamSigned> ((*b)[2])) ? -1 : ((ramBitCast<RamSigned>((*a)[2]) > ramBitCast<RamSigned>((*b)[2])) ? 1 :((ramBitCast<RamSigned>((*a)[3]) <ramBitCast<RamSigned> ((*b)[3])) ? -1 : ((ramBitCast<RamSigned>((*a)[3]) > ramBitCast<RamSigned>((*b)[3])) ? 1 :((ramBitCast<RamSigned>((*a)[4]) <ramBitCast<RamSigned> ((*b)[4])) ? -1 : ((ramBitCast<RamSigned>((*a)[4]) > ramBitCast<RamSigned>((*b)[4])) ? 1 :((ramBitCast<RamSigned>((*a)[5]) <ramBitCast<RamSigned> ((*b)[5])) ? -1 : ((ramBitCast<RamSigned>((*a)[5]) > ramBitCast<RamSigned>((*b)[5])) ? 1 :(0))))))))))))));
 }
bool less(const t_tuple *a, const t_tuple *b) const {
  return ramBitCast<RamSigned> ((*a)[0]) < ramBitCast<RamSigned>((*b)[0])|| ((ramBitCast<RamSigned>((*a)[0]) == ramBitCast<RamSigned>((*b)[0]) && (ramBitCast<RamSigned> ((*a)[6]) < ramBitCast<RamSigned>((*b)[6])|| ((ramBitCast<RamSigned>((*a)[6]) == ramBitCast<RamSigned>((*b)[6]) && (ramBitCast<RamSigned> ((*a)[1]) < ramBitCast<RamSigned>((*b)[1])|| ((ramBitCast<RamSigned>((*a)[1]) == ramBitCast<RamSigned>((*b)[1]) && (ramBitCast<RamSigned> ((*a)[2]) < ramBitCast<RamSigned>((*b)[2])|| ((ramBitCast<RamSigned>((*a)[2]) == ramBitCast<RamSigned>((*b)[2]) && (ramBitCast<RamSigned> ((*a)[3]) < ramBitCast<RamSigned>((*b)[3])|| ((ramBitCast<RamSigned>((*a)[3]) == ramBitCast<RamSigned>((*b)[3]) && (ramBitCast<RamSigned> ((*a)[4]) < ramBitCast<RamSigned>((*b)[4])|| ((ramBitCast<RamSigned>((*a)[4]) == ramBitCast<RamSigned>((*b)[4]) && (ramBitCast<RamSigned> ((*a)[5]) < ramBitCast<RamSigned>((*b)[5])))))))))))))))))));
 }
bool equal(const t_tuple *a, const t_tuple *b) const {
return ramBitCast<RamSigned>((*a)[0]) == ramBitCast<RamSigned>((*b)[0])&&ramBitCast<RamSigned>((*a)[6]) == ramBitCast<RamSigned>((*b)[6])&&ramBitCast<RamSigned>((*a)[1]) == ramBitCast<RamSigned>((*b)[1])&&ramBitCast<RamSigned>((*a)[2]) == ramBitCast<RamSigned>((*b)[2])&&ramBitCast<RamSigned>((*a)[3]) == ramBitCast<RamSigned>((*b)[3])&&ramBitCast<RamSigned>((*a)[4]) == ramBitCast<RamSigned>((*b)[4])&&ramBitCast<RamSigned>((*a)[5]) == ramBitCast<RamSigned>((*b)[5]);
 }
};
using t_ind_0 = btree_set<const t_tuple*,t_comparator_0>;
t_ind_0 ind_0;
using iterator_0 = IterDerefWrapper<typename t_ind_0::iterator>;
using iterator = iterator_0;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext();
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5,RamDomain a6);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<iterator> lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper) const;
range<iterator_0> lowerUpperRange_1111111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<iterator_0> lowerUpperRange_1111111(const t_tuple& lower, const t_tuple& upper) const;
range<iterator_0> lowerUpperRange_1000001(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<iterator_0> lowerUpperRange_1000001(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiiiiii__0_6_1_2_3_4_5__1111111__1000001 
namespace souffle::t_btree_iiiiiii__0_6_1_2_3_4_5__1111111__1000001 {
using namespace souffle;
using iterator_0 = Type::iterator_0;
using iterator = Type::iterator;
using context = Type::context;
context Type::createContext() { return context(); }
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
const t_tuple* masterCopy = nullptr;
{
auto lease = insert_lock.acquire();
if (contains(t, h)) return false;
masterCopy = &dataTable.insert(t);
ind_0.insert(masterCopy, h.hints_0_lower);
}
return true;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[7];
std::copy(ramDomain, ramDomain + 7, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5,RamDomain a6) {
RamDomain data[7] = {a0,a1,a2,a3,a4,a5,a6};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(&t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(&t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator_0> Type::lowerUpperRange_1111111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(&lower, &upper);
if (cmp == 0) {
    auto pos = ind_0.find(&lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return range<iterator_0>(pos, fin);
}
if (cmp > 0) {
    return range<iterator_0>(ind_0.end(), ind_0.end());
}
return range<iterator_0>(ind_0.lower_bound(&lower, h.hints_0_lower), ind_0.upper_bound(&upper, h.hints_0_upper));
}
range<iterator_0> Type::lowerUpperRange_1111111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111111(lower, upper, h);
}
range<iterator_0> Type::lowerUpperRange_1000001(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(&lower, &upper);
if (cmp > 0) {
    return range<iterator_0>(ind_0.end(), ind_0.end());
}
return range<iterator_0>(ind_0.lower_bound(&lower, h.hints_0_lower), ind_0.upper_bound(&upper, h.hints_0_upper));
}
range<iterator_0> Type::lowerUpperRange_1000001(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1000001(lower, upper, h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
std::vector<range<iterator>> res;
for (const auto& cur : ind_0.getChunks(400)) {
    res.push_back(make_range(derefIter(cur.begin()), derefIter(cur.end())));
}
return res;
}
void Type::purge() {
ind_0.clear();
dataTable.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 7 indirect b-tree index 0 lex-order [0,6,1,2,3,4,5]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiiiiii__0_6_1_2_3_4_5__1111111__1000001 
namespace souffle::t_btree_iiiiiiiiii__0_4_5_6_7_8_9_1_2_3__1111111111__1000111111 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 10;
using t_tuple = Tuple<RamDomain, 10>;
Table<t_tuple> dataTable;
Lock insert_lock;
struct t_comparator_0{
 int operator()(const t_tuple *a, const t_tuple *b) const {
  return (ramBitCast<RamSigned>((*a)[0]) <ramBitCast<RamSigned> ((*b)[0])) ? -1 : ((ramBitCast<RamSigned>((*a)[0]) > ramBitCast<RamSigned>((*b)[0])) ? 1 :((ramBitCast<RamSigned>((*a)[4]) <ramBitCast<RamSigned> ((*b)[4])) ? -1 : ((ramBitCast<RamSigned>((*a)[4]) > ramBitCast<RamSigned>((*b)[4])) ? 1 :((ramBitCast<RamSigned>((*a)[5]) <ramBitCast<RamSigned> ((*b)[5])) ? -1 : ((ramBitCast<RamSigned>((*a)[5]) > ramBitCast<RamSigned>((*b)[5])) ? 1 :((ramBitCast<RamSigned>((*a)[6]) <ramBitCast<RamSigned> ((*b)[6])) ? -1 : ((ramBitCast<RamSigned>((*a)[6]) > ramBitCast<RamSigned>((*b)[6])) ? 1 :((ramBitCast<RamSigned>((*a)[7]) <ramBitCast<RamSigned> ((*b)[7])) ? -1 : ((ramBitCast<RamSigned>((*a)[7]) > ramBitCast<RamSigned>((*b)[7])) ? 1 :((ramBitCast<RamSigned>((*a)[8]) <ramBitCast<RamSigned> ((*b)[8])) ? -1 : ((ramBitCast<RamSigned>((*a)[8]) > ramBitCast<RamSigned>((*b)[8])) ? 1 :((ramBitCast<RamSigned>((*a)[9]) <ramBitCast<RamSigned> ((*b)[9])) ? -1 : ((ramBitCast<RamSigned>((*a)[9]) > ramBitCast<RamSigned>((*b)[9])) ? 1 :((ramBitCast<RamSigned>((*a)[1]) <ramBitCast<RamSigned> ((*b)[1])) ? -1 : ((ramBitCast<RamSigned>((*a)[1]) > ramBitCast<RamSigned>((*b)[1])) ? 1 :((ramBitCast<RamSigned>((*a)[2]) <ramBitCast<RamSigned> ((*b)[2])) ? -1 : ((ramBitCast<RamSigned>((*a)[2]) > ramBitCast<RamSigned>((*b)[2])) ? 1 :((ramBitCast<RamSigned>((*a)[3]) <ramBitCast<RamSigned> ((*b)[3])) ? -1 : ((ramBitCast<RamSigned>((*a)[3]) > ramBitCast<RamSigned>((*b)[3])) ? 1 :(0))))))))))))))))))));
 }
bool less(const t_tuple *a, const t_tuple *b) const {
  return ramBitCast<RamSigned> ((*a)[0]) < ramBitCast<RamSigned>((*b)[0])|| ((ramBitCast<RamSigned>((*a)[0]) == ramBitCast<RamSigned>((*b)[0]) && (ramBitCast<RamSigned> ((*a)[4]) < ramBitCast<RamSigned>((*b)[4])|| ((ramBitCast<RamSigned>((*a)[4]) == ramBitCast<RamSigned>((*b)[4]) && (ramBitCast<RamSigned> ((*a)[5]) < ramBitCast<RamSigned>((*b)[5])|| ((ramBitCast<RamSigned>((*a)[5]) == ramBitCast<RamSigned>((*b)[5]) && (ramBitCast<RamSigned> ((*a)[6]) < ramBitCast<RamSigned>((*b)[6])|| ((ramBitCast<RamSigned>((*a)[6]) == ramBitCast<RamSigned>((*b)[6]) && (ramBitCast<RamSigned> ((*a)[7]) < ramBitCast<RamSigned>((*b)[7])|| ((ramBitCast<RamSigned>((*a)[7]) == ramBitCast<RamSigned>((*b)[7]) && (ramBitCast<RamSigned> ((*a)[8]) < ramBitCast<RamSigned>((*b)[8])|| ((ramBitCast<RamSigned>((*a)[8]) == ramBitCast<RamSigned>((*b)[8]) && (ramBitCast<RamSigned> ((*a)[9]) < ramBitCast<RamSigned>((*b)[9])|| ((ramBitCast<RamSigned>((*a)[9]) == ramBitCast<RamSigned>((*b)[9]) && (ramBitCast<RamSigned> ((*a)[1]) < ramBitCast<RamSigned>((*b)[1])|| ((ramBitCast<RamSigned>((*a)[1]) == ramBitCast<RamSigned>((*b)[1]) && (ramBitCast<RamSigned> ((*a)[2]) < ramBitCast<RamSigned>((*b)[2])|| ((ramBitCast<RamSigned>((*a)[2]) == ramBitCast<RamSigned>((*b)[2]) && (ramBitCast<RamSigned> ((*a)[3]) < ramBitCast<RamSigned>((*b)[3]))))))))))))))))))))))))))));
 }
bool equal(const t_tuple *a, const t_tuple *b) const {
return ramBitCast<RamSigned>((*a)[0]) == ramBitCast<RamSigned>((*b)[0])&&ramBitCast<RamSigned>((*a)[4]) == ramBitCast<RamSigned>((*b)[4])&&ramBitCast<RamSigned>((*a)[5]) == ramBitCast<RamSigned>((*b)[5])&&ramBitCast<RamSigned>((*a)[6]) == ramBitCast<RamSigned>((*b)[6])&&ramBitCast<RamSigned>((*a)[7]) == ramBitCast<RamSigned>((*b)[7])&&ramBitCast<RamSigned>((*a)[8]) == ramBitCast<RamSigned>((*b)[8])&&ramBitCast<RamSigned>((*a)[9]) == ramBitCast<RamSigned>((*b)[9])&&ramBitCast<RamSigned>((*a)[1]) == ramBitCast<RamSigned>((*b)[1])&&ramBitCast<RamSigned>((*a)[2]) == ramBitCast<RamSigned>((*b)[2])&&ramBitCast<RamSigned>((*a)[3]) == ramBitCast<RamSigned>((*b)[3]);
 }
};
using t_ind_0 = btree_set<const t_tuple*,t_comparator_0>;
t_ind_0 ind_0;
using iterator_0 = IterDerefWrapper<typename t_ind_0::iterator>;
using iterator = iterator_0;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext();
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5,RamDomain a6,RamDomain a7,RamDomain a8,RamDomain a9);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<iterator> lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper) const;
range<iterator_0> lowerUpperRange_1111111111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<iterator_0> lowerUpperRange_1111111111(const t_tuple& lower, const t_tuple& upper) const;
range<iterator_0> lowerUpperRange_1000111111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<iterator_0> lowerUpperRange_1000111111(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiiiiiiiii__0_4_5_6_7_8_9_1_2_3__1111111111__1000111111 
namespace souffle::t_btree_iiiiiiiiii__0_4_5_6_7_8_9_1_2_3__1111111111__1000111111 {
using namespace souffle;
using iterator_0 = Type::iterator_0;
using iterator = Type::iterator;
using context = Type::context;
context Type::createContext() { return context(); }
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
const t_tuple* masterCopy = nullptr;
{
auto lease = insert_lock.acquire();
if (contains(t, h)) return false;
masterCopy = &dataTable.insert(t);
ind_0.insert(masterCopy, h.hints_0_lower);
}
return true;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[10];
std::copy(ramDomain, ramDomain + 10, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5,RamDomain a6,RamDomain a7,RamDomain a8,RamDomain a9) {
RamDomain data[10] = {a0,a1,a2,a3,a4,a5,a6,a7,a8,a9};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(&t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(&t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator_0> Type::lowerUpperRange_1111111111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(&lower, &upper);
if (cmp == 0) {
    auto pos = ind_0.find(&lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return range<iterator_0>(pos, fin);
}
if (cmp > 0) {
    return range<iterator_0>(ind_0.end(), ind_0.end());
}
return range<iterator_0>(ind_0.lower_bound(&lower, h.hints_0_lower), ind_0.upper_bound(&upper, h.hints_0_upper));
}
range<iterator_0> Type::lowerUpperRange_1111111111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111111111(lower, upper, h);
}
range<iterator_0> Type::lowerUpperRange_1000111111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(&lower, &upper);
if (cmp > 0) {
    return range<iterator_0>(ind_0.end(), ind_0.end());
}
return range<iterator_0>(ind_0.lower_bound(&lower, h.hints_0_lower), ind_0.upper_bound(&upper, h.hints_0_upper));
}
range<iterator_0> Type::lowerUpperRange_1000111111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1000111111(lower, upper, h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
std::vector<range<iterator>> res;
for (const auto& cur : ind_0.getChunks(400)) {
    res.push_back(make_range(derefIter(cur.begin()), derefIter(cur.end())));
}
return res;
}
void Type::purge() {
ind_0.clear();
dataTable.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 10 indirect b-tree index 0 lex-order [0,4,5,6,7,8,9,1,2,3]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiiiiiiiii__0_4_5_6_7_8_9_1_2_3__1111111111__1000111111 
namespace souffle::t_btree_iiiiiiiiii__0_2_4_8_9_1_3_5_6_7__1010100011__1111111111 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 10;
using t_tuple = Tuple<RamDomain, 10>;
Table<t_tuple> dataTable;
Lock insert_lock;
struct t_comparator_0{
 int operator()(const t_tuple *a, const t_tuple *b) const {
  return (ramBitCast<RamSigned>((*a)[0]) <ramBitCast<RamSigned> ((*b)[0])) ? -1 : ((ramBitCast<RamSigned>((*a)[0]) > ramBitCast<RamSigned>((*b)[0])) ? 1 :((ramBitCast<RamSigned>((*a)[2]) <ramBitCast<RamSigned> ((*b)[2])) ? -1 : ((ramBitCast<RamSigned>((*a)[2]) > ramBitCast<RamSigned>((*b)[2])) ? 1 :((ramBitCast<RamSigned>((*a)[4]) <ramBitCast<RamSigned> ((*b)[4])) ? -1 : ((ramBitCast<RamSigned>((*a)[4]) > ramBitCast<RamSigned>((*b)[4])) ? 1 :((ramBitCast<RamSigned>((*a)[8]) <ramBitCast<RamSigned> ((*b)[8])) ? -1 : ((ramBitCast<RamSigned>((*a)[8]) > ramBitCast<RamSigned>((*b)[8])) ? 1 :((ramBitCast<RamSigned>((*a)[9]) <ramBitCast<RamSigned> ((*b)[9])) ? -1 : ((ramBitCast<RamSigned>((*a)[9]) > ramBitCast<RamSigned>((*b)[9])) ? 1 :((ramBitCast<RamSigned>((*a)[1]) <ramBitCast<RamSigned> ((*b)[1])) ? -1 : ((ramBitCast<RamSigned>((*a)[1]) > ramBitCast<RamSigned>((*b)[1])) ? 1 :((ramBitCast<RamSigned>((*a)[3]) <ramBitCast<RamSigned> ((*b)[3])) ? -1 : ((ramBitCast<RamSigned>((*a)[3]) > ramBitCast<RamSigned>((*b)[3])) ? 1 :((ramBitCast<RamSigned>((*a)[5]) <ramBitCast<RamSigned> ((*b)[5])) ? -1 : ((ramBitCast<RamSigned>((*a)[5]) > ramBitCast<RamSigned>((*b)[5])) ? 1 :((ramBitCast<RamSigned>((*a)[6]) <ramBitCast<RamSigned> ((*b)[6])) ? -1 : ((ramBitCast<RamSigned>((*a)[6]) > ramBitCast<RamSigned>((*b)[6])) ? 1 :((ramBitCast<RamSigned>((*a)[7]) <ramBitCast<RamSigned> ((*b)[7])) ? -1 : ((ramBitCast<RamSigned>((*a)[7]) > ramBitCast<RamSigned>((*b)[7])) ? 1 :(0))))))))))))))))))));
 }
bool less(const t_tuple *a, const t_tuple *b) const {
  return ramBitCast<RamSigned> ((*a)[0]) < ramBitCast<RamSigned>((*b)[0])|| ((ramBitCast<RamSigned>((*a)[0]) == ramBitCast<RamSigned>((*b)[0]) && (ramBitCast<RamSigned> ((*a)[2]) < ramBitCast<RamSigned>((*b)[2])|| ((ramBitCast<RamSigned>((*a)[2]) == ramBitCast<RamSigned>((*b)[2]) && (ramBitCast<RamSigned> ((*a)[4]) < ramBitCast<RamSigned>((*b)[4])|| ((ramBitCast<RamSigned>((*a)[4]) == ramBitCast<RamSigned>((*b)[4]) && (ramBitCast<RamSigned> ((*a)[8]) < ramBitCast<RamSigned>((*b)[8])|| ((ramBitCast<RamSigned>((*a)[8]) == ramBitCast<RamSigned>((*b)[8]) && (ramBitCast<RamSigned> ((*a)[9]) < ramBitCast<RamSigned>((*b)[9])|| ((ramBitCast<RamSigned>((*a)[9]) == ramBitCast<RamSigned>((*b)[9]) && (ramBitCast<RamSigned> ((*a)[1]) < ramBitCast<RamSigned>((*b)[1])|| ((ramBitCast<RamSigned>((*a)[1]) == ramBitCast<RamSigned>((*b)[1]) && (ramBitCast<RamSigned> ((*a)[3]) < ramBitCast<RamSigned>((*b)[3])|| ((ramBitCast<RamSigned>((*a)[3]) == ramBitCast<RamSigned>((*b)[3]) && (ramBitCast<RamSigned> ((*a)[5]) < ramBitCast<RamSigned>((*b)[5])|| ((ramBitCast<RamSigned>((*a)[5]) == ramBitCast<RamSigned>((*b)[5]) && (ramBitCast<RamSigned> ((*a)[6]) < ramBitCast<RamSigned>((*b)[6])|| ((ramBitCast<RamSigned>((*a)[6]) == ramBitCast<RamSigned>((*b)[6]) && (ramBitCast<RamSigned> ((*a)[7]) < ramBitCast<RamSigned>((*b)[7]))))))))))))))))))))))))))));
 }
bool equal(const t_tuple *a, const t_tuple *b) const {
return ramBitCast<RamSigned>((*a)[0]) == ramBitCast<RamSigned>((*b)[0])&&ramBitCast<RamSigned>((*a)[2]) == ramBitCast<RamSigned>((*b)[2])&&ramBitCast<RamSigned>((*a)[4]) == ramBitCast<RamSigned>((*b)[4])&&ramBitCast<RamSigned>((*a)[8]) == ramBitCast<RamSigned>((*b)[8])&&ramBitCast<RamSigned>((*a)[9]) == ramBitCast<RamSigned>((*b)[9])&&ramBitCast<RamSigned>((*a)[1]) == ramBitCast<RamSigned>((*b)[1])&&ramBitCast<RamSigned>((*a)[3]) == ramBitCast<RamSigned>((*b)[3])&&ramBitCast<RamSigned>((*a)[5]) == ramBitCast<RamSigned>((*b)[5])&&ramBitCast<RamSigned>((*a)[6]) == ramBitCast<RamSigned>((*b)[6])&&ramBitCast<RamSigned>((*a)[7]) == ramBitCast<RamSigned>((*b)[7]);
 }
};
using t_ind_0 = btree_set<const t_tuple*,t_comparator_0>;
t_ind_0 ind_0;
using iterator_0 = IterDerefWrapper<typename t_ind_0::iterator>;
using iterator = iterator_0;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext();
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5,RamDomain a6,RamDomain a7,RamDomain a8,RamDomain a9);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<iterator> lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper) const;
range<iterator_0> lowerUpperRange_1010100011(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<iterator_0> lowerUpperRange_1010100011(const t_tuple& lower, const t_tuple& upper) const;
range<iterator_0> lowerUpperRange_1111111111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<iterator_0> lowerUpperRange_1111111111(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiiiiiiiii__0_2_4_8_9_1_3_5_6_7__1010100011__1111111111 
namespace souffle::t_btree_iiiiiiiiii__0_2_4_8_9_1_3_5_6_7__1010100011__1111111111 {
using namespace souffle;
using iterator_0 = Type::iterator_0;
using iterator = Type::iterator;
using context = Type::context;
context Type::createContext() { return context(); }
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
const t_tuple* masterCopy = nullptr;
{
auto lease = insert_lock.acquire();
if (contains(t, h)) return false;
masterCopy = &dataTable.insert(t);
ind_0.insert(masterCopy, h.hints_0_lower);
}
return true;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[10];
std::copy(ramDomain, ramDomain + 10, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5,RamDomain a6,RamDomain a7,RamDomain a8,RamDomain a9) {
RamDomain data[10] = {a0,a1,a2,a3,a4,a5,a6,a7,a8,a9};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(&t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(&t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator_0> Type::lowerUpperRange_1010100011(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(&lower, &upper);
if (cmp > 0) {
    return range<iterator_0>(ind_0.end(), ind_0.end());
}
return range<iterator_0>(ind_0.lower_bound(&lower, h.hints_0_lower), ind_0.upper_bound(&upper, h.hints_0_upper));
}
range<iterator_0> Type::lowerUpperRange_1010100011(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1010100011(lower, upper, h);
}
range<iterator_0> Type::lowerUpperRange_1111111111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(&lower, &upper);
if (cmp == 0) {
    auto pos = ind_0.find(&lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return range<iterator_0>(pos, fin);
}
if (cmp > 0) {
    return range<iterator_0>(ind_0.end(), ind_0.end());
}
return range<iterator_0>(ind_0.lower_bound(&lower, h.hints_0_lower), ind_0.upper_bound(&upper, h.hints_0_upper));
}
range<iterator_0> Type::lowerUpperRange_1111111111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_1111111111(lower, upper, h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
std::vector<range<iterator>> res;
for (const auto& cur : ind_0.getChunks(400)) {
    res.push_back(make_range(derefIter(cur.begin()), derefIter(cur.end())));
}
return res;
}
void Type::purge() {
ind_0.clear();
dataTable.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 10 indirect b-tree index 0 lex-order [0,2,4,8,9,1,3,5,6,7]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiiiiiiiii__0_2_4_8_9_1_3_5_6_7__1010100011__1111111111 
namespace souffle::t_btree_iiiiii__0_1_2_3_4_5__111111 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 6;
using t_tuple = Tuple<RamDomain, 6>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :((ramBitCast<RamSigned>(a[5]) < ramBitCast<RamSigned>(b[5])) ? -1 : (ramBitCast<RamSigned>(a[5]) > ramBitCast<RamSigned>(b[5])) ? 1 :(0))))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))|| ((ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3])) && ((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]))|| ((ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4])) && ((ramBitCast<RamSigned>(a[5]) < ramBitCast<RamSigned>(b[5]))))))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]))&&(ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]))&&(ramBitCast<RamSigned>(a[5]) == ramBitCast<RamSigned>(b[5]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_000000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_000000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_111111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_111111(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiiiii__0_1_2_3_4_5__111111 
namespace souffle::t_btree_iiiiii__0_1_2_3_4_5__111111 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[6];
std::copy(ramDomain, ramDomain + 6, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5) {
RamDomain data[6] = {a0,a1,a2,a3,a4,a5};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_000000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_000000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_111111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_111111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111111(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 6 direct b-tree index 0 lex-order [0,1,2,3,4,5]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiiiii__0_1_2_3_4_5__111111 
namespace souffle::t_btree_iiiiii__1_4_5_0_2_3__111111__010011 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 6;
using t_tuple = Tuple<RamDomain, 6>;
struct t_comparator_0{
 int operator()(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1])) ? -1 : (ramBitCast<RamSigned>(a[1]) > ramBitCast<RamSigned>(b[1])) ? 1 :((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4])) ? -1 : (ramBitCast<RamSigned>(a[4]) > ramBitCast<RamSigned>(b[4])) ? 1 :((ramBitCast<RamSigned>(a[5]) < ramBitCast<RamSigned>(b[5])) ? -1 : (ramBitCast<RamSigned>(a[5]) > ramBitCast<RamSigned>(b[5])) ? 1 :((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0])) ? -1 : (ramBitCast<RamSigned>(a[0]) > ramBitCast<RamSigned>(b[0])) ? 1 :((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2])) ? -1 : (ramBitCast<RamSigned>(a[2]) > ramBitCast<RamSigned>(b[2])) ? 1 :((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3])) ? -1 : (ramBitCast<RamSigned>(a[3]) > ramBitCast<RamSigned>(b[3])) ? 1 :(0))))));
 }
bool less(const t_tuple& a, const t_tuple& b) const {
  return (ramBitCast<RamSigned>(a[1]) < ramBitCast<RamSigned>(b[1]))|| ((ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1])) && ((ramBitCast<RamSigned>(a[4]) < ramBitCast<RamSigned>(b[4]))|| ((ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4])) && ((ramBitCast<RamSigned>(a[5]) < ramBitCast<RamSigned>(b[5]))|| ((ramBitCast<RamSigned>(a[5]) == ramBitCast<RamSigned>(b[5])) && ((ramBitCast<RamSigned>(a[0]) < ramBitCast<RamSigned>(b[0]))|| ((ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0])) && ((ramBitCast<RamSigned>(a[2]) < ramBitCast<RamSigned>(b[2]))|| ((ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2])) && ((ramBitCast<RamSigned>(a[3]) < ramBitCast<RamSigned>(b[3]))))))))))));
 }
bool equal(const t_tuple& a, const t_tuple& b) const {
return (ramBitCast<RamSigned>(a[1]) == ramBitCast<RamSigned>(b[1]))&&(ramBitCast<RamSigned>(a[4]) == ramBitCast<RamSigned>(b[4]))&&(ramBitCast<RamSigned>(a[5]) == ramBitCast<RamSigned>(b[5]))&&(ramBitCast<RamSigned>(a[0]) == ramBitCast<RamSigned>(b[0]))&&(ramBitCast<RamSigned>(a[2]) == ramBitCast<RamSigned>(b[2]))&&(ramBitCast<RamSigned>(a[3]) == ramBitCast<RamSigned>(b[3]));
 }
};
using t_ind_0 = btree_set<t_tuple,t_comparator_0>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext() { return context(); }
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_000000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const;
range<iterator> lowerUpperRange_000000(const t_tuple& /* lower */, const t_tuple& /* upper */) const;
range<t_ind_0::iterator> lowerUpperRange_111111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_111111(const t_tuple& lower, const t_tuple& upper) const;
range<t_ind_0::iterator> lowerUpperRange_010011(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<t_ind_0::iterator> lowerUpperRange_010011(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiiiii__1_4_5_0_2_3__111111__010011 
namespace souffle::t_btree_iiiiii__1_4_5_0_2_3__111111__010011 {
using namespace souffle;
using t_ind_0 = Type::t_ind_0;
using iterator = Type::iterator;
using context = Type::context;
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0_lower)) {
return true;
} else return false;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[6];
std::copy(ramDomain, ramDomain + 6, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5) {
RamDomain data[6] = {a0,a1,a2,a3,a4,a5};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_000000(const t_tuple& /* lower */, const t_tuple& /* upper */, context& /* h */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_000000(const t_tuple& /* lower */, const t_tuple& /* upper */) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> Type::lowerUpperRange_111111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp == 0) {
    auto pos = ind_0.find(lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return make_range(pos, fin);
}
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_111111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111111(lower,upper,h);
}
range<t_ind_0::iterator> Type::lowerUpperRange_010011(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(lower, upper);
if (cmp > 0) {
    return make_range(ind_0.end(), ind_0.end());
}
return make_range(ind_0.lower_bound(lower, h.hints_0_lower), ind_0.upper_bound(upper, h.hints_0_upper));
}
range<t_ind_0::iterator> Type::lowerUpperRange_010011(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_010011(lower,upper,h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
return ind_0.getChunks(400);
}
void Type::purge() {
ind_0.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 6 direct b-tree index 0 lex-order [1,4,5,0,2,3]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiiiii__1_4_5_0_2_3__111111__010011 
namespace souffle::t_btree_iiiiiiiiiiii__0_1_2_3_4_5_6_7_8_9_10_11__111111111111 {
using namespace souffle;
struct Type {
static constexpr Relation::arity_type Arity = 12;
using t_tuple = Tuple<RamDomain, 12>;
Table<t_tuple> dataTable;
Lock insert_lock;
struct t_comparator_0{
 int operator()(const t_tuple *a, const t_tuple *b) const {
  return (ramBitCast<RamSigned>((*a)[0]) <ramBitCast<RamSigned> ((*b)[0])) ? -1 : ((ramBitCast<RamSigned>((*a)[0]) > ramBitCast<RamSigned>((*b)[0])) ? 1 :((ramBitCast<RamSigned>((*a)[1]) <ramBitCast<RamSigned> ((*b)[1])) ? -1 : ((ramBitCast<RamSigned>((*a)[1]) > ramBitCast<RamSigned>((*b)[1])) ? 1 :((ramBitCast<RamSigned>((*a)[2]) <ramBitCast<RamSigned> ((*b)[2])) ? -1 : ((ramBitCast<RamSigned>((*a)[2]) > ramBitCast<RamSigned>((*b)[2])) ? 1 :((ramBitCast<RamSigned>((*a)[3]) <ramBitCast<RamSigned> ((*b)[3])) ? -1 : ((ramBitCast<RamSigned>((*a)[3]) > ramBitCast<RamSigned>((*b)[3])) ? 1 :((ramBitCast<RamSigned>((*a)[4]) <ramBitCast<RamSigned> ((*b)[4])) ? -1 : ((ramBitCast<RamSigned>((*a)[4]) > ramBitCast<RamSigned>((*b)[4])) ? 1 :((ramBitCast<RamSigned>((*a)[5]) <ramBitCast<RamSigned> ((*b)[5])) ? -1 : ((ramBitCast<RamSigned>((*a)[5]) > ramBitCast<RamSigned>((*b)[5])) ? 1 :((ramBitCast<RamSigned>((*a)[6]) <ramBitCast<RamSigned> ((*b)[6])) ? -1 : ((ramBitCast<RamSigned>((*a)[6]) > ramBitCast<RamSigned>((*b)[6])) ? 1 :((ramBitCast<RamSigned>((*a)[7]) <ramBitCast<RamSigned> ((*b)[7])) ? -1 : ((ramBitCast<RamSigned>((*a)[7]) > ramBitCast<RamSigned>((*b)[7])) ? 1 :((ramBitCast<RamSigned>((*a)[8]) <ramBitCast<RamSigned> ((*b)[8])) ? -1 : ((ramBitCast<RamSigned>((*a)[8]) > ramBitCast<RamSigned>((*b)[8])) ? 1 :((ramBitCast<RamSigned>((*a)[9]) <ramBitCast<RamSigned> ((*b)[9])) ? -1 : ((ramBitCast<RamSigned>((*a)[9]) > ramBitCast<RamSigned>((*b)[9])) ? 1 :((ramBitCast<RamSigned>((*a)[10]) <ramBitCast<RamSigned> ((*b)[10])) ? -1 : ((ramBitCast<RamSigned>((*a)[10]) > ramBitCast<RamSigned>((*b)[10])) ? 1 :((ramBitCast<RamSigned>((*a)[11]) <ramBitCast<RamSigned> ((*b)[11])) ? -1 : ((ramBitCast<RamSigned>((*a)[11]) > ramBitCast<RamSigned>((*b)[11])) ? 1 :(0))))))))))))))))))))))));
 }
bool less(const t_tuple *a, const t_tuple *b) const {
  return ramBitCast<RamSigned> ((*a)[0]) < ramBitCast<RamSigned>((*b)[0])|| ((ramBitCast<RamSigned>((*a)[0]) == ramBitCast<RamSigned>((*b)[0]) && (ramBitCast<RamSigned> ((*a)[1]) < ramBitCast<RamSigned>((*b)[1])|| ((ramBitCast<RamSigned>((*a)[1]) == ramBitCast<RamSigned>((*b)[1]) && (ramBitCast<RamSigned> ((*a)[2]) < ramBitCast<RamSigned>((*b)[2])|| ((ramBitCast<RamSigned>((*a)[2]) == ramBitCast<RamSigned>((*b)[2]) && (ramBitCast<RamSigned> ((*a)[3]) < ramBitCast<RamSigned>((*b)[3])|| ((ramBitCast<RamSigned>((*a)[3]) == ramBitCast<RamSigned>((*b)[3]) && (ramBitCast<RamSigned> ((*a)[4]) < ramBitCast<RamSigned>((*b)[4])|| ((ramBitCast<RamSigned>((*a)[4]) == ramBitCast<RamSigned>((*b)[4]) && (ramBitCast<RamSigned> ((*a)[5]) < ramBitCast<RamSigned>((*b)[5])|| ((ramBitCast<RamSigned>((*a)[5]) == ramBitCast<RamSigned>((*b)[5]) && (ramBitCast<RamSigned> ((*a)[6]) < ramBitCast<RamSigned>((*b)[6])|| ((ramBitCast<RamSigned>((*a)[6]) == ramBitCast<RamSigned>((*b)[6]) && (ramBitCast<RamSigned> ((*a)[7]) < ramBitCast<RamSigned>((*b)[7])|| ((ramBitCast<RamSigned>((*a)[7]) == ramBitCast<RamSigned>((*b)[7]) && (ramBitCast<RamSigned> ((*a)[8]) < ramBitCast<RamSigned>((*b)[8])|| ((ramBitCast<RamSigned>((*a)[8]) == ramBitCast<RamSigned>((*b)[8]) && (ramBitCast<RamSigned> ((*a)[9]) < ramBitCast<RamSigned>((*b)[9])|| ((ramBitCast<RamSigned>((*a)[9]) == ramBitCast<RamSigned>((*b)[9]) && (ramBitCast<RamSigned> ((*a)[10]) < ramBitCast<RamSigned>((*b)[10])|| ((ramBitCast<RamSigned>((*a)[10]) == ramBitCast<RamSigned>((*b)[10]) && (ramBitCast<RamSigned> ((*a)[11]) < ramBitCast<RamSigned>((*b)[11]))))))))))))))))))))))))))))))))));
 }
bool equal(const t_tuple *a, const t_tuple *b) const {
return ramBitCast<RamSigned>((*a)[0]) == ramBitCast<RamSigned>((*b)[0])&&ramBitCast<RamSigned>((*a)[1]) == ramBitCast<RamSigned>((*b)[1])&&ramBitCast<RamSigned>((*a)[2]) == ramBitCast<RamSigned>((*b)[2])&&ramBitCast<RamSigned>((*a)[3]) == ramBitCast<RamSigned>((*b)[3])&&ramBitCast<RamSigned>((*a)[4]) == ramBitCast<RamSigned>((*b)[4])&&ramBitCast<RamSigned>((*a)[5]) == ramBitCast<RamSigned>((*b)[5])&&ramBitCast<RamSigned>((*a)[6]) == ramBitCast<RamSigned>((*b)[6])&&ramBitCast<RamSigned>((*a)[7]) == ramBitCast<RamSigned>((*b)[7])&&ramBitCast<RamSigned>((*a)[8]) == ramBitCast<RamSigned>((*b)[8])&&ramBitCast<RamSigned>((*a)[9]) == ramBitCast<RamSigned>((*b)[9])&&ramBitCast<RamSigned>((*a)[10]) == ramBitCast<RamSigned>((*b)[10])&&ramBitCast<RamSigned>((*a)[11]) == ramBitCast<RamSigned>((*b)[11]);
 }
};
using t_ind_0 = btree_set<const t_tuple*,t_comparator_0>;
t_ind_0 ind_0;
using iterator_0 = IterDerefWrapper<typename t_ind_0::iterator>;
using iterator = iterator_0;
struct context {
t_ind_0::operation_hints hints_0_lower;
t_ind_0::operation_hints hints_0_upper;
};
context createContext();
bool insert(const t_tuple& t);
bool insert(const t_tuple& t, context& h);
bool insert(const RamDomain* ramDomain);
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5,RamDomain a6,RamDomain a7,RamDomain a8,RamDomain a9,RamDomain a10,RamDomain a11);
bool contains(const t_tuple& t, context& h) const;
bool contains(const t_tuple& t) const;
std::size_t size() const;
iterator find(const t_tuple& t, context& h) const;
iterator find(const t_tuple& t) const;
range<iterator> lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<iterator> lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper) const;
range<iterator_0> lowerUpperRange_111111111111(const t_tuple& lower, const t_tuple& upper, context& h) const;
range<iterator_0> lowerUpperRange_111111111111(const t_tuple& lower, const t_tuple& upper) const;
bool empty() const;
std::vector<range<iterator>> partition() const;
void purge();
iterator begin() const;
iterator end() const;
void printStatistics(std::ostream& o) const;
};
} // namespace souffle::t_btree_iiiiiiiiiiii__0_1_2_3_4_5_6_7_8_9_10_11__111111111111 
namespace souffle::t_btree_iiiiiiiiiiii__0_1_2_3_4_5_6_7_8_9_10_11__111111111111 {
using namespace souffle;
using iterator_0 = Type::iterator_0;
using iterator = Type::iterator;
using context = Type::context;
context Type::createContext() { return context(); }
bool Type::insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool Type::insert(const t_tuple& t, context& h) {
const t_tuple* masterCopy = nullptr;
{
auto lease = insert_lock.acquire();
if (contains(t, h)) return false;
masterCopy = &dataTable.insert(t);
ind_0.insert(masterCopy, h.hints_0_lower);
}
return true;
}
bool Type::insert(const RamDomain* ramDomain) {
RamDomain data[12];
std::copy(ramDomain, ramDomain + 12, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool Type::insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5,RamDomain a6,RamDomain a7,RamDomain a8,RamDomain a9,RamDomain a10,RamDomain a11) {
RamDomain data[12] = {a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11};
return insert(data);
}
bool Type::contains(const t_tuple& t, context& h) const {
return ind_0.contains(&t, h.hints_0_lower);
}
bool Type::contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t Type::size() const {
return ind_0.size();
}
iterator Type::find(const t_tuple& t, context& h) const {
return ind_0.find(&t, h.hints_0_lower);
}
iterator Type::find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> Type::lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> Type::lowerUpperRange_0(const t_tuple& lower, const t_tuple& upper) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator_0> Type::lowerUpperRange_111111111111(const t_tuple& lower, const t_tuple& upper, context& h) const {
t_comparator_0 comparator;
int cmp = comparator(&lower, &upper);
if (cmp == 0) {
    auto pos = ind_0.find(&lower, h.hints_0_lower);
    auto fin = ind_0.end();
    if (pos != fin) {fin = pos; ++fin;}
    return range<iterator_0>(pos, fin);
}
if (cmp > 0) {
    return range<iterator_0>(ind_0.end(), ind_0.end());
}
return range<iterator_0>(ind_0.lower_bound(&lower, h.hints_0_lower), ind_0.upper_bound(&upper, h.hints_0_upper));
}
range<iterator_0> Type::lowerUpperRange_111111111111(const t_tuple& lower, const t_tuple& upper) const {
context h;
return lowerUpperRange_111111111111(lower, upper, h);
}
bool Type::empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> Type::partition() const {
std::vector<range<iterator>> res;
for (const auto& cur : ind_0.getChunks(400)) {
    res.push_back(make_range(derefIter(cur.begin()), derefIter(cur.end())));
}
return res;
}
void Type::purge() {
ind_0.clear();
dataTable.clear();
}
iterator Type::begin() const {
return ind_0.begin();
}
iterator Type::end() const {
return ind_0.end();
}
void Type::printStatistics(std::ostream& o) const {
o << " arity 12 indirect b-tree index 0 lex-order [0,1,2,3,4,5,6,7,8,9,10,11]\n";
ind_0.printStats(o);
}
} // namespace souffle::t_btree_iiiiiiiiiiii__0_1_2_3_4_5_6_7_8_9_10_11__111111111111 
namespace  souffle {
using namespace souffle;
class Stratum_disconnected0_afed6794479dbd87 {
public:
 Stratum_disconnected0_afed6794479dbd87(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_nullaries& rel_disconnected0_b2add3842fe11dfe,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_nullaries* rel_disconnected0_b2add3842fe11dfe;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_TrainingDataWithModel_bf0078ce702b39b8;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_disconnected0_afed6794479dbd87::Stratum_disconnected0_afed6794479dbd87(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_nullaries& rel_disconnected0_b2add3842fe11dfe,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_disconnected0_b2add3842fe11dfe(&rel_disconnected0_b2add3842fe11dfe),
rel_TrainingDataWithModel_bf0078ce702b39b8(&rel_TrainingDataWithModel_bf0078ce702b39b8){
}

void Stratum_disconnected0_afed6794479dbd87::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(+disconnected0() :- 
   TrainingDataWithModel(_,_,_,_,_).
in file main.dl [1401:1-1405:13])_");
if(rel_disconnected0_b2add3842fe11dfe->empty() && !(rel_TrainingDataWithModel_bf0078ce702b39b8->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_disconnected0_b2add3842fe11dfe_op_ctxt,rel_disconnected0_b2add3842fe11dfe->createContext());
Tuple<RamDomain,0> tuple{{}};
rel_disconnected0_b2add3842fe11dfe->insert(tuple,READ_OP_CONTEXT(rel_disconnected0_b2add3842fe11dfe_op_ctxt));
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_disconnected1_4b507f5bbea27b84 {
public:
 Stratum_disconnected1_4b507f5bbea27b84(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_nullaries& rel_disconnected1_a1b44fde1b4da294,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_ValDataWithModel_ef5cc7d0fb594fa5,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_nullaries* rel_disconnected1_a1b44fde1b4da294;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel_ValDataWithModel_ef5cc7d0fb594fa5;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_ValOrTestDataWithModel_2810ba231c0c185a;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_disconnected1_4b507f5bbea27b84::Stratum_disconnected1_4b507f5bbea27b84(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_nullaries& rel_disconnected1_a1b44fde1b4da294,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_ValDataWithModel_ef5cc7d0fb594fa5,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_disconnected1_a1b44fde1b4da294(&rel_disconnected1_a1b44fde1b4da294),
rel_ValDataWithModel_ef5cc7d0fb594fa5(&rel_ValDataWithModel_ef5cc7d0fb594fa5),
rel_ValOrTestDataWithModel_2810ba231c0c185a(&rel_ValOrTestDataWithModel_2810ba231c0c185a){
}

void Stratum_disconnected1_4b507f5bbea27b84::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(+disconnected1() :- 
   ValOrTestDataWithModel(model,test,invo,meth,ctx),
   ValDataWithModel(model,test,invo,meth,ctx).
in file main.dl [1406:1-1409:52])_");
if(!(rel_ValDataWithModel_ef5cc7d0fb594fa5->empty()) && rel_disconnected1_a1b44fde1b4da294->empty() && !(rel_ValOrTestDataWithModel_2810ba231c0c185a->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_disconnected1_a1b44fde1b4da294_op_ctxt,rel_disconnected1_a1b44fde1b4da294->createContext());
CREATE_OP_CONTEXT(rel_ValDataWithModel_ef5cc7d0fb594fa5_op_ctxt,rel_ValDataWithModel_ef5cc7d0fb594fa5->createContext());
CREATE_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt,rel_ValOrTestDataWithModel_2810ba231c0c185a->createContext());
for(const auto& env0 : *rel_ValOrTestDataWithModel_2810ba231c0c185a) {
if( !(rel_disconnected1_a1b44fde1b4da294->empty())) break;
if( rel_ValDataWithModel_ef5cc7d0fb594fa5->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_ValDataWithModel_ef5cc7d0fb594fa5_op_ctxt))) {
Tuple<RamDomain,0> tuple{{}};
rel_disconnected1_a1b44fde1b4da294->insert(tuple,READ_OP_CONTEXT(rel_disconnected1_a1b44fde1b4da294_op_ctxt));
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_ActualKeyParam_653f40078a463055 {
public:
 Stratum_ActualKeyParam_653f40078a463055(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualKeyParam_c37ca7251a780d4f);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__1__0_1_2__010__100__110__111::Type* rel_ActualKeyParam_c37ca7251a780d4f;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_ActualKeyParam_653f40078a463055::Stratum_ActualKeyParam_653f40078a463055(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualKeyParam_c37ca7251a780d4f):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_ActualKeyParam_c37ca7251a780d4f(&rel_ActualKeyParam_c37ca7251a780d4f){
}

void Stratum_ActualKeyParam_653f40078a463055::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","keyword\tinvo\tvar"},{"auxArity","0"},{"fact-dir","."},{"name","ActualKeyParam"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"keyword\", \"invo\", \"var\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Var\", \"s:Invocation\", \"s:Var\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_ActualKeyParam_c37ca7251a780d4f);
} catch (std::exception& e) {std::cerr << "Error loading ActualKeyParam data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_ActualParam_dd5fa59b61f9d226 {
public:
 Stratum_ActualParam_dd5fa59b61f9d226(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualKeyParam_c37ca7251a780d4f,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualParam_b7a735170493e717,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iii__0_1_2__111::Type& rel_MethodIndexToKey_1e172395196e36b8);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__1__0_1_2__010__100__110__111::Type* rel_ActualKeyParam_c37ca7251a780d4f;
t_btree_iii__1__0_1_2__010__100__110__111::Type* rel_ActualParam_b7a735170493e717;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_Invoke_d61c77705bff35b0;
t_btree_iii__0_1_2__111::Type* rel_MethodIndexToKey_1e172395196e36b8;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_ActualParam_dd5fa59b61f9d226::Stratum_ActualParam_dd5fa59b61f9d226(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualKeyParam_c37ca7251a780d4f,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualParam_b7a735170493e717,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iii__0_1_2__111::Type& rel_MethodIndexToKey_1e172395196e36b8):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_ActualKeyParam_c37ca7251a780d4f(&rel_ActualKeyParam_c37ca7251a780d4f),
rel_ActualParam_b7a735170493e717(&rel_ActualParam_b7a735170493e717),
rel_Invoke_d61c77705bff35b0(&rel_Invoke_d61c77705bff35b0),
rel_MethodIndexToKey_1e172395196e36b8(&rel_MethodIndexToKey_1e172395196e36b8){
}

void Stratum_ActualParam_dd5fa59b61f9d226::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","index\tinvo\tvar"},{"auxArity","0"},{"fact-dir","."},{"name","ActualParam"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"index\", \"invo\", \"var\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"i:number\", \"s:Invocation\", \"s:Var\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_ActualParam_b7a735170493e717);
} catch (std::exception& e) {std::cerr << "Error loading ActualParam data: " << e.what() << '\n';
exit(1);
}
}
signalHandler->setMsg(R"_(ActualParam(fromIdx,invo,from) :- 
   MethodIndexToKey(fromIdx,keyword,meth),
   ActualKeyParam(keyword,invo,from),
   Invoke(invo,meth,_).
in file main.dl [169:1-172:27])_");
if(!(rel_ActualKeyParam_c37ca7251a780d4f->empty()) && !(rel_Invoke_d61c77705bff35b0->empty()) && !(rel_MethodIndexToKey_1e172395196e36b8->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualKeyParam_c37ca7251a780d4f_op_ctxt,rel_ActualKeyParam_c37ca7251a780d4f->createContext());
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt,rel_MethodIndexToKey_1e172395196e36b8->createContext());
for(const auto& env0 : *rel_MethodIndexToKey_1e172395196e36b8) {
auto range = rel_ActualKeyParam_c37ca7251a780d4f->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualKeyParam_c37ca7251a780d4f_op_ctxt));
for(const auto& env1 : range) {
if( !rel_Invoke_d61c77705bff35b0->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt)).empty()) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env1[2])}};
rel_ActualParam_b7a735170493e717->insert(tuple,READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
}
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_ActualReturn_518b4ca6f72783ea {
public:
 Stratum_ActualReturn_518b4ca6f72783ea(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1_0_2__010__110__111::Type& rel_ActualReturn_8bc9db09e057aa22);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__1_0_2__010__110__111::Type* rel_ActualReturn_8bc9db09e057aa22;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_ActualReturn_518b4ca6f72783ea::Stratum_ActualReturn_518b4ca6f72783ea(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1_0_2__010__110__111::Type& rel_ActualReturn_8bc9db09e057aa22):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_ActualReturn_8bc9db09e057aa22(&rel_ActualReturn_8bc9db09e057aa22){
}

void Stratum_ActualReturn_518b4ca6f72783ea::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","index\tinvo\tvar"},{"auxArity","0"},{"fact-dir","."},{"name","ActualReturn"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"index\", \"invo\", \"var\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"i:number\", \"s:Invocation\", \"s:Var\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_ActualReturn_8bc9db09e057aa22);
} catch (std::exception& e) {std::cerr << "Error loading ActualReturn data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_Alias_0d78fab14e1b06fc {
public:
 Stratum_Alias_0d78fab14e1b06fc(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__2_0_1_3__0_1__1111__1100__0010::Type& rel_Alias_22e56a91218d2f0d,t_btree_iiii__2_3_0_1__0_1__1000__1111__1100__0011::Type& rel_VarPointsTo_c1a9f897b9f324f0);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__2_0_1_3__0_1__1111__1100__0010::Type* rel_Alias_22e56a91218d2f0d;
t_btree_iiii__2_3_0_1__0_1__1000__1111__1100__0011::Type* rel_VarPointsTo_c1a9f897b9f324f0;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_Alias_0d78fab14e1b06fc::Stratum_Alias_0d78fab14e1b06fc(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__2_0_1_3__0_1__1111__1100__0010::Type& rel_Alias_22e56a91218d2f0d,t_btree_iiii__2_3_0_1__0_1__1000__1111__1100__0011::Type& rel_VarPointsTo_c1a9f897b9f324f0):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_Alias_22e56a91218d2f0d(&rel_Alias_22e56a91218d2f0d),
rel_VarPointsTo_c1a9f897b9f324f0(&rel_VarPointsTo_c1a9f897b9f324f0){
}

void Stratum_Alias_0d78fab14e1b06fc::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(Alias(from,fromCtx,to,toCtx) :- 
   VarPointsTo(to,toCtx,value,hctx),
   VarPointsTo(from,fromCtx,value,hctx).
in file main.dl [879:1-882:45])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Alias_22e56a91218d2f0d_op_ctxt,rel_Alias_22e56a91218d2f0d->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_VarPointsTo_c1a9f897b9f324f0) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_0011(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast(env0[3])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[0]),ramBitCast(env1[1]),ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_Alias_22e56a91218d2f0d->insert(tuple,READ_OP_CONTEXT(rel_Alias_22e56a91218d2f0d_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\ttoCtx\tfrom\tfromCtx"},{"auxArity","0"},{"name","Alias"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"to\", \"toCtx\", \"from\", \"fromCtx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_Alias_22e56a91218d2f0d);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_Alloc_c73bc5abd6ad93a6 {
public:
 Stratum_Alloc_c73bc5abd6ad93a6(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__0_1_2__111::Type& rel_Alloc_31bbfa07060a4241);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__0_1_2__111::Type* rel_Alloc_31bbfa07060a4241;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_Alloc_c73bc5abd6ad93a6::Stratum_Alloc_c73bc5abd6ad93a6(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__0_1_2__111::Type& rel_Alloc_31bbfa07060a4241):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_Alloc_31bbfa07060a4241(&rel_Alloc_31bbfa07060a4241){
}

void Stratum_Alloc_c73bc5abd6ad93a6::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","var\tvalue\tinMeth"},{"auxArity","0"},{"fact-dir","."},{"name","Alloc"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"var\", \"value\", \"inMeth\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Var\", \"s:Value\", \"s:Method\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_Alloc_31bbfa07060a4241);
} catch (std::exception& e) {std::cerr << "Error loading Alloc data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_ArityMatch_cb20319fa5f091ce {
public:
 Stratum_ArityMatch_cb20319fa5f091ce(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1_0_2__010__110__111::Type& rel_ActualReturn_8bc9db09e057aa22,t_btree_iiii__0_1_2_3__1111::Type& rel_ArityMatch_1f1fc51deec0d387,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_i__0__1::Type& rel_FilteredMethod_3007b0a4b117f645,t_btree_iii__1_0_2__010__111::Type& rel_FormalReturn_62e4844334f73406);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__1_0_2__010__110__111::Type* rel_ActualReturn_8bc9db09e057aa22;
t_btree_iiii__0_1_2_3__1111::Type* rel_ArityMatch_1f1fc51deec0d387;
t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type* rel_CallGraphEdge_333c9d69fed5eee7;
t_btree_i__0__1::Type* rel_FilteredMethod_3007b0a4b117f645;
t_btree_iii__1_0_2__010__111::Type* rel_FormalReturn_62e4844334f73406;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_ArityMatch_cb20319fa5f091ce::Stratum_ArityMatch_cb20319fa5f091ce(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1_0_2__010__110__111::Type& rel_ActualReturn_8bc9db09e057aa22,t_btree_iiii__0_1_2_3__1111::Type& rel_ArityMatch_1f1fc51deec0d387,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_i__0__1::Type& rel_FilteredMethod_3007b0a4b117f645,t_btree_iii__1_0_2__010__111::Type& rel_FormalReturn_62e4844334f73406):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_ActualReturn_8bc9db09e057aa22(&rel_ActualReturn_8bc9db09e057aa22),
rel_ArityMatch_1f1fc51deec0d387(&rel_ArityMatch_1f1fc51deec0d387),
rel_CallGraphEdge_333c9d69fed5eee7(&rel_CallGraphEdge_333c9d69fed5eee7),
rel_FilteredMethod_3007b0a4b117f645(&rel_FilteredMethod_3007b0a4b117f645),
rel_FormalReturn_62e4844334f73406(&rel_FormalReturn_62e4844334f73406){
}

void Stratum_ArityMatch_cb20319fa5f091ce::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(ArityMatch(invo,callerCtx,meth,calleeCtx) :- 
   CallGraphEdge(invo,callerCtx,meth,calleeCtx),
   !FilteredMethod(meth),
   @generator_0 = count : { FormalReturn(index0,meth,from) },
   @generator_0 = count : { ActualReturn(index,invo,to) }.
in file main.dl [830:1-835:13])_");
if(!(rel_CallGraphEdge_333c9d69fed5eee7->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt,rel_ActualReturn_8bc9db09e057aa22->createContext());
CREATE_OP_CONTEXT(rel_ArityMatch_1f1fc51deec0d387_op_ctxt,rel_ArityMatch_1f1fc51deec0d387->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_FilteredMethod_3007b0a4b117f645_op_ctxt,rel_FilteredMethod_3007b0a4b117f645->createContext());
CREATE_OP_CONTEXT(rel_FormalReturn_62e4844334f73406_op_ctxt,rel_FormalReturn_62e4844334f73406->createContext());
for(const auto& env0 : *rel_CallGraphEdge_333c9d69fed5eee7) {
if( !(rel_FilteredMethod_3007b0a4b117f645->contains(Tuple<RamDomain,1>{{ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_FilteredMethod_3007b0a4b117f645_op_ctxt)))) {
Tuple<RamDomain,1> env1;
bool shouldRunNested = true;
RamSigned res0 = 0;
auto range = rel_FormalReturn_62e4844334f73406->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FormalReturn_62e4844334f73406_op_ctxt));
for(const auto& env1 : range) {
if( true) {
shouldRunNested = true;
++res0
;}
}
env1[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(env1[0]) == ramBitCast<RamDomain>(env1[0]))) {
Tuple<RamDomain,1> env2;
bool shouldRunNested = true;
RamSigned res0 = 0;
auto range = rel_ActualReturn_8bc9db09e057aa22->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt));
for(const auto& env2 : range) {
if( true) {
shouldRunNested = true;
++res0
;}
}
env2[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(env1[0]) == ramBitCast<RamDomain>(env2[0]))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_ArityMatch_1f1fc51deec0d387->insert(tuple,READ_OP_CONTEXT(rel_ArityMatch_1f1fc51deec0d387_op_ctxt));
}
}
}
}
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_AssignBinOp_9902f90b650f5df1 {
public:
 Stratum_AssignBinOp_9902f90b650f5df1(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_AssignBinOp_ac278042ec33e40a);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__0_1_2_3__1111::Type* rel_AssignBinOp_ac278042ec33e40a;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_AssignBinOp_9902f90b650f5df1::Stratum_AssignBinOp_9902f90b650f5df1(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_AssignBinOp_ac278042ec33e40a):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_AssignBinOp_ac278042ec33e40a(&rel_AssignBinOp_ac278042ec33e40a){
}

void Stratum_AssignBinOp_9902f90b650f5df1::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\tleft\top\tright"},{"auxArity","0"},{"fact-dir","."},{"name","AssignBinOp"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"to\", \"left\", \"op\", \"right\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Var\", \"s:Var\", \"s:symbol\", \"s:Var\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_AssignBinOp_ac278042ec33e40a);
} catch (std::exception& e) {std::cerr << "Error loading AssignBinOp data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_AssignBoolConstant_3c3187c23ef18091 {
public:
 Stratum_AssignBoolConstant_3c3187c23ef18091(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__0_1__11::Type& rel_AssignBoolConstant_153553f1352c29c5);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_ii__0_1__11::Type* rel_AssignBoolConstant_153553f1352c29c5;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_AssignBoolConstant_3c3187c23ef18091::Stratum_AssignBoolConstant_3c3187c23ef18091(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__0_1__11::Type& rel_AssignBoolConstant_153553f1352c29c5):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_AssignBoolConstant_153553f1352c29c5(&rel_AssignBoolConstant_153553f1352c29c5){
}

void Stratum_AssignBoolConstant_3c3187c23ef18091::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\tconstant"},{"auxArity","0"},{"fact-dir","."},{"name","AssignBoolConstant"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"to\", \"constant\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Var\", \"s:symbol\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_AssignBoolConstant_153553f1352c29c5);
} catch (std::exception& e) {std::cerr << "Error loading AssignBoolConstant data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_AssignFloatConstant_6d7795f85ab598e6 {
public:
 Stratum_AssignFloatConstant_6d7795f85ab598e6(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__0_1__11::Type& rel_AssignFloatConstant_2958d76b03506f1d);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_ii__0_1__11::Type* rel_AssignFloatConstant_2958d76b03506f1d;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_AssignFloatConstant_6d7795f85ab598e6::Stratum_AssignFloatConstant_6d7795f85ab598e6(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__0_1__11::Type& rel_AssignFloatConstant_2958d76b03506f1d):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_AssignFloatConstant_2958d76b03506f1d(&rel_AssignFloatConstant_2958d76b03506f1d){
}

void Stratum_AssignFloatConstant_6d7795f85ab598e6::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\tconstant"},{"auxArity","0"},{"fact-dir","."},{"name","AssignFloatConstant"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"to\", \"constant\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Var\", \"s:symbol\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_AssignFloatConstant_2958d76b03506f1d);
} catch (std::exception& e) {std::cerr << "Error loading AssignFloatConstant data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_AssignGlobal_9f605e46c9e93954 {
public:
 Stratum_AssignGlobal_9f605e46c9e93954(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__0_1__11::Type& rel_AssignGlobal_f60b14713e1f1ab7);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_ii__0_1__11::Type* rel_AssignGlobal_f60b14713e1f1ab7;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_AssignGlobal_9f605e46c9e93954::Stratum_AssignGlobal_9f605e46c9e93954(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__0_1__11::Type& rel_AssignGlobal_f60b14713e1f1ab7):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_AssignGlobal_f60b14713e1f1ab7(&rel_AssignGlobal_f60b14713e1f1ab7){
}

void Stratum_AssignGlobal_9f605e46c9e93954::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\tfrom"},{"auxArity","0"},{"fact-dir","."},{"name","AssignGlobal"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"to\", \"from\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Var\", \"s:Var\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_AssignGlobal_f60b14713e1f1ab7);
} catch (std::exception& e) {std::cerr << "Error loading AssignGlobal data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_AssignIntConstant_c137dc152e68c227 {
public:
 Stratum_AssignIntConstant_c137dc152e68c227(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__0_1__11::Type& rel_AssignIntConstant_91e14648ac326411);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_ii__0_1__11::Type* rel_AssignIntConstant_91e14648ac326411;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_AssignIntConstant_c137dc152e68c227::Stratum_AssignIntConstant_c137dc152e68c227(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__0_1__11::Type& rel_AssignIntConstant_91e14648ac326411):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_AssignIntConstant_91e14648ac326411(&rel_AssignIntConstant_91e14648ac326411){
}

void Stratum_AssignIntConstant_c137dc152e68c227::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\tconstant"},{"auxArity","0"},{"fact-dir","."},{"name","AssignIntConstant"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"to\", \"constant\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Var\", \"s:symbol\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_AssignIntConstant_91e14648ac326411);
} catch (std::exception& e) {std::cerr << "Error loading AssignIntConstant data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_AssignStrConstant_0923866f894f78fc {
public:
 Stratum_AssignStrConstant_0923866f894f78fc(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__0_1__11::Type& rel_AssignStrConstant_2b622c7da0720ea5);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_ii__0_1__11::Type* rel_AssignStrConstant_2b622c7da0720ea5;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_AssignStrConstant_0923866f894f78fc::Stratum_AssignStrConstant_0923866f894f78fc(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__0_1__11::Type& rel_AssignStrConstant_2b622c7da0720ea5):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_AssignStrConstant_2b622c7da0720ea5(&rel_AssignStrConstant_2b622c7da0720ea5){
}

void Stratum_AssignStrConstant_0923866f894f78fc::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\tconstant"},{"auxArity","0"},{"fact-dir","."},{"name","AssignStrConstant"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"to\", \"constant\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Var\", \"s:symbol\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_AssignStrConstant_2b622c7da0720ea5);
} catch (std::exception& e) {std::cerr << "Error loading AssignStrConstant data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_AssignVar_5d1cb4968099554d {
public:
 Stratum_AssignVar_5d1cb4968099554d(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__0_1__11::Type& rel_AssignVar_b173aa4bb6352b3a);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_ii__0_1__11::Type* rel_AssignVar_b173aa4bb6352b3a;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_AssignVar_5d1cb4968099554d::Stratum_AssignVar_5d1cb4968099554d(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__0_1__11::Type& rel_AssignVar_b173aa4bb6352b3a):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_AssignVar_b173aa4bb6352b3a(&rel_AssignVar_b173aa4bb6352b3a){
}

void Stratum_AssignVar_5d1cb4968099554d::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\tfrom"},{"auxArity","0"},{"fact-dir","."},{"name","AssignVar"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"to\", \"from\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Var\", \"s:Var\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_AssignVar_b173aa4bb6352b3a);
} catch (std::exception& e) {std::cerr << "Error loading AssignVar data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_CallGraphEdge_c7d4da178885070a {
public:
 Stratum_CallGraphEdge_c7d4da178885070a(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_ii__0_1__11__10::Type& rel_Reachable_60cce6ab70e369f7);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type* rel_CallGraphEdge_333c9d69fed5eee7;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_Invoke_d61c77705bff35b0;
t_btree_ii__0_1__11__10::Type* rel_Reachable_60cce6ab70e369f7;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_CallGraphEdge_c7d4da178885070a::Stratum_CallGraphEdge_c7d4da178885070a(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_ii__0_1__11__10::Type& rel_Reachable_60cce6ab70e369f7):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_CallGraphEdge_333c9d69fed5eee7(&rel_CallGraphEdge_333c9d69fed5eee7),
rel_Invoke_d61c77705bff35b0(&rel_Invoke_d61c77705bff35b0),
rel_Reachable_60cce6ab70e369f7(&rel_Reachable_60cce6ab70e369f7){
}

void Stratum_CallGraphEdge_c7d4da178885070a::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(CallGraphEdge(invo,[invo1,invo2],toMeth,[invo2,invo]) :- 
   Invoke(invo,toMeth,inMeth),
   Reachable(inMeth,[invo1,invo2]).
in file main.dl [661:1-666:31])_");
if(!(rel_Invoke_d61c77705bff35b0->empty()) && !(rel_Reachable_60cce6ab70e369f7->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_Reachable_60cce6ab70e369f7_op_ctxt,rel_Reachable_60cce6ab70e369f7->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
auto range = rel_Reachable_60cce6ab70e369f7->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_Reachable_60cce6ab70e369f7_op_ctxt));
for(const auto& env1 : range) {
RamDomain const ref = env1[1];
if (ref == 0) continue;
const RamDomain *env2 = recordTable.unpack(ref,2);
{
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(env2[0])),ramBitCast(ramBitCast(env2[1]))}}
)),ramBitCast(env0[1]),ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(env2[1])),ramBitCast(ramBitCast(env0[0]))}}
))}};
rel_CallGraphEdge_333c9d69fed5eee7->insert(tuple,READ_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt));
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","invo\tcallerCtx\tmeth\tcalleeCtx"},{"auxArity","0"},{"name","CallGraphEdge"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"invo\", \"callerCtx\", \"meth\", \"calleeCtx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Invocation\", \"r:Context\", \"s:Method\", \"r:Context\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_CallGraphEdge_333c9d69fed5eee7);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_ConstantValue_1f449464e1f8bff8 {
public:
 Stratum_ConstantValue_1f449464e1f8bff8(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__0_1__11::Type& rel_AssignBoolConstant_153553f1352c29c5,t_btree_ii__0_1__11::Type& rel_AssignFloatConstant_2958d76b03506f1d,t_btree_ii__0_1__11::Type& rel_AssignIntConstant_91e14648ac326411,t_btree_ii__0_1__11::Type& rel_AssignStrConstant_2b622c7da0720ea5,t_btree_ii__1_0__11__01::Type& rel_ConstantValue_bf370ded014c6df6);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_ii__0_1__11::Type* rel_AssignBoolConstant_153553f1352c29c5;
t_btree_ii__0_1__11::Type* rel_AssignFloatConstant_2958d76b03506f1d;
t_btree_ii__0_1__11::Type* rel_AssignIntConstant_91e14648ac326411;
t_btree_ii__0_1__11::Type* rel_AssignStrConstant_2b622c7da0720ea5;
t_btree_ii__1_0__11__01::Type* rel_ConstantValue_bf370ded014c6df6;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_ConstantValue_1f449464e1f8bff8::Stratum_ConstantValue_1f449464e1f8bff8(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__0_1__11::Type& rel_AssignBoolConstant_153553f1352c29c5,t_btree_ii__0_1__11::Type& rel_AssignFloatConstant_2958d76b03506f1d,t_btree_ii__0_1__11::Type& rel_AssignIntConstant_91e14648ac326411,t_btree_ii__0_1__11::Type& rel_AssignStrConstant_2b622c7da0720ea5,t_btree_ii__1_0__11__01::Type& rel_ConstantValue_bf370ded014c6df6):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_AssignBoolConstant_153553f1352c29c5(&rel_AssignBoolConstant_153553f1352c29c5),
rel_AssignFloatConstant_2958d76b03506f1d(&rel_AssignFloatConstant_2958d76b03506f1d),
rel_AssignIntConstant_91e14648ac326411(&rel_AssignIntConstant_91e14648ac326411),
rel_AssignStrConstant_2b622c7da0720ea5(&rel_AssignStrConstant_2b622c7da0720ea5),
rel_ConstantValue_bf370ded014c6df6(&rel_ConstantValue_bf370ded014c6df6){
}

void Stratum_ConstantValue_1f449464e1f8bff8::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(ConstantValue(var,constant) :- 
   AssignBoolConstant(var,constant).
in file main.dl [619:1-623:40])_");
if(!(rel_AssignBoolConstant_153553f1352c29c5->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_AssignBoolConstant_153553f1352c29c5_op_ctxt,rel_AssignBoolConstant_153553f1352c29c5->createContext());
CREATE_OP_CONTEXT(rel_ConstantValue_bf370ded014c6df6_op_ctxt,rel_ConstantValue_bf370ded014c6df6->createContext());
for(const auto& env0 : *rel_AssignBoolConstant_153553f1352c29c5) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_ConstantValue_bf370ded014c6df6->insert(tuple,READ_OP_CONTEXT(rel_ConstantValue_bf370ded014c6df6_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(ConstantValue(var,constant) :- 
   AssignStrConstant(var,constant).
in file main.dl [619:1-623:40])_");
if(!(rel_AssignStrConstant_2b622c7da0720ea5->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_AssignStrConstant_2b622c7da0720ea5_op_ctxt,rel_AssignStrConstant_2b622c7da0720ea5->createContext());
CREATE_OP_CONTEXT(rel_ConstantValue_bf370ded014c6df6_op_ctxt,rel_ConstantValue_bf370ded014c6df6->createContext());
for(const auto& env0 : *rel_AssignStrConstant_2b622c7da0720ea5) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_ConstantValue_bf370ded014c6df6->insert(tuple,READ_OP_CONTEXT(rel_ConstantValue_bf370ded014c6df6_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(ConstantValue(var,constant) :- 
   AssignIntConstant(var,constant).
in file main.dl [619:1-623:40])_");
if(!(rel_AssignIntConstant_91e14648ac326411->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_AssignIntConstant_91e14648ac326411_op_ctxt,rel_AssignIntConstant_91e14648ac326411->createContext());
CREATE_OP_CONTEXT(rel_ConstantValue_bf370ded014c6df6_op_ctxt,rel_ConstantValue_bf370ded014c6df6->createContext());
for(const auto& env0 : *rel_AssignIntConstant_91e14648ac326411) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_ConstantValue_bf370ded014c6df6->insert(tuple,READ_OP_CONTEXT(rel_ConstantValue_bf370ded014c6df6_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(ConstantValue(var,constant) :- 
   AssignFloatConstant(var,constant).
in file main.dl [619:1-623:40])_");
if(!(rel_AssignFloatConstant_2958d76b03506f1d->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_AssignFloatConstant_2958d76b03506f1d_op_ctxt,rel_AssignFloatConstant_2958d76b03506f1d->createContext());
CREATE_OP_CONTEXT(rel_ConstantValue_bf370ded014c6df6_op_ctxt,rel_ConstantValue_bf370ded014c6df6->createContext());
for(const auto& env0 : *rel_AssignFloatConstant_2958d76b03506f1d) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_ConstantValue_bf370ded014c6df6->insert(tuple,READ_OP_CONTEXT(rel_ConstantValue_bf370ded014c6df6_op_ctxt));
}
}
();}
if (pruneImdtRels) rel_AssignBoolConstant_153553f1352c29c5->purge();
if (pruneImdtRels) rel_AssignFloatConstant_2958d76b03506f1d->purge();
if (pruneImdtRels) rel_AssignIntConstant_91e14648ac326411->purge();
if (pruneImdtRels) rel_AssignStrConstant_2b622c7da0720ea5->purge();
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_DataOverlap_82a8003de4aa5746 {
public:
 Stratum_DataOverlap_82a8003de4aa5746(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__2_3_0_1__1111__0011::Type& rel_delta_DataOverlap_83ad9cceb2f93136,t_btree_iiii__2_3_0_1__1111__0011::Type& rel_new_DataOverlap_92d522de74fa8c9c,t_btree_iiii__0_1_2_3__1111::Type& rel_DataOverlap_5a4300eece6cb523,t_btree_iiii__0_1_2_3__1111::Type& rel_DuplicateEdge_0f0315b18851fb20,t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type& rel_FlowFromExtended_7fd58681b534e204);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__2_3_0_1__1111__0011::Type* rel_delta_DataOverlap_83ad9cceb2f93136;
t_btree_iiii__2_3_0_1__1111__0011::Type* rel_new_DataOverlap_92d522de74fa8c9c;
t_btree_iiii__0_1_2_3__1111::Type* rel_DataOverlap_5a4300eece6cb523;
t_btree_iiii__0_1_2_3__1111::Type* rel_DuplicateEdge_0f0315b18851fb20;
t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type* rel_FlowFromExtended_7fd58681b534e204;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_DataOverlap_82a8003de4aa5746::Stratum_DataOverlap_82a8003de4aa5746(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__2_3_0_1__1111__0011::Type& rel_delta_DataOverlap_83ad9cceb2f93136,t_btree_iiii__2_3_0_1__1111__0011::Type& rel_new_DataOverlap_92d522de74fa8c9c,t_btree_iiii__0_1_2_3__1111::Type& rel_DataOverlap_5a4300eece6cb523,t_btree_iiii__0_1_2_3__1111::Type& rel_DuplicateEdge_0f0315b18851fb20,t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type& rel_FlowFromExtended_7fd58681b534e204):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_delta_DataOverlap_83ad9cceb2f93136(&rel_delta_DataOverlap_83ad9cceb2f93136),
rel_new_DataOverlap_92d522de74fa8c9c(&rel_new_DataOverlap_92d522de74fa8c9c),
rel_DataOverlap_5a4300eece6cb523(&rel_DataOverlap_5a4300eece6cb523),
rel_DuplicateEdge_0f0315b18851fb20(&rel_DuplicateEdge_0f0315b18851fb20),
rel_FlowFromExtended_7fd58681b534e204(&rel_FlowFromExtended_7fd58681b534e204){
}

void Stratum_DataOverlap_82a8003de4aa5746::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(DataOverlap(train,ctx1,test,ctx2) :- 
   FlowFromExtended(test,ctx2,src_equiv,ctx_src,"data"),
   FlowFromExtended(train,ctx1,src_equiv,ctx_src,"equiv").
in file main.dl [1122:1-1124:64])_");
if(!(rel_FlowFromExtended_7fd58681b534e204->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt,rel_DataOverlap_5a4300eece6cb523->createContext());
CREATE_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt,rel_FlowFromExtended_7fd58681b534e204->createContext());
auto range = rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_00001(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(0))}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_00111(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast(env0[3]), ramBitCast(RamSigned(1))}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast(env0[3]), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[0]),ramBitCast(env1[1]),ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_DataOverlap_5a4300eece6cb523->insert(tuple,READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(DataOverlap(train,ctx1,test,ctx2) :- 
   DuplicateEdge(to,toCtx,_,_),
   FlowFromExtended(train,ctx1,to,toCtx,"data"),
   FlowFromExtended(test,ctx2,to,toCtx,"data").
in file main.dl [1130:1-1133:53])_");
if(!(rel_FlowFromExtended_7fd58681b534e204->empty()) && !(rel_DuplicateEdge_0f0315b18851fb20->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt,rel_DataOverlap_5a4300eece6cb523->createContext());
CREATE_OP_CONTEXT(rel_DuplicateEdge_0f0315b18851fb20_op_ctxt,rel_DuplicateEdge_0f0315b18851fb20->createContext());
CREATE_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt,rel_FlowFromExtended_7fd58681b534e204->createContext());
for(const auto& env0 : *rel_DuplicateEdge_0f0315b18851fb20) {
auto range = rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_00111(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_00111(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[0]),ramBitCast(env1[1]),ramBitCast(env2[0]),ramBitCast(env2[1])}};
rel_DataOverlap_5a4300eece6cb523->insert(tuple,READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt));
}
}
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_delta_DataOverlap_83ad9cceb2f93136_op_ctxt,rel_delta_DataOverlap_83ad9cceb2f93136->createContext());
CREATE_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt,rel_DataOverlap_5a4300eece6cb523->createContext());
for(const auto& env0 : *rel_DataOverlap_5a4300eece6cb523) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_delta_DataOverlap_83ad9cceb2f93136->insert(tuple,READ_OP_CONTEXT(rel_delta_DataOverlap_83ad9cceb2f93136_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(DataOverlap(train,ctx1,test,ctx2) :- 
   DataOverlap(test,ctx2,train,ctx1).
in file main.dl [1128:1-1128:78])_");
if(!(rel_delta_DataOverlap_83ad9cceb2f93136->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_DataOverlap_83ad9cceb2f93136_op_ctxt,rel_delta_DataOverlap_83ad9cceb2f93136->createContext());
CREATE_OP_CONTEXT(rel_new_DataOverlap_92d522de74fa8c9c_op_ctxt,rel_new_DataOverlap_92d522de74fa8c9c->createContext());
CREATE_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt,rel_DataOverlap_5a4300eece6cb523->createContext());
for(const auto& env0 : *rel_delta_DataOverlap_83ad9cceb2f93136) {
if( !(rel_DataOverlap_5a4300eece6cb523->contains(Tuple<RamDomain,4>{{ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[0]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_new_DataOverlap_92d522de74fa8c9c->insert(tuple,READ_OP_CONTEXT(rel_new_DataOverlap_92d522de74fa8c9c_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(DataOverlap(train,ctx1,test,ctx2) :- 
   DuplicateEdge(to,toCtx,from,fromCtx),
   FlowFromExtended(train,ctx1,to,toCtx,"data"),
   DataOverlap(test,ctx2,from,fromCtx).
in file main.dl [1135:1-1138:44])_");
if(!(rel_FlowFromExtended_7fd58681b534e204->empty()) && !(rel_delta_DataOverlap_83ad9cceb2f93136->empty()) && !(rel_DuplicateEdge_0f0315b18851fb20->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_DataOverlap_83ad9cceb2f93136_op_ctxt,rel_delta_DataOverlap_83ad9cceb2f93136->createContext());
CREATE_OP_CONTEXT(rel_new_DataOverlap_92d522de74fa8c9c_op_ctxt,rel_new_DataOverlap_92d522de74fa8c9c->createContext());
CREATE_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt,rel_DataOverlap_5a4300eece6cb523->createContext());
CREATE_OP_CONTEXT(rel_DuplicateEdge_0f0315b18851fb20_op_ctxt,rel_DuplicateEdge_0f0315b18851fb20->createContext());
CREATE_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt,rel_FlowFromExtended_7fd58681b534e204->createContext());
for(const auto& env0 : *rel_DuplicateEdge_0f0315b18851fb20) {
auto range = rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_00111(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_delta_DataOverlap_83ad9cceb2f93136->lowerUpperRange_0011(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast(env0[3])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_delta_DataOverlap_83ad9cceb2f93136_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_DataOverlap_5a4300eece6cb523->contains(Tuple<RamDomain,4>{{ramBitCast(env1[0]),ramBitCast(env1[1]),ramBitCast(env2[0]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[0]),ramBitCast(env1[1]),ramBitCast(env2[0]),ramBitCast(env2[1])}};
rel_new_DataOverlap_92d522de74fa8c9c->insert(tuple,READ_OP_CONTEXT(rel_new_DataOverlap_92d522de74fa8c9c_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(DataOverlap(train,ctx1,test,ctx2) :- 
   DuplicateEdge(to,toCtx,from,fromCtx),
   FlowFromExtended(test,ctx2,to,toCtx,"data"),
   DataOverlap(train,ctx1,from,fromCtx).
in file main.dl [1140:1-1143:45])_");
if(!(rel_FlowFromExtended_7fd58681b534e204->empty()) && !(rel_delta_DataOverlap_83ad9cceb2f93136->empty()) && !(rel_DuplicateEdge_0f0315b18851fb20->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_DataOverlap_83ad9cceb2f93136_op_ctxt,rel_delta_DataOverlap_83ad9cceb2f93136->createContext());
CREATE_OP_CONTEXT(rel_new_DataOverlap_92d522de74fa8c9c_op_ctxt,rel_new_DataOverlap_92d522de74fa8c9c->createContext());
CREATE_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt,rel_DataOverlap_5a4300eece6cb523->createContext());
CREATE_OP_CONTEXT(rel_DuplicateEdge_0f0315b18851fb20_op_ctxt,rel_DuplicateEdge_0f0315b18851fb20->createContext());
CREATE_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt,rel_FlowFromExtended_7fd58681b534e204->createContext());
for(const auto& env0 : *rel_DuplicateEdge_0f0315b18851fb20) {
auto range = rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_00111(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(RamSigned(0))}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_delta_DataOverlap_83ad9cceb2f93136->lowerUpperRange_0011(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast(env0[3])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_delta_DataOverlap_83ad9cceb2f93136_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_DataOverlap_5a4300eece6cb523->contains(Tuple<RamDomain,4>{{ramBitCast(env2[0]),ramBitCast(env2[1]),ramBitCast(env1[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env2[0]),ramBitCast(env2[1]),ramBitCast(env1[0]),ramBitCast(env1[1])}};
rel_new_DataOverlap_92d522de74fa8c9c->insert(tuple,READ_OP_CONTEXT(rel_new_DataOverlap_92d522de74fa8c9c_op_ctxt));
}
}
}
}
}
();}
if(rel_new_DataOverlap_92d522de74fa8c9c->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_new_DataOverlap_92d522de74fa8c9c_op_ctxt,rel_new_DataOverlap_92d522de74fa8c9c->createContext());
CREATE_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt,rel_DataOverlap_5a4300eece6cb523->createContext());
for(const auto& env0 : *rel_new_DataOverlap_92d522de74fa8c9c) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_DataOverlap_5a4300eece6cb523->insert(tuple,READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt));
}
}
();std::swap(rel_delta_DataOverlap_83ad9cceb2f93136, rel_new_DataOverlap_92d522de74fa8c9c);
rel_new_DataOverlap_92d522de74fa8c9c->purge();
iter++;
}
iter = 0;
rel_delta_DataOverlap_83ad9cceb2f93136->purge();
rel_new_DataOverlap_92d522de74fa8c9c->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","train\tctx1\ttest\tctx2"},{"auxArity","0"},{"name","DataOverlap"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"train\", \"ctx1\", \"test\", \"ctx2\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_DataOverlap_5a4300eece6cb523);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_DuplicateEdge_0f0315b18851fb20->purge();
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_DuplicateEdge_fab9fff048b6b0a6 {
public:
 Stratum_DuplicateEdge_fab9fff048b6b0a6(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_DuplicateEdge_0f0315b18851fb20,t_btree_iiiiiii__6_0_1_2_3_4_5__1111111__0000001::Type& rel_TaintStartsTarget_b45151d0d1a25a24);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__0_1_2_3__1111::Type* rel_DuplicateEdge_0f0315b18851fb20;
t_btree_iiiiiii__6_0_1_2_3_4_5__1111111__0000001::Type* rel_TaintStartsTarget_b45151d0d1a25a24;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_DuplicateEdge_fab9fff048b6b0a6::Stratum_DuplicateEdge_fab9fff048b6b0a6(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_DuplicateEdge_0f0315b18851fb20,t_btree_iiiiiii__6_0_1_2_3_4_5__1111111__0000001::Type& rel_TaintStartsTarget_b45151d0d1a25a24):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_DuplicateEdge_0f0315b18851fb20(&rel_DuplicateEdge_0f0315b18851fb20),
rel_TaintStartsTarget_b45151d0d1a25a24(&rel_TaintStartsTarget_b45151d0d1a25a24){
}

void Stratum_DuplicateEdge_fab9fff048b6b0a6::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(DuplicateEdge(to,toCtx,from,fromCtx) :- 
   TaintStartsTarget(to,toCtx,from,fromCtx,_,_,"dup").
in file main.dl [1349:1-1350:62])_");
if(!(rel_TaintStartsTarget_b45151d0d1a25a24->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_DuplicateEdge_0f0315b18851fb20_op_ctxt,rel_DuplicateEdge_0f0315b18851fb20->createContext());
CREATE_OP_CONTEXT(rel_TaintStartsTarget_b45151d0d1a25a24_op_ctxt,rel_TaintStartsTarget_b45151d0d1a25a24->createContext());
auto range = rel_TaintStartsTarget_b45151d0d1a25a24->lowerUpperRange_0000001(Tuple<RamDomain,7>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(2))}},Tuple<RamDomain,7>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(2))}},READ_OP_CONTEXT(rel_TaintStartsTarget_b45151d0d1a25a24_op_ctxt));
for(const auto& env0 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_DuplicateEdge_0f0315b18851fb20->insert(tuple,READ_OP_CONTEXT(rel_DuplicateEdge_0f0315b18851fb20_op_ctxt));
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_FieldPointsTo_05fcbbf17ca84968 {
public:
 Stratum_FieldPointsTo_05fcbbf17ca84968(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_1_2_3_4__11100__11111::Type& rel_delta_FieldPointsTo_6e98ef2bb9d48d3a,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_delta_IndexContentPointsTo_0515756a33abb518,t_btree_iiii__0_1_2_3__1000__1111__1100::Type& rel_delta_VarPointsTo_16577dc30fb04e76,t_btree_iiiii__0_1_2_3_4__11100__11111::Type& rel_new_FieldPointsTo_b27ef2e9e0cb7cd8,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_new_IndexContentPointsTo_b75799237eab2896,t_btree_iiii__0_1_2_3__1000__1111__1100::Type& rel_new_VarPointsTo_5ea2db765d05791c,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualParam_b7a735170493e717,t_btree_iii__1_0_2__010__110__111::Type& rel_ActualReturn_8bc9db09e057aa22,t_btree_iii__0_1_2__111::Type& rel_Alloc_31bbfa07060a4241,t_btree_ii__0_1__11::Type& rel_AssignGlobal_f60b14713e1f1ab7,t_btree_ii__0_1__11::Type& rel_AssignVar_b173aa4bb6352b3a,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_iiiii__0_1_2_3_4__11100__11111::Type& rel_FieldPointsTo_79eb0e1cfe8639b3,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_IndexContentPointsTo_db1dfbfa873aff0a,t_btree_iiii__0_2_1_3__1010__1111::Type& rel_InterProcAssign_bed60ee93a02e127,t_btree_iii__2__0_1_2__001__110__111::Type& rel_LoadField_6018b2c33f454495,t_btree_iii__2__0_1_2__001__110__111::Type& rel_LoadIndex_3a07e512c7efb9bd,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_LoadSlice_e590a0ee3f45cac8,t_btree_iii__1_2_0__011__111::Type& rel_MethodSSA_a9f7ed6321abcd80,t_btree_ii__0_1__11__10::Type& rel_Reachable_60cce6ab70e369f7,t_btree_iiii__0_1_2_3__1110__1111::Type& rel_SliceIndex_7426c9b7afc02920,t_btree_iii__0_1_2__111::Type& rel_StoreField_7d8d16151c0ea49b,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_StoreFieldSSA_051b143b9d011002,t_btree_iii__0_1_2__110__111::Type& rel_StoreIndex_bab2c0876dfa7ece,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_StoreIndexSSA_431249b1dfe65e85,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_StoreSlice_2d8a31bc728a3bbd,t_btree_iiiiii__0_1_2_3_4_5__110000__111111::Type& rel_StoreSliceSSA_f26b3c4e2aecada2,t_btree_ii__0_1__11__10::Type& rel_VarInMethod_a7f53498a99fbbab,t_btree_iiii__2_3_0_1__0_1__1000__1111__1100__0011::Type& rel_VarPointsTo_c1a9f897b9f324f0);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiiii__0_1_2_3_4__11100__11111::Type* rel_delta_FieldPointsTo_6e98ef2bb9d48d3a;
t_btree_iiii__0_1_2_3__1111__1100::Type* rel_delta_IndexContentPointsTo_0515756a33abb518;
t_btree_iiii__0_1_2_3__1000__1111__1100::Type* rel_delta_VarPointsTo_16577dc30fb04e76;
t_btree_iiiii__0_1_2_3_4__11100__11111::Type* rel_new_FieldPointsTo_b27ef2e9e0cb7cd8;
t_btree_iiii__0_1_2_3__1111__1100::Type* rel_new_IndexContentPointsTo_b75799237eab2896;
t_btree_iiii__0_1_2_3__1000__1111__1100::Type* rel_new_VarPointsTo_5ea2db765d05791c;
t_btree_iii__1__0_1_2__010__100__110__111::Type* rel_ActualParam_b7a735170493e717;
t_btree_iii__1_0_2__010__110__111::Type* rel_ActualReturn_8bc9db09e057aa22;
t_btree_iii__0_1_2__111::Type* rel_Alloc_31bbfa07060a4241;
t_btree_ii__0_1__11::Type* rel_AssignGlobal_f60b14713e1f1ab7;
t_btree_ii__0_1__11::Type* rel_AssignVar_b173aa4bb6352b3a;
t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type* rel_CallGraphEdge_333c9d69fed5eee7;
t_btree_iiiii__0_1_2_3_4__11100__11111::Type* rel_FieldPointsTo_79eb0e1cfe8639b3;
t_btree_iiii__0_1_2_3__1111__1100::Type* rel_IndexContentPointsTo_db1dfbfa873aff0a;
t_btree_iiii__0_2_1_3__1010__1111::Type* rel_InterProcAssign_bed60ee93a02e127;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_LoadField_6018b2c33f454495;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_LoadIndex_3a07e512c7efb9bd;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel_LoadSlice_e590a0ee3f45cac8;
t_btree_iii__1_2_0__011__111::Type* rel_MethodSSA_a9f7ed6321abcd80;
t_btree_ii__0_1__11__10::Type* rel_Reachable_60cce6ab70e369f7;
t_btree_iiii__0_1_2_3__1110__1111::Type* rel_SliceIndex_7426c9b7afc02920;
t_btree_iii__0_1_2__111::Type* rel_StoreField_7d8d16151c0ea49b;
t_btree_iiii__0_1_2_3__1111__1100::Type* rel_StoreFieldSSA_051b143b9d011002;
t_btree_iii__0_1_2__110__111::Type* rel_StoreIndex_bab2c0876dfa7ece;
t_btree_iiii__0_1_2_3__1111__1100::Type* rel_StoreIndexSSA_431249b1dfe65e85;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel_StoreSlice_2d8a31bc728a3bbd;
t_btree_iiiiii__0_1_2_3_4_5__110000__111111::Type* rel_StoreSliceSSA_f26b3c4e2aecada2;
t_btree_ii__0_1__11__10::Type* rel_VarInMethod_a7f53498a99fbbab;
t_btree_iiii__2_3_0_1__0_1__1000__1111__1100__0011::Type* rel_VarPointsTo_c1a9f897b9f324f0;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_FieldPointsTo_05fcbbf17ca84968::Stratum_FieldPointsTo_05fcbbf17ca84968(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_1_2_3_4__11100__11111::Type& rel_delta_FieldPointsTo_6e98ef2bb9d48d3a,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_delta_IndexContentPointsTo_0515756a33abb518,t_btree_iiii__0_1_2_3__1000__1111__1100::Type& rel_delta_VarPointsTo_16577dc30fb04e76,t_btree_iiiii__0_1_2_3_4__11100__11111::Type& rel_new_FieldPointsTo_b27ef2e9e0cb7cd8,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_new_IndexContentPointsTo_b75799237eab2896,t_btree_iiii__0_1_2_3__1000__1111__1100::Type& rel_new_VarPointsTo_5ea2db765d05791c,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualParam_b7a735170493e717,t_btree_iii__1_0_2__010__110__111::Type& rel_ActualReturn_8bc9db09e057aa22,t_btree_iii__0_1_2__111::Type& rel_Alloc_31bbfa07060a4241,t_btree_ii__0_1__11::Type& rel_AssignGlobal_f60b14713e1f1ab7,t_btree_ii__0_1__11::Type& rel_AssignVar_b173aa4bb6352b3a,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_iiiii__0_1_2_3_4__11100__11111::Type& rel_FieldPointsTo_79eb0e1cfe8639b3,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_IndexContentPointsTo_db1dfbfa873aff0a,t_btree_iiii__0_2_1_3__1010__1111::Type& rel_InterProcAssign_bed60ee93a02e127,t_btree_iii__2__0_1_2__001__110__111::Type& rel_LoadField_6018b2c33f454495,t_btree_iii__2__0_1_2__001__110__111::Type& rel_LoadIndex_3a07e512c7efb9bd,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_LoadSlice_e590a0ee3f45cac8,t_btree_iii__1_2_0__011__111::Type& rel_MethodSSA_a9f7ed6321abcd80,t_btree_ii__0_1__11__10::Type& rel_Reachable_60cce6ab70e369f7,t_btree_iiii__0_1_2_3__1110__1111::Type& rel_SliceIndex_7426c9b7afc02920,t_btree_iii__0_1_2__111::Type& rel_StoreField_7d8d16151c0ea49b,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_StoreFieldSSA_051b143b9d011002,t_btree_iii__0_1_2__110__111::Type& rel_StoreIndex_bab2c0876dfa7ece,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_StoreIndexSSA_431249b1dfe65e85,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_StoreSlice_2d8a31bc728a3bbd,t_btree_iiiiii__0_1_2_3_4_5__110000__111111::Type& rel_StoreSliceSSA_f26b3c4e2aecada2,t_btree_ii__0_1__11__10::Type& rel_VarInMethod_a7f53498a99fbbab,t_btree_iiii__2_3_0_1__0_1__1000__1111__1100__0011::Type& rel_VarPointsTo_c1a9f897b9f324f0):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_delta_FieldPointsTo_6e98ef2bb9d48d3a(&rel_delta_FieldPointsTo_6e98ef2bb9d48d3a),
rel_delta_IndexContentPointsTo_0515756a33abb518(&rel_delta_IndexContentPointsTo_0515756a33abb518),
rel_delta_VarPointsTo_16577dc30fb04e76(&rel_delta_VarPointsTo_16577dc30fb04e76),
rel_new_FieldPointsTo_b27ef2e9e0cb7cd8(&rel_new_FieldPointsTo_b27ef2e9e0cb7cd8),
rel_new_IndexContentPointsTo_b75799237eab2896(&rel_new_IndexContentPointsTo_b75799237eab2896),
rel_new_VarPointsTo_5ea2db765d05791c(&rel_new_VarPointsTo_5ea2db765d05791c),
rel_ActualParam_b7a735170493e717(&rel_ActualParam_b7a735170493e717),
rel_ActualReturn_8bc9db09e057aa22(&rel_ActualReturn_8bc9db09e057aa22),
rel_Alloc_31bbfa07060a4241(&rel_Alloc_31bbfa07060a4241),
rel_AssignGlobal_f60b14713e1f1ab7(&rel_AssignGlobal_f60b14713e1f1ab7),
rel_AssignVar_b173aa4bb6352b3a(&rel_AssignVar_b173aa4bb6352b3a),
rel_CallGraphEdge_333c9d69fed5eee7(&rel_CallGraphEdge_333c9d69fed5eee7),
rel_FieldPointsTo_79eb0e1cfe8639b3(&rel_FieldPointsTo_79eb0e1cfe8639b3),
rel_IndexContentPointsTo_db1dfbfa873aff0a(&rel_IndexContentPointsTo_db1dfbfa873aff0a),
rel_InterProcAssign_bed60ee93a02e127(&rel_InterProcAssign_bed60ee93a02e127),
rel_LoadField_6018b2c33f454495(&rel_LoadField_6018b2c33f454495),
rel_LoadIndex_3a07e512c7efb9bd(&rel_LoadIndex_3a07e512c7efb9bd),
rel_LoadSlice_e590a0ee3f45cac8(&rel_LoadSlice_e590a0ee3f45cac8),
rel_MethodSSA_a9f7ed6321abcd80(&rel_MethodSSA_a9f7ed6321abcd80),
rel_Reachable_60cce6ab70e369f7(&rel_Reachable_60cce6ab70e369f7),
rel_SliceIndex_7426c9b7afc02920(&rel_SliceIndex_7426c9b7afc02920),
rel_StoreField_7d8d16151c0ea49b(&rel_StoreField_7d8d16151c0ea49b),
rel_StoreFieldSSA_051b143b9d011002(&rel_StoreFieldSSA_051b143b9d011002),
rel_StoreIndex_bab2c0876dfa7ece(&rel_StoreIndex_bab2c0876dfa7ece),
rel_StoreIndexSSA_431249b1dfe65e85(&rel_StoreIndexSSA_431249b1dfe65e85),
rel_StoreSlice_2d8a31bc728a3bbd(&rel_StoreSlice_2d8a31bc728a3bbd),
rel_StoreSliceSSA_f26b3c4e2aecada2(&rel_StoreSliceSSA_f26b3c4e2aecada2),
rel_VarInMethod_a7f53498a99fbbab(&rel_VarInMethod_a7f53498a99fbbab),
rel_VarPointsTo_c1a9f897b9f324f0(&rel_VarPointsTo_c1a9f897b9f324f0){
}

void Stratum_FieldPointsTo_05fcbbf17ca84968::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(VarPointsTo(var,[invo1,invo2],value,[invo2]) :- 
   Alloc(var,value,inMeth),
   Reachable(inMeth,[invo1,invo2]).
in file main.dl [709:1-713:20])_");
if(!(rel_Alloc_31bbfa07060a4241->empty()) && !(rel_Reachable_60cce6ab70e369f7->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Alloc_31bbfa07060a4241_op_ctxt,rel_Alloc_31bbfa07060a4241->createContext());
CREATE_OP_CONTEXT(rel_Reachable_60cce6ab70e369f7_op_ctxt,rel_Reachable_60cce6ab70e369f7->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_Alloc_31bbfa07060a4241) {
auto range = rel_Reachable_60cce6ab70e369f7->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_Reachable_60cce6ab70e369f7_op_ctxt));
for(const auto& env1 : range) {
RamDomain const ref = env1[1];
if (ref == 0) continue;
const RamDomain *env2 = recordTable.unpack(ref,2);
{
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(env2[0])),ramBitCast(ramBitCast(env2[1]))}}
)),ramBitCast(env0[1]),ramBitCast(pack(recordTable,Tuple<RamDomain,1>{{ramBitCast(ramBitCast(env2[1]))}}
))}};
rel_VarPointsTo_c1a9f897b9f324f0->insert(tuple,READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
}
}
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_delta_FieldPointsTo_6e98ef2bb9d48d3a_op_ctxt,rel_delta_FieldPointsTo_6e98ef2bb9d48d3a->createContext());
CREATE_OP_CONTEXT(rel_FieldPointsTo_79eb0e1cfe8639b3_op_ctxt,rel_FieldPointsTo_79eb0e1cfe8639b3->createContext());
for(const auto& env0 : *rel_FieldPointsTo_79eb0e1cfe8639b3) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_delta_FieldPointsTo_6e98ef2bb9d48d3a->insert(tuple,READ_OP_CONTEXT(rel_delta_FieldPointsTo_6e98ef2bb9d48d3a_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_delta_IndexContentPointsTo_0515756a33abb518_op_ctxt,rel_delta_IndexContentPointsTo_0515756a33abb518->createContext());
CREATE_OP_CONTEXT(rel_IndexContentPointsTo_db1dfbfa873aff0a_op_ctxt,rel_IndexContentPointsTo_db1dfbfa873aff0a->createContext());
for(const auto& env0 : *rel_IndexContentPointsTo_db1dfbfa873aff0a) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_delta_IndexContentPointsTo_0515756a33abb518->insert(tuple,READ_OP_CONTEXT(rel_delta_IndexContentPointsTo_0515756a33abb518_op_ctxt));
}
}
();[&](){
CREATE_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt,rel_delta_VarPointsTo_16577dc30fb04e76->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_VarPointsTo_c1a9f897b9f324f0) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_delta_VarPointsTo_16577dc30fb04e76->insert(tuple,READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(FieldPointsTo(baseValue,baseHctx,fld,value,hctx) :- 
   StoreField(base,fld,from),
   VarPointsTo(base,ctx,baseValue,baseHctx),
   VarPointsTo(from,ctx,value,hctx).
in file main.dl [737:1-740:41])_");
if(!(rel_delta_VarPointsTo_16577dc30fb04e76->empty()) && !(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreField_7d8d16151c0ea49b->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt,rel_delta_VarPointsTo_16577dc30fb04e76->createContext());
CREATE_OP_CONTEXT(rel_new_FieldPointsTo_b27ef2e9e0cb7cd8_op_ctxt,rel_new_FieldPointsTo_b27ef2e9e0cb7cd8->createContext());
CREATE_OP_CONTEXT(rel_FieldPointsTo_79eb0e1cfe8639b3_op_ctxt,rel_FieldPointsTo_79eb0e1cfe8639b3->createContext());
CREATE_OP_CONTEXT(rel_StoreField_7d8d16151c0ea49b_op_ctxt,rel_StoreField_7d8d16151c0ea49b->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreField_7d8d16151c0ea49b) {
auto range = rel_delta_VarPointsTo_16577dc30fb04e76->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_FieldPointsTo_79eb0e1cfe8639b3->contains(Tuple<RamDomain,5>{{ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env0[1]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_FieldPointsTo_79eb0e1cfe8639b3_op_ctxt))) && !(rel_delta_VarPointsTo_16577dc30fb04e76->contains(Tuple<RamDomain,4>{{ramBitCast(env0[2]),ramBitCast(env1[1]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt)))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env0[1]),ramBitCast(env2[2]),ramBitCast(env2[3])}};
rel_new_FieldPointsTo_b27ef2e9e0cb7cd8->insert(tuple,READ_OP_CONTEXT(rel_new_FieldPointsTo_b27ef2e9e0cb7cd8_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FieldPointsTo(baseValue,baseHctx,fld,value,hctx) :- 
   StoreField(base,fld,from),
   VarPointsTo(base,ctx,baseValue,baseHctx),
   VarPointsTo(from,ctx,value,hctx).
in file main.dl [737:1-740:41])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_delta_VarPointsTo_16577dc30fb04e76->empty()) && !(rel_StoreField_7d8d16151c0ea49b->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt,rel_delta_VarPointsTo_16577dc30fb04e76->createContext());
CREATE_OP_CONTEXT(rel_new_FieldPointsTo_b27ef2e9e0cb7cd8_op_ctxt,rel_new_FieldPointsTo_b27ef2e9e0cb7cd8->createContext());
CREATE_OP_CONTEXT(rel_FieldPointsTo_79eb0e1cfe8639b3_op_ctxt,rel_FieldPointsTo_79eb0e1cfe8639b3->createContext());
CREATE_OP_CONTEXT(rel_StoreField_7d8d16151c0ea49b_op_ctxt,rel_StoreField_7d8d16151c0ea49b->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreField_7d8d16151c0ea49b) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_delta_VarPointsTo_16577dc30fb04e76->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_FieldPointsTo_79eb0e1cfe8639b3->contains(Tuple<RamDomain,5>{{ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env0[1]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_FieldPointsTo_79eb0e1cfe8639b3_op_ctxt)))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env0[1]),ramBitCast(env2[2]),ramBitCast(env2[3])}};
rel_new_FieldPointsTo_b27ef2e9e0cb7cd8->insert(tuple,READ_OP_CONTEXT(rel_new_FieldPointsTo_b27ef2e9e0cb7cd8_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FieldPointsTo(baseValue,baseHctx,fld,value,hctx) :- 
   StoreFieldSSA(_,base,fld,from),
   VarPointsTo(base,ctx,baseValue,baseHctx),
   VarPointsTo(from,ctx,value,hctx).
in file main.dl [741:1-744:41])_");
if(!(rel_delta_VarPointsTo_16577dc30fb04e76->empty()) && !(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreFieldSSA_051b143b9d011002->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt,rel_delta_VarPointsTo_16577dc30fb04e76->createContext());
CREATE_OP_CONTEXT(rel_new_FieldPointsTo_b27ef2e9e0cb7cd8_op_ctxt,rel_new_FieldPointsTo_b27ef2e9e0cb7cd8->createContext());
CREATE_OP_CONTEXT(rel_FieldPointsTo_79eb0e1cfe8639b3_op_ctxt,rel_FieldPointsTo_79eb0e1cfe8639b3->createContext());
CREATE_OP_CONTEXT(rel_StoreFieldSSA_051b143b9d011002_op_ctxt,rel_StoreFieldSSA_051b143b9d011002->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreFieldSSA_051b143b9d011002) {
auto range = rel_delta_VarPointsTo_16577dc30fb04e76->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_FieldPointsTo_79eb0e1cfe8639b3->contains(Tuple<RamDomain,5>{{ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env0[2]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_FieldPointsTo_79eb0e1cfe8639b3_op_ctxt))) && !(rel_delta_VarPointsTo_16577dc30fb04e76->contains(Tuple<RamDomain,4>{{ramBitCast(env0[3]),ramBitCast(env1[1]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt)))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env0[2]),ramBitCast(env2[2]),ramBitCast(env2[3])}};
rel_new_FieldPointsTo_b27ef2e9e0cb7cd8->insert(tuple,READ_OP_CONTEXT(rel_new_FieldPointsTo_b27ef2e9e0cb7cd8_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FieldPointsTo(baseValue,baseHctx,fld,value,hctx) :- 
   StoreFieldSSA(_,base,fld,from),
   VarPointsTo(base,ctx,baseValue,baseHctx),
   VarPointsTo(from,ctx,value,hctx).
in file main.dl [741:1-744:41])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_delta_VarPointsTo_16577dc30fb04e76->empty()) && !(rel_StoreFieldSSA_051b143b9d011002->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt,rel_delta_VarPointsTo_16577dc30fb04e76->createContext());
CREATE_OP_CONTEXT(rel_new_FieldPointsTo_b27ef2e9e0cb7cd8_op_ctxt,rel_new_FieldPointsTo_b27ef2e9e0cb7cd8->createContext());
CREATE_OP_CONTEXT(rel_FieldPointsTo_79eb0e1cfe8639b3_op_ctxt,rel_FieldPointsTo_79eb0e1cfe8639b3->createContext());
CREATE_OP_CONTEXT(rel_StoreFieldSSA_051b143b9d011002_op_ctxt,rel_StoreFieldSSA_051b143b9d011002->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreFieldSSA_051b143b9d011002) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_delta_VarPointsTo_16577dc30fb04e76->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_FieldPointsTo_79eb0e1cfe8639b3->contains(Tuple<RamDomain,5>{{ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env0[2]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_FieldPointsTo_79eb0e1cfe8639b3_op_ctxt)))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env0[2]),ramBitCast(env2[2]),ramBitCast(env2[3])}};
rel_new_FieldPointsTo_b27ef2e9e0cb7cd8->insert(tuple,READ_OP_CONTEXT(rel_new_FieldPointsTo_b27ef2e9e0cb7cd8_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(IndexContentPointsTo(baseValue,baseHctx,value,hctx) :- 
   StoreIndex(base,_,from),
   VarPointsTo(base,ctx,baseValue,baseHctx),
   VarPointsTo(from,ctx,value,hctx).
in file main.dl [775:1-778:41])_");
if(!(rel_delta_VarPointsTo_16577dc30fb04e76->empty()) && !(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreIndex_bab2c0876dfa7ece->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt,rel_delta_VarPointsTo_16577dc30fb04e76->createContext());
CREATE_OP_CONTEXT(rel_new_IndexContentPointsTo_b75799237eab2896_op_ctxt,rel_new_IndexContentPointsTo_b75799237eab2896->createContext());
CREATE_OP_CONTEXT(rel_IndexContentPointsTo_db1dfbfa873aff0a_op_ctxt,rel_IndexContentPointsTo_db1dfbfa873aff0a->createContext());
CREATE_OP_CONTEXT(rel_StoreIndex_bab2c0876dfa7ece_op_ctxt,rel_StoreIndex_bab2c0876dfa7ece->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreIndex_bab2c0876dfa7ece) {
auto range = rel_delta_VarPointsTo_16577dc30fb04e76->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_IndexContentPointsTo_db1dfbfa873aff0a->contains(Tuple<RamDomain,4>{{ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_IndexContentPointsTo_db1dfbfa873aff0a_op_ctxt))) && !(rel_delta_VarPointsTo_16577dc30fb04e76->contains(Tuple<RamDomain,4>{{ramBitCast(env0[2]),ramBitCast(env1[1]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env2[2]),ramBitCast(env2[3])}};
rel_new_IndexContentPointsTo_b75799237eab2896->insert(tuple,READ_OP_CONTEXT(rel_new_IndexContentPointsTo_b75799237eab2896_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(IndexContentPointsTo(baseValue,baseHctx,value,hctx) :- 
   StoreIndex(base,_,from),
   VarPointsTo(base,ctx,baseValue,baseHctx),
   VarPointsTo(from,ctx,value,hctx).
in file main.dl [775:1-778:41])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_delta_VarPointsTo_16577dc30fb04e76->empty()) && !(rel_StoreIndex_bab2c0876dfa7ece->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt,rel_delta_VarPointsTo_16577dc30fb04e76->createContext());
CREATE_OP_CONTEXT(rel_new_IndexContentPointsTo_b75799237eab2896_op_ctxt,rel_new_IndexContentPointsTo_b75799237eab2896->createContext());
CREATE_OP_CONTEXT(rel_IndexContentPointsTo_db1dfbfa873aff0a_op_ctxt,rel_IndexContentPointsTo_db1dfbfa873aff0a->createContext());
CREATE_OP_CONTEXT(rel_StoreIndex_bab2c0876dfa7ece_op_ctxt,rel_StoreIndex_bab2c0876dfa7ece->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreIndex_bab2c0876dfa7ece) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_delta_VarPointsTo_16577dc30fb04e76->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_IndexContentPointsTo_db1dfbfa873aff0a->contains(Tuple<RamDomain,4>{{ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_IndexContentPointsTo_db1dfbfa873aff0a_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env2[2]),ramBitCast(env2[3])}};
rel_new_IndexContentPointsTo_b75799237eab2896->insert(tuple,READ_OP_CONTEXT(rel_new_IndexContentPointsTo_b75799237eab2896_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(IndexContentPointsTo(baseValue,baseHctx,value,hctx) :- 
   StoreIndexSSA(_,base,_,from),
   VarPointsTo(base,ctx,baseValue,baseHctx),
   VarPointsTo(from,ctx,value,hctx).
in file main.dl [779:1-782:41])_");
if(!(rel_delta_VarPointsTo_16577dc30fb04e76->empty()) && !(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreIndexSSA_431249b1dfe65e85->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt,rel_delta_VarPointsTo_16577dc30fb04e76->createContext());
CREATE_OP_CONTEXT(rel_new_IndexContentPointsTo_b75799237eab2896_op_ctxt,rel_new_IndexContentPointsTo_b75799237eab2896->createContext());
CREATE_OP_CONTEXT(rel_IndexContentPointsTo_db1dfbfa873aff0a_op_ctxt,rel_IndexContentPointsTo_db1dfbfa873aff0a->createContext());
CREATE_OP_CONTEXT(rel_StoreIndexSSA_431249b1dfe65e85_op_ctxt,rel_StoreIndexSSA_431249b1dfe65e85->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreIndexSSA_431249b1dfe65e85) {
auto range = rel_delta_VarPointsTo_16577dc30fb04e76->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_IndexContentPointsTo_db1dfbfa873aff0a->contains(Tuple<RamDomain,4>{{ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_IndexContentPointsTo_db1dfbfa873aff0a_op_ctxt))) && !(rel_delta_VarPointsTo_16577dc30fb04e76->contains(Tuple<RamDomain,4>{{ramBitCast(env0[3]),ramBitCast(env1[1]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env2[2]),ramBitCast(env2[3])}};
rel_new_IndexContentPointsTo_b75799237eab2896->insert(tuple,READ_OP_CONTEXT(rel_new_IndexContentPointsTo_b75799237eab2896_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(IndexContentPointsTo(baseValue,baseHctx,value,hctx) :- 
   StoreIndexSSA(_,base,_,from),
   VarPointsTo(base,ctx,baseValue,baseHctx),
   VarPointsTo(from,ctx,value,hctx).
in file main.dl [779:1-782:41])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_delta_VarPointsTo_16577dc30fb04e76->empty()) && !(rel_StoreIndexSSA_431249b1dfe65e85->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt,rel_delta_VarPointsTo_16577dc30fb04e76->createContext());
CREATE_OP_CONTEXT(rel_new_IndexContentPointsTo_b75799237eab2896_op_ctxt,rel_new_IndexContentPointsTo_b75799237eab2896->createContext());
CREATE_OP_CONTEXT(rel_IndexContentPointsTo_db1dfbfa873aff0a_op_ctxt,rel_IndexContentPointsTo_db1dfbfa873aff0a->createContext());
CREATE_OP_CONTEXT(rel_StoreIndexSSA_431249b1dfe65e85_op_ctxt,rel_StoreIndexSSA_431249b1dfe65e85->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreIndexSSA_431249b1dfe65e85) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_delta_VarPointsTo_16577dc30fb04e76->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_IndexContentPointsTo_db1dfbfa873aff0a->contains(Tuple<RamDomain,4>{{ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_IndexContentPointsTo_db1dfbfa873aff0a_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env2[2]),ramBitCast(env2[3])}};
rel_new_IndexContentPointsTo_b75799237eab2896->insert(tuple,READ_OP_CONTEXT(rel_new_IndexContentPointsTo_b75799237eab2896_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(IndexContentPointsTo(toValue,toHctx,value,hctx) :- 
   LoadSlice(to,from,st,ed,step),
   SliceIndex(st,ed,step,_),
   VarPointsTo(to,ctx,toValue,toHctx),
   VarPointsTo(from,ctx,fromValue,fromHctx),
   IndexContentPointsTo(fromValue,fromHctx,value,hctx).
in file main.dl [792:1-797:60])_");
if(!(rel_SliceIndex_7426c9b7afc02920->empty()) && !(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_delta_VarPointsTo_16577dc30fb04e76->empty()) && !(rel_IndexContentPointsTo_db1dfbfa873aff0a->empty()) && !(rel_LoadSlice_e590a0ee3f45cac8->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_IndexContentPointsTo_0515756a33abb518_op_ctxt,rel_delta_IndexContentPointsTo_0515756a33abb518->createContext());
CREATE_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt,rel_delta_VarPointsTo_16577dc30fb04e76->createContext());
CREATE_OP_CONTEXT(rel_new_IndexContentPointsTo_b75799237eab2896_op_ctxt,rel_new_IndexContentPointsTo_b75799237eab2896->createContext());
CREATE_OP_CONTEXT(rel_IndexContentPointsTo_db1dfbfa873aff0a_op_ctxt,rel_IndexContentPointsTo_db1dfbfa873aff0a->createContext());
CREATE_OP_CONTEXT(rel_LoadSlice_e590a0ee3f45cac8_op_ctxt,rel_LoadSlice_e590a0ee3f45cac8->createContext());
CREATE_OP_CONTEXT(rel_SliceIndex_7426c9b7afc02920_op_ctxt,rel_SliceIndex_7426c9b7afc02920->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_LoadSlice_e590a0ee3f45cac8) {
if( !rel_SliceIndex_7426c9b7afc02920->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env0[3]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env0[3]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_SliceIndex_7426c9b7afc02920_op_ctxt)).empty()) {
auto range = rel_delta_VarPointsTo_16577dc30fb04e76->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_delta_VarPointsTo_16577dc30fb04e76->contains(Tuple<RamDomain,4>{{ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt)))) {
auto range = rel_IndexContentPointsTo_db1dfbfa873aff0a->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env2[2]), ramBitCast(env2[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[2]), ramBitCast(env2[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_IndexContentPointsTo_db1dfbfa873aff0a_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_IndexContentPointsTo_db1dfbfa873aff0a->contains(Tuple<RamDomain,4>{{ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env3[2]),ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_IndexContentPointsTo_db1dfbfa873aff0a_op_ctxt))) && !(rel_delta_IndexContentPointsTo_0515756a33abb518->contains(Tuple<RamDomain,4>{{ramBitCast(env2[2]),ramBitCast(env2[3]),ramBitCast(env3[2]),ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_delta_IndexContentPointsTo_0515756a33abb518_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env3[2]),ramBitCast(env3[3])}};
rel_new_IndexContentPointsTo_b75799237eab2896->insert(tuple,READ_OP_CONTEXT(rel_new_IndexContentPointsTo_b75799237eab2896_op_ctxt));
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(IndexContentPointsTo(toValue,toHctx,value,hctx) :- 
   LoadSlice(to,from,st,ed,step),
   SliceIndex(st,ed,step,_),
   VarPointsTo(to,ctx,toValue,toHctx),
   VarPointsTo(from,ctx,fromValue,fromHctx),
   IndexContentPointsTo(fromValue,fromHctx,value,hctx).
in file main.dl [792:1-797:60])_");
if(!(rel_SliceIndex_7426c9b7afc02920->empty()) && !(rel_delta_VarPointsTo_16577dc30fb04e76->empty()) && !(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_IndexContentPointsTo_db1dfbfa873aff0a->empty()) && !(rel_LoadSlice_e590a0ee3f45cac8->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_IndexContentPointsTo_0515756a33abb518_op_ctxt,rel_delta_IndexContentPointsTo_0515756a33abb518->createContext());
CREATE_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt,rel_delta_VarPointsTo_16577dc30fb04e76->createContext());
CREATE_OP_CONTEXT(rel_new_IndexContentPointsTo_b75799237eab2896_op_ctxt,rel_new_IndexContentPointsTo_b75799237eab2896->createContext());
CREATE_OP_CONTEXT(rel_IndexContentPointsTo_db1dfbfa873aff0a_op_ctxt,rel_IndexContentPointsTo_db1dfbfa873aff0a->createContext());
CREATE_OP_CONTEXT(rel_LoadSlice_e590a0ee3f45cac8_op_ctxt,rel_LoadSlice_e590a0ee3f45cac8->createContext());
CREATE_OP_CONTEXT(rel_SliceIndex_7426c9b7afc02920_op_ctxt,rel_SliceIndex_7426c9b7afc02920->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_LoadSlice_e590a0ee3f45cac8) {
if( !rel_SliceIndex_7426c9b7afc02920->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env0[3]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env0[3]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_SliceIndex_7426c9b7afc02920_op_ctxt)).empty()) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_delta_VarPointsTo_16577dc30fb04e76->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_IndexContentPointsTo_db1dfbfa873aff0a->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env2[2]), ramBitCast(env2[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[2]), ramBitCast(env2[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_IndexContentPointsTo_db1dfbfa873aff0a_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_IndexContentPointsTo_db1dfbfa873aff0a->contains(Tuple<RamDomain,4>{{ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env3[2]),ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_IndexContentPointsTo_db1dfbfa873aff0a_op_ctxt))) && !(rel_delta_IndexContentPointsTo_0515756a33abb518->contains(Tuple<RamDomain,4>{{ramBitCast(env2[2]),ramBitCast(env2[3]),ramBitCast(env3[2]),ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_delta_IndexContentPointsTo_0515756a33abb518_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env3[2]),ramBitCast(env3[3])}};
rel_new_IndexContentPointsTo_b75799237eab2896->insert(tuple,READ_OP_CONTEXT(rel_new_IndexContentPointsTo_b75799237eab2896_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(IndexContentPointsTo(toValue,toHctx,value,hctx) :- 
   LoadSlice(to,from,st,ed,step),
   SliceIndex(st,ed,step,_),
   VarPointsTo(to,ctx,toValue,toHctx),
   VarPointsTo(from,ctx,fromValue,fromHctx),
   IndexContentPointsTo(fromValue,fromHctx,value,hctx).
in file main.dl [792:1-797:60])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_LoadSlice_e590a0ee3f45cac8->empty()) && !(rel_delta_IndexContentPointsTo_0515756a33abb518->empty()) && !(rel_SliceIndex_7426c9b7afc02920->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_IndexContentPointsTo_0515756a33abb518_op_ctxt,rel_delta_IndexContentPointsTo_0515756a33abb518->createContext());
CREATE_OP_CONTEXT(rel_new_IndexContentPointsTo_b75799237eab2896_op_ctxt,rel_new_IndexContentPointsTo_b75799237eab2896->createContext());
CREATE_OP_CONTEXT(rel_IndexContentPointsTo_db1dfbfa873aff0a_op_ctxt,rel_IndexContentPointsTo_db1dfbfa873aff0a->createContext());
CREATE_OP_CONTEXT(rel_LoadSlice_e590a0ee3f45cac8_op_ctxt,rel_LoadSlice_e590a0ee3f45cac8->createContext());
CREATE_OP_CONTEXT(rel_SliceIndex_7426c9b7afc02920_op_ctxt,rel_SliceIndex_7426c9b7afc02920->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_LoadSlice_e590a0ee3f45cac8) {
if( !rel_SliceIndex_7426c9b7afc02920->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env0[3]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env0[3]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_SliceIndex_7426c9b7afc02920_op_ctxt)).empty()) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_delta_IndexContentPointsTo_0515756a33abb518->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env2[2]), ramBitCast(env2[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[2]), ramBitCast(env2[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_IndexContentPointsTo_0515756a33abb518_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_IndexContentPointsTo_db1dfbfa873aff0a->contains(Tuple<RamDomain,4>{{ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env3[2]),ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_IndexContentPointsTo_db1dfbfa873aff0a_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env3[2]),ramBitCast(env3[3])}};
rel_new_IndexContentPointsTo_b75799237eab2896->insert(tuple,READ_OP_CONTEXT(rel_new_IndexContentPointsTo_b75799237eab2896_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(VarPointsTo(to,ctx,value,hctx) :- 
   AssignVar(to,from),
   VarPointsTo(from,ctx,value,hctx).
in file main.dl [716:1-718:41])_");
if(!(rel_AssignVar_b173aa4bb6352b3a->empty()) && !(rel_delta_VarPointsTo_16577dc30fb04e76->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt,rel_delta_VarPointsTo_16577dc30fb04e76->createContext());
CREATE_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt,rel_new_VarPointsTo_5ea2db765d05791c->createContext());
CREATE_OP_CONTEXT(rel_AssignVar_b173aa4bb6352b3a_op_ctxt,rel_AssignVar_b173aa4bb6352b3a->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_AssignVar_b173aa4bb6352b3a) {
auto range = rel_delta_VarPointsTo_16577dc30fb04e76->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_VarPointsTo_c1a9f897b9f324f0->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}};
rel_new_VarPointsTo_5ea2db765d05791c->insert(tuple,READ_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(VarPointsTo(to,meth_ctx,value,hctx) :- 
   AssignGlobal(to,from),
   VarInMethod(to,meth),
   Reachable(meth,meth_ctx),
   VarPointsTo(from,_,value,hctx).
in file main.dl [721:1-725:39])_");
if(!(rel_VarInMethod_a7f53498a99fbbab->empty()) && !(rel_Reachable_60cce6ab70e369f7->empty()) && !(rel_AssignGlobal_f60b14713e1f1ab7->empty()) && !(rel_delta_VarPointsTo_16577dc30fb04e76->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt,rel_delta_VarPointsTo_16577dc30fb04e76->createContext());
CREATE_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt,rel_new_VarPointsTo_5ea2db765d05791c->createContext());
CREATE_OP_CONTEXT(rel_AssignGlobal_f60b14713e1f1ab7_op_ctxt,rel_AssignGlobal_f60b14713e1f1ab7->createContext());
CREATE_OP_CONTEXT(rel_Reachable_60cce6ab70e369f7_op_ctxt,rel_Reachable_60cce6ab70e369f7->createContext());
CREATE_OP_CONTEXT(rel_VarInMethod_a7f53498a99fbbab_op_ctxt,rel_VarInMethod_a7f53498a99fbbab->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_AssignGlobal_f60b14713e1f1ab7) {
auto range = rel_VarInMethod_a7f53498a99fbbab->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarInMethod_a7f53498a99fbbab_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_Reachable_60cce6ab70e369f7->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_Reachable_60cce6ab70e369f7_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_delta_VarPointsTo_16577dc30fb04e76->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt));
for(const auto& env3 : range) {
if( !(rel_VarPointsTo_c1a9f897b9f324f0->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env3[2]),ramBitCast(env3[3])}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env3[2]),ramBitCast(env3[3])}};
rel_new_VarPointsTo_5ea2db765d05791c->insert(tuple,READ_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(VarPointsTo(to,ctx,value,hctx) :- 
   LoadField(to,base,_),
   VarPointsTo(base,ctx,value,hctx).
in file main.dl [730:1-732:41])_");
if(!(rel_LoadField_6018b2c33f454495->empty()) && !(rel_delta_VarPointsTo_16577dc30fb04e76->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt,rel_delta_VarPointsTo_16577dc30fb04e76->createContext());
CREATE_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt,rel_new_VarPointsTo_5ea2db765d05791c->createContext());
CREATE_OP_CONTEXT(rel_LoadField_6018b2c33f454495_op_ctxt,rel_LoadField_6018b2c33f454495->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_LoadField_6018b2c33f454495) {
auto range = rel_delta_VarPointsTo_16577dc30fb04e76->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_VarPointsTo_c1a9f897b9f324f0->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}};
rel_new_VarPointsTo_5ea2db765d05791c->insert(tuple,READ_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(VarPointsTo(to,ctx,value,hctx) :- 
   LoadField(to,base,fld),
   VarPointsTo(base,ctx,baseValue,baseHctx),
   FieldPointsTo(baseValue,baseHctx,fld,value,hctx).
in file main.dl [733:1-736:58])_");
if(!(rel_delta_VarPointsTo_16577dc30fb04e76->empty()) && !(rel_FieldPointsTo_79eb0e1cfe8639b3->empty()) && !(rel_LoadField_6018b2c33f454495->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_FieldPointsTo_6e98ef2bb9d48d3a_op_ctxt,rel_delta_FieldPointsTo_6e98ef2bb9d48d3a->createContext());
CREATE_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt,rel_delta_VarPointsTo_16577dc30fb04e76->createContext());
CREATE_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt,rel_new_VarPointsTo_5ea2db765d05791c->createContext());
CREATE_OP_CONTEXT(rel_FieldPointsTo_79eb0e1cfe8639b3_op_ctxt,rel_FieldPointsTo_79eb0e1cfe8639b3->createContext());
CREATE_OP_CONTEXT(rel_LoadField_6018b2c33f454495_op_ctxt,rel_LoadField_6018b2c33f454495->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_LoadField_6018b2c33f454495) {
auto range = rel_delta_VarPointsTo_16577dc30fb04e76->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_FieldPointsTo_79eb0e1cfe8639b3->lowerUpperRange_11100(Tuple<RamDomain,5>{{ramBitCast(env1[2]), ramBitCast(env1[3]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env1[2]), ramBitCast(env1[3]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FieldPointsTo_79eb0e1cfe8639b3_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_VarPointsTo_c1a9f897b9f324f0->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env2[3]),ramBitCast(env2[4])}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt))) && !(rel_delta_FieldPointsTo_6e98ef2bb9d48d3a->contains(Tuple<RamDomain,5>{{ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env0[2]),ramBitCast(env2[3]),ramBitCast(env2[4])}},READ_OP_CONTEXT(rel_delta_FieldPointsTo_6e98ef2bb9d48d3a_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env2[3]),ramBitCast(env2[4])}};
rel_new_VarPointsTo_5ea2db765d05791c->insert(tuple,READ_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(VarPointsTo(to,ctx,value,hctx) :- 
   LoadField(to,base,fld),
   VarPointsTo(base,ctx,baseValue,baseHctx),
   FieldPointsTo(baseValue,baseHctx,fld,value,hctx).
in file main.dl [733:1-736:58])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_delta_FieldPointsTo_6e98ef2bb9d48d3a->empty()) && !(rel_LoadField_6018b2c33f454495->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_FieldPointsTo_6e98ef2bb9d48d3a_op_ctxt,rel_delta_FieldPointsTo_6e98ef2bb9d48d3a->createContext());
CREATE_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt,rel_new_VarPointsTo_5ea2db765d05791c->createContext());
CREATE_OP_CONTEXT(rel_LoadField_6018b2c33f454495_op_ctxt,rel_LoadField_6018b2c33f454495->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_LoadField_6018b2c33f454495) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_delta_FieldPointsTo_6e98ef2bb9d48d3a->lowerUpperRange_11100(Tuple<RamDomain,5>{{ramBitCast(env1[2]), ramBitCast(env1[3]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env1[2]), ramBitCast(env1[3]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_FieldPointsTo_6e98ef2bb9d48d3a_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_VarPointsTo_c1a9f897b9f324f0->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env2[3]),ramBitCast(env2[4])}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env2[3]),ramBitCast(env2[4])}};
rel_new_VarPointsTo_5ea2db765d05791c->insert(tuple,READ_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(VarPointsTo(to,ctx,value,hctx) :- 
   LoadIndex(to,base,_),
   VarPointsTo(base,ctx,value,hctx).
in file main.dl [749:1-751:41])_");
if(!(rel_LoadIndex_3a07e512c7efb9bd->empty()) && !(rel_delta_VarPointsTo_16577dc30fb04e76->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt,rel_delta_VarPointsTo_16577dc30fb04e76->createContext());
CREATE_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt,rel_new_VarPointsTo_5ea2db765d05791c->createContext());
CREATE_OP_CONTEXT(rel_LoadIndex_3a07e512c7efb9bd_op_ctxt,rel_LoadIndex_3a07e512c7efb9bd->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_LoadIndex_3a07e512c7efb9bd) {
auto range = rel_delta_VarPointsTo_16577dc30fb04e76->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_VarPointsTo_c1a9f897b9f324f0->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}};
rel_new_VarPointsTo_5ea2db765d05791c->insert(tuple,READ_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(VarPointsTo(to,ctx,value,hctx) :- 
   LoadIndex(to,base,_),
   VarPointsTo(base,ctx,baseValue,baseHctx),
   IndexContentPointsTo(baseValue,baseHctx,value,hctx).
in file main.dl [765:1-768:60])_");
if(!(rel_delta_VarPointsTo_16577dc30fb04e76->empty()) && !(rel_IndexContentPointsTo_db1dfbfa873aff0a->empty()) && !(rel_LoadIndex_3a07e512c7efb9bd->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_IndexContentPointsTo_0515756a33abb518_op_ctxt,rel_delta_IndexContentPointsTo_0515756a33abb518->createContext());
CREATE_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt,rel_delta_VarPointsTo_16577dc30fb04e76->createContext());
CREATE_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt,rel_new_VarPointsTo_5ea2db765d05791c->createContext());
CREATE_OP_CONTEXT(rel_IndexContentPointsTo_db1dfbfa873aff0a_op_ctxt,rel_IndexContentPointsTo_db1dfbfa873aff0a->createContext());
CREATE_OP_CONTEXT(rel_LoadIndex_3a07e512c7efb9bd_op_ctxt,rel_LoadIndex_3a07e512c7efb9bd->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_LoadIndex_3a07e512c7efb9bd) {
auto range = rel_delta_VarPointsTo_16577dc30fb04e76->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_IndexContentPointsTo_db1dfbfa873aff0a->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env1[2]), ramBitCast(env1[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[2]), ramBitCast(env1[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_IndexContentPointsTo_db1dfbfa873aff0a_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_VarPointsTo_c1a9f897b9f324f0->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt))) && !(rel_delta_IndexContentPointsTo_0515756a33abb518->contains(Tuple<RamDomain,4>{{ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_delta_IndexContentPointsTo_0515756a33abb518_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env2[2]),ramBitCast(env2[3])}};
rel_new_VarPointsTo_5ea2db765d05791c->insert(tuple,READ_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(VarPointsTo(to,ctx,value,hctx) :- 
   LoadIndex(to,base,_),
   VarPointsTo(base,ctx,baseValue,baseHctx),
   IndexContentPointsTo(baseValue,baseHctx,value,hctx).
in file main.dl [765:1-768:60])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_delta_IndexContentPointsTo_0515756a33abb518->empty()) && !(rel_LoadIndex_3a07e512c7efb9bd->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_IndexContentPointsTo_0515756a33abb518_op_ctxt,rel_delta_IndexContentPointsTo_0515756a33abb518->createContext());
CREATE_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt,rel_new_VarPointsTo_5ea2db765d05791c->createContext());
CREATE_OP_CONTEXT(rel_LoadIndex_3a07e512c7efb9bd_op_ctxt,rel_LoadIndex_3a07e512c7efb9bd->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_LoadIndex_3a07e512c7efb9bd) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_delta_IndexContentPointsTo_0515756a33abb518->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env1[2]), ramBitCast(env1[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[2]), ramBitCast(env1[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_IndexContentPointsTo_0515756a33abb518_op_ctxt));
for(const auto& env2 : range) {
if( !(rel_VarPointsTo_c1a9f897b9f324f0->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env2[2]),ramBitCast(env2[3])}};
rel_new_VarPointsTo_5ea2db765d05791c->insert(tuple,READ_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(VarPointsTo(base,ctx,value,hctx) :- 
   StoreSlice(base,_,_,_,from),
   VarPointsTo(from,ctx,value,hctx).
in file main.dl [813:1-815:41])_");
if(!(rel_StoreSlice_2d8a31bc728a3bbd->empty()) && !(rel_delta_VarPointsTo_16577dc30fb04e76->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt,rel_delta_VarPointsTo_16577dc30fb04e76->createContext());
CREATE_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt,rel_new_VarPointsTo_5ea2db765d05791c->createContext());
CREATE_OP_CONTEXT(rel_StoreSlice_2d8a31bc728a3bbd_op_ctxt,rel_StoreSlice_2d8a31bc728a3bbd->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreSlice_2d8a31bc728a3bbd) {
auto range = rel_delta_VarPointsTo_16577dc30fb04e76->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_VarPointsTo_c1a9f897b9f324f0->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}};
rel_new_VarPointsTo_5ea2db765d05791c->insert(tuple,READ_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(VarPointsTo(base,ctx,value,hctx) :- 
   StoreSliceSSA(_,base,_,_,_,from),
   VarPointsTo(from,ctx,value,hctx).
in file main.dl [813:1-815:41])_");
if(!(rel_StoreSliceSSA_f26b3c4e2aecada2->empty()) && !(rel_delta_VarPointsTo_16577dc30fb04e76->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt,rel_delta_VarPointsTo_16577dc30fb04e76->createContext());
CREATE_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt,rel_new_VarPointsTo_5ea2db765d05791c->createContext());
CREATE_OP_CONTEXT(rel_StoreSliceSSA_f26b3c4e2aecada2_op_ctxt,rel_StoreSliceSSA_f26b3c4e2aecada2->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreSliceSSA_f26b3c4e2aecada2) {
auto range = rel_delta_VarPointsTo_16577dc30fb04e76->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[5]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[5]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_VarPointsTo_c1a9f897b9f324f0->contains(Tuple<RamDomain,4>{{ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}};
rel_new_VarPointsTo_5ea2db765d05791c->insert(tuple,READ_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(VarPointsTo(new_base,ctx,baseValue,hctx) :- 
   StoreIndexSSA(new_base,base,_,_),
   VarPointsTo(base,ctx,baseValue,hctx).
in file main.dl [818:1-820:45])_");
if(!(rel_StoreIndexSSA_431249b1dfe65e85->empty()) && !(rel_delta_VarPointsTo_16577dc30fb04e76->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt,rel_delta_VarPointsTo_16577dc30fb04e76->createContext());
CREATE_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt,rel_new_VarPointsTo_5ea2db765d05791c->createContext());
CREATE_OP_CONTEXT(rel_StoreIndexSSA_431249b1dfe65e85_op_ctxt,rel_StoreIndexSSA_431249b1dfe65e85->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreIndexSSA_431249b1dfe65e85) {
auto range = rel_delta_VarPointsTo_16577dc30fb04e76->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_VarPointsTo_c1a9f897b9f324f0->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}};
rel_new_VarPointsTo_5ea2db765d05791c->insert(tuple,READ_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(VarPointsTo(new_base,ctx,baseValue,hctx) :- 
   StoreFieldSSA(new_base,base,_,_),
   VarPointsTo(base,ctx,baseValue,hctx).
in file main.dl [818:1-820:45])_");
if(!(rel_StoreFieldSSA_051b143b9d011002->empty()) && !(rel_delta_VarPointsTo_16577dc30fb04e76->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt,rel_delta_VarPointsTo_16577dc30fb04e76->createContext());
CREATE_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt,rel_new_VarPointsTo_5ea2db765d05791c->createContext());
CREATE_OP_CONTEXT(rel_StoreFieldSSA_051b143b9d011002_op_ctxt,rel_StoreFieldSSA_051b143b9d011002->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreFieldSSA_051b143b9d011002) {
auto range = rel_delta_VarPointsTo_16577dc30fb04e76->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_VarPointsTo_c1a9f897b9f324f0->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}};
rel_new_VarPointsTo_5ea2db765d05791c->insert(tuple,READ_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(VarPointsTo(new_base,ctx,baseValue,hctx) :- 
   StoreSliceSSA(new_base,base,_,_,_,_),
   VarPointsTo(base,ctx,baseValue,hctx).
in file main.dl [818:1-820:45])_");
if(!(rel_StoreSliceSSA_f26b3c4e2aecada2->empty()) && !(rel_delta_VarPointsTo_16577dc30fb04e76->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt,rel_delta_VarPointsTo_16577dc30fb04e76->createContext());
CREATE_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt,rel_new_VarPointsTo_5ea2db765d05791c->createContext());
CREATE_OP_CONTEXT(rel_StoreSliceSSA_f26b3c4e2aecada2_op_ctxt,rel_StoreSliceSSA_f26b3c4e2aecada2->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreSliceSSA_f26b3c4e2aecada2) {
auto range = rel_delta_VarPointsTo_16577dc30fb04e76->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_VarPointsTo_c1a9f897b9f324f0->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}};
rel_new_VarPointsTo_5ea2db765d05791c->insert(tuple,READ_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(VarPointsTo(to,ctx,value,hctx) :- 
   MethodSSA(to_idx,from_idx,meth),
   CallGraphEdge(invo,ctx,meth,_),
   ActualParam(from_idx,invo,from),
   ActualReturn(to_idx,invo,to),
   VarPointsTo(from,ctx,value,hctx).
in file main.dl [822:1-827:41])_");
if(!(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_ActualReturn_8bc9db09e057aa22->empty()) && !(rel_ActualParam_b7a735170493e717->empty()) && !(rel_delta_VarPointsTo_16577dc30fb04e76->empty()) && !(rel_MethodSSA_a9f7ed6321abcd80->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt,rel_delta_VarPointsTo_16577dc30fb04e76->createContext());
CREATE_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt,rel_new_VarPointsTo_5ea2db765d05791c->createContext());
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt,rel_ActualReturn_8bc9db09e057aa22->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_MethodSSA_a9f7ed6321abcd80_op_ctxt,rel_MethodSSA_a9f7ed6321abcd80->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_MethodSSA_a9f7ed6321abcd80) {
auto range = rel_CallGraphEdge_333c9d69fed5eee7->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_ActualReturn_8bc9db09e057aa22->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_delta_VarPointsTo_16577dc30fb04e76->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env2[2]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[2]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt));
for(const auto& env4 : range) {
if( !(rel_VarPointsTo_c1a9f897b9f324f0->contains(Tuple<RamDomain,4>{{ramBitCast(env3[2]),ramBitCast(env1[1]),ramBitCast(env4[2]),ramBitCast(env4[3])}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env3[2]),ramBitCast(env1[1]),ramBitCast(env4[2]),ramBitCast(env4[3])}};
rel_new_VarPointsTo_5ea2db765d05791c->insert(tuple,READ_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(VarPointsTo(to,toCtx,value,hctx) :- 
   InterProcAssign(to,toCtx,from,fromCtx),
   VarPointsTo(from,fromCtx,value,hctx).
in file main.dl [862:1-864:45])_");
if(!(rel_InterProcAssign_bed60ee93a02e127->empty()) && !(rel_delta_VarPointsTo_16577dc30fb04e76->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt,rel_delta_VarPointsTo_16577dc30fb04e76->createContext());
CREATE_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt,rel_new_VarPointsTo_5ea2db765d05791c->createContext());
CREATE_OP_CONTEXT(rel_InterProcAssign_bed60ee93a02e127_op_ctxt,rel_InterProcAssign_bed60ee93a02e127->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_InterProcAssign_bed60ee93a02e127) {
auto range = rel_delta_VarPointsTo_16577dc30fb04e76->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_VarPointsTo_16577dc30fb04e76_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_VarPointsTo_c1a9f897b9f324f0->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}};
rel_new_VarPointsTo_5ea2db765d05791c->insert(tuple,READ_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt));
}
}
}
}
();}
if(rel_new_FieldPointsTo_b27ef2e9e0cb7cd8->empty() && rel_new_IndexContentPointsTo_b75799237eab2896->empty() && rel_new_VarPointsTo_5ea2db765d05791c->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_new_FieldPointsTo_b27ef2e9e0cb7cd8_op_ctxt,rel_new_FieldPointsTo_b27ef2e9e0cb7cd8->createContext());
CREATE_OP_CONTEXT(rel_FieldPointsTo_79eb0e1cfe8639b3_op_ctxt,rel_FieldPointsTo_79eb0e1cfe8639b3->createContext());
for(const auto& env0 : *rel_new_FieldPointsTo_b27ef2e9e0cb7cd8) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_FieldPointsTo_79eb0e1cfe8639b3->insert(tuple,READ_OP_CONTEXT(rel_FieldPointsTo_79eb0e1cfe8639b3_op_ctxt));
}
}
();std::swap(rel_delta_FieldPointsTo_6e98ef2bb9d48d3a, rel_new_FieldPointsTo_b27ef2e9e0cb7cd8);
rel_new_FieldPointsTo_b27ef2e9e0cb7cd8->purge();
[&](){
CREATE_OP_CONTEXT(rel_new_IndexContentPointsTo_b75799237eab2896_op_ctxt,rel_new_IndexContentPointsTo_b75799237eab2896->createContext());
CREATE_OP_CONTEXT(rel_IndexContentPointsTo_db1dfbfa873aff0a_op_ctxt,rel_IndexContentPointsTo_db1dfbfa873aff0a->createContext());
for(const auto& env0 : *rel_new_IndexContentPointsTo_b75799237eab2896) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_IndexContentPointsTo_db1dfbfa873aff0a->insert(tuple,READ_OP_CONTEXT(rel_IndexContentPointsTo_db1dfbfa873aff0a_op_ctxt));
}
}
();std::swap(rel_delta_IndexContentPointsTo_0515756a33abb518, rel_new_IndexContentPointsTo_b75799237eab2896);
rel_new_IndexContentPointsTo_b75799237eab2896->purge();
[&](){
CREATE_OP_CONTEXT(rel_new_VarPointsTo_5ea2db765d05791c_op_ctxt,rel_new_VarPointsTo_5ea2db765d05791c->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_new_VarPointsTo_5ea2db765d05791c) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_VarPointsTo_c1a9f897b9f324f0->insert(tuple,READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
}
}
();std::swap(rel_delta_VarPointsTo_16577dc30fb04e76, rel_new_VarPointsTo_5ea2db765d05791c);
rel_new_VarPointsTo_5ea2db765d05791c->purge();
iter++;
}
iter = 0;
rel_delta_FieldPointsTo_6e98ef2bb9d48d3a->purge();
rel_new_FieldPointsTo_b27ef2e9e0cb7cd8->purge();
rel_delta_IndexContentPointsTo_0515756a33abb518->purge();
rel_new_IndexContentPointsTo_b75799237eab2896->purge();
rel_delta_VarPointsTo_16577dc30fb04e76->purge();
rel_new_VarPointsTo_5ea2db765d05791c->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","base\tbaseHctx\tfield\tvalue\thctx"},{"auxArity","0"},{"name","FieldPointsTo"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"base\", \"baseHctx\", \"field\", \"value\", \"hctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Value\", \"r:HContext\", \"s:Field\", \"s:Value\", \"r:HContext\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_FieldPointsTo_79eb0e1cfe8639b3);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","baseValue\tbaseHctx\tvalue\thctx"},{"auxArity","0"},{"name","IndexContentPointsTo"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"baseValue\", \"baseHctx\", \"value\", \"hctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Value\", \"r:HContext\", \"s:Value\", \"r:HContext\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_IndexContentPointsTo_db1dfbfa873aff0a);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","var\tctx\tvalue\thctx"},{"auxArity","0"},{"name","VarPointsTo"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"var\", \"ctx\", \"value\", \"hctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Var\", \"r:Context\", \"s:Value\", \"r:HContext\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_VarPointsTo_c1a9f897b9f324f0);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_Alloc_31bbfa07060a4241->purge();
if (pruneImdtRels) rel_Reachable_60cce6ab70e369f7->purge();
if (pruneImdtRels) rel_SliceIndex_7426c9b7afc02920->purge();
if (pruneImdtRels) rel_VarInMethod_a7f53498a99fbbab->purge();
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_FilteredMethod_87482e51e6945a84 {
public:
 Stratum_FilteredMethod_87482e51e6945a84(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_i__0__1::Type& rel_FilteredMethod_3007b0a4b117f645);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_i__0__1::Type* rel_FilteredMethod_3007b0a4b117f645;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_FilteredMethod_87482e51e6945a84::Stratum_FilteredMethod_87482e51e6945a84(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_i__0__1::Type& rel_FilteredMethod_3007b0a4b117f645):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_FilteredMethod_3007b0a4b117f645(&rel_FilteredMethod_3007b0a4b117f645){
}

void Stratum_FilteredMethod_87482e51e6945a84::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(FilteredMethod("__phi__").
in file main.dl [100:1-102:60])_");
[&](){
CREATE_OP_CONTEXT(rel_FilteredMethod_3007b0a4b117f645_op_ctxt,rel_FilteredMethod_3007b0a4b117f645->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(3))}};
rel_FilteredMethod_3007b0a4b117f645->insert(tuple,READ_OP_CONTEXT(rel_FilteredMethod_3007b0a4b117f645_op_ctxt));
}
();signalHandler->setMsg(R"_(FilteredMethod("set_field_wrapper").
in file main.dl [100:1-102:60])_");
[&](){
CREATE_OP_CONTEXT(rel_FilteredMethod_3007b0a4b117f645_op_ctxt,rel_FilteredMethod_3007b0a4b117f645->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(4))}};
rel_FilteredMethod_3007b0a4b117f645->insert(tuple,READ_OP_CONTEXT(rel_FilteredMethod_3007b0a4b117f645_op_ctxt));
}
();signalHandler->setMsg(R"_(FilteredMethod("set_index_wrapper").
in file main.dl [100:1-102:60])_");
[&](){
CREATE_OP_CONTEXT(rel_FilteredMethod_3007b0a4b117f645_op_ctxt,rel_FilteredMethod_3007b0a4b117f645->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(5))}};
rel_FilteredMethod_3007b0a4b117f645->insert(tuple,READ_OP_CONTEXT(rel_FilteredMethod_3007b0a4b117f645_op_ctxt));
}
();signalHandler->setMsg(R"_(FilteredMethod("set_slice_wrapper").
in file main.dl [100:1-102:60])_");
[&](){
CREATE_OP_CONTEXT(rel_FilteredMethod_3007b0a4b117f645_op_ctxt,rel_FilteredMethod_3007b0a4b117f645->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(6))}};
rel_FilteredMethod_3007b0a4b117f645->insert(tuple,READ_OP_CONTEXT(rel_FilteredMethod_3007b0a4b117f645_op_ctxt));
}
();}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_FilteredTests_8cb12147c570b579 {
public:
 Stratum_FilteredTests_8cb12147c570b579(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_DataOverlap_5a4300eece6cb523,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_FilteredTests_bd4cd275bd1cb347,t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type& rel_FlowFromExtended_7fd58681b534e204,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPair_a5a4124c4969f589,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_ScoredDataWithModel_55bb6aafc5a52e34,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TestDataWithModel_2269d730f5799893,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__0_1_2_3__1111::Type* rel_DataOverlap_5a4300eece6cb523;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_FilteredTests_bd4cd275bd1cb347;
t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type* rel_FlowFromExtended_7fd58681b534e204;
t_btree_iiii__0_1_2_3__1111::Type* rel_ModelPair_a5a4124c4969f589;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel_ScoredDataWithModel_55bb6aafc5a52e34;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_TestDataWithModel_2269d730f5799893;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_TrainingDataWithModel_bf0078ce702b39b8;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_FilteredTests_8cb12147c570b579::Stratum_FilteredTests_8cb12147c570b579(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_DataOverlap_5a4300eece6cb523,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_FilteredTests_bd4cd275bd1cb347,t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type& rel_FlowFromExtended_7fd58681b534e204,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPair_a5a4124c4969f589,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_ScoredDataWithModel_55bb6aafc5a52e34,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TestDataWithModel_2269d730f5799893,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_DataOverlap_5a4300eece6cb523(&rel_DataOverlap_5a4300eece6cb523),
rel_FilteredTests_bd4cd275bd1cb347(&rel_FilteredTests_bd4cd275bd1cb347),
rel_FlowFromExtended_7fd58681b534e204(&rel_FlowFromExtended_7fd58681b534e204),
rel_ModelPair_a5a4124c4969f589(&rel_ModelPair_a5a4124c4969f589),
rel_ScoredDataWithModel_55bb6aafc5a52e34(&rel_ScoredDataWithModel_55bb6aafc5a52e34),
rel_TestDataWithModel_2269d730f5799893(&rel_TestDataWithModel_2269d730f5799893),
rel_TrainingDataWithModel_bf0078ce702b39b8(&rel_TrainingDataWithModel_bf0078ce702b39b8){
}

void Stratum_FilteredTests_8cb12147c570b579::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(FilteredTests(testModel,test,invo,meth,ctx1) :- 
   ModelPair(testModel,ctx1,trainModel,ctx2),
   TrainingDataWithModel(trainModel,_,_,_,ctx2),
   TestDataWithModel(testModel,test,invo,meth,ctx1),
   ScoredDataWithModel(scoreModel,data,_,_,ctx3),
   !FlowFromExtended(testModel,ctx1,scoreModel,ctx3,_),
   !FlowFromExtended(scoreModel,ctx3,testModel,ctx1,_),
   DataOverlap(test,ctx1,data,ctx3).
in file main.dl [1388:1-1395:41])_");
if(!(rel_TrainingDataWithModel_bf0078ce702b39b8->empty()) && !(rel_ScoredDataWithModel_55bb6aafc5a52e34->empty()) && !(rel_TestDataWithModel_2269d730f5799893->empty()) && !(rel_DataOverlap_5a4300eece6cb523->empty()) && !(rel_ModelPair_a5a4124c4969f589->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt,rel_DataOverlap_5a4300eece6cb523->createContext());
CREATE_OP_CONTEXT(rel_FilteredTests_bd4cd275bd1cb347_op_ctxt,rel_FilteredTests_bd4cd275bd1cb347->createContext());
CREATE_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt,rel_FlowFromExtended_7fd58681b534e204->createContext());
CREATE_OP_CONTEXT(rel_ModelPair_a5a4124c4969f589_op_ctxt,rel_ModelPair_a5a4124c4969f589->createContext());
CREATE_OP_CONTEXT(rel_ScoredDataWithModel_55bb6aafc5a52e34_op_ctxt,rel_ScoredDataWithModel_55bb6aafc5a52e34->createContext());
CREATE_OP_CONTEXT(rel_TestDataWithModel_2269d730f5799893_op_ctxt,rel_TestDataWithModel_2269d730f5799893->createContext());
CREATE_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt,rel_TrainingDataWithModel_bf0078ce702b39b8->createContext());
for(const auto& env0 : *rel_ModelPair_a5a4124c4969f589) {
if( !rel_TrainingDataWithModel_bf0078ce702b39b8->lowerUpperRange_10001(Tuple<RamDomain,5>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[3])}},Tuple<RamDomain,5>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt)).empty()) {
auto range = rel_TestDataWithModel_2269d730f5799893->lowerUpperRange_10001(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_TestDataWithModel_2269d730f5799893_op_ctxt));
for(const auto& env1 : range) {
for(const auto& env2 : *rel_ScoredDataWithModel_55bb6aafc5a52e34) {
if( rel_DataOverlap_5a4300eece6cb523->contains(Tuple<RamDomain,4>{{ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env2[1]),ramBitCast(env2[4])}},READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt)) && !(!rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_11110(Tuple<RamDomain,5>{{ramBitCast(env2[0]), ramBitCast(env2[4]), ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env2[0]), ramBitCast(env2[4]), ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt)).empty()) && !(!rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_11110(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env2[0]), ramBitCast(env2[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast(env0[1]), ramBitCast(env2[0]), ramBitCast(env2[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt)).empty())) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env0[1])}};
rel_FilteredTests_bd4cd275bd1cb347->insert(tuple,READ_OP_CONTEXT(rel_FilteredTests_bd4cd275bd1cb347_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FilteredTests(testModel,test,invo,meth,ctx1) :- 
   ModelPair(testModel,ctx1,trainModel,ctx2),
   TrainingDataWithModel(trainModel,train,_,_,ctx2),
   TestDataWithModel(testModel,test,invo,meth,ctx1),
   DataOverlap(test,ctx1,train,ctx2).
in file main.dl [1396:1-1400:42])_");
if(!(rel_TrainingDataWithModel_bf0078ce702b39b8->empty()) && !(rel_TestDataWithModel_2269d730f5799893->empty()) && !(rel_ModelPair_a5a4124c4969f589->empty()) && !(rel_DataOverlap_5a4300eece6cb523->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt,rel_DataOverlap_5a4300eece6cb523->createContext());
CREATE_OP_CONTEXT(rel_FilteredTests_bd4cd275bd1cb347_op_ctxt,rel_FilteredTests_bd4cd275bd1cb347->createContext());
CREATE_OP_CONTEXT(rel_ModelPair_a5a4124c4969f589_op_ctxt,rel_ModelPair_a5a4124c4969f589->createContext());
CREATE_OP_CONTEXT(rel_TestDataWithModel_2269d730f5799893_op_ctxt,rel_TestDataWithModel_2269d730f5799893->createContext());
CREATE_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt,rel_TrainingDataWithModel_bf0078ce702b39b8->createContext());
for(const auto& env0 : *rel_ModelPair_a5a4124c4969f589) {
auto range = rel_TrainingDataWithModel_bf0078ce702b39b8->lowerUpperRange_10001(Tuple<RamDomain,5>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[3])}},Tuple<RamDomain,5>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_TestDataWithModel_2269d730f5799893->lowerUpperRange_10001(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_TestDataWithModel_2269d730f5799893_op_ctxt));
for(const auto& env2 : range) {
if( rel_DataOverlap_5a4300eece6cb523->contains(Tuple<RamDomain,4>{{ramBitCast(env2[1]),ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env2[2]),ramBitCast(env2[3]),ramBitCast(env0[1])}};
rel_FilteredTests_bd4cd275bd1cb347->insert(tuple,READ_OP_CONTEXT(rel_FilteredTests_bd4cd275bd1cb347_op_ctxt));
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","testModel\ttest\tinvo\tmeth\tctx"},{"auxArity","0"},{"name","FilteredTests"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"testModel\", \"test\", \"invo\", \"meth\", \"ctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_FilteredTests_bd4cd275bd1cb347);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_FilteredTrainingMethod_256ce9fa5690afff {
public:
 Stratum_FilteredTrainingMethod_256ce9fa5690afff(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_i__0__1::Type& rel_FilteredTrainingMethod_abcda1d07db43c94,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_i__0__1::Type* rel_FilteredTrainingMethod_abcda1d07db43c94;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_Invoke_d61c77705bff35b0;
std::vector<std::regex> regexes;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_FilteredTrainingMethod_256ce9fa5690afff::Stratum_FilteredTrainingMethod_256ce9fa5690afff(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_i__0__1::Type& rel_FilteredTrainingMethod_abcda1d07db43c94,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_FilteredTrainingMethod_abcda1d07db43c94(&rel_FilteredTrainingMethod_abcda1d07db43c94),
rel_Invoke_d61c77705bff35b0(&rel_Invoke_d61c77705bff35b0),
regexes({
	std::regex("(GenericUnivariateSelect|SelectPercentile|SelectKBest|SelectFpr|SelectFdr|SelectFromModel|SelectFwe|SequentialFeatureSelector|RFE|RFECV|VarianceThreshold)[.]fit"),
	std::regex("(CountVectorizer|HashingVectorizer|TfidfTransformer|TfidfVectorizer|PCA)[.]fit"),
	std::regex("(Imputer|SimpleImputer|IterativeImputer|KNNImputer)[.]fit"),
	std::regex("(FunctionTransformer|KBinsDiscretizer|KernelCenterer|LabelBinarizer|LabelEncoder|MultiLabelBinarizer|MaxAbsScaler|MinMaxScaler|Normalizer|OneHotEncoder|OrdinalEncoder|PolynomialFeatures|PowerTransformer|QuantileTransformer|RobustScaler|SplineTransformer|StandardScaler)[.]fit"),
	std::regex("(AffinityPropagation|AgglomerativeClustering|Birch|DBSCAN|FeatureAgglomeration|KMeans|MiniBatchKMeans|MeanShift|OPTICS|SpectralClustering|SpectralBiclustering|SpectralCoclustering)[.]fit"),
}){
}

void Stratum_FilteredTrainingMethod_256ce9fa5690afff::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(FilteredTrainingMethod(meth) :- 
   Invoke(_,meth,_),
   match("(GenericUnivariateSelect|SelectPercentile|SelectKBest|SelectFpr|SelectFdr|SelectFromModel|SelectFwe|SequentialFeatureSelector|RFE|RFECV|VarianceThreshold)[.]fit", meth).
in file main.dl [597:1-603:208])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FilteredTrainingMethod_abcda1d07db43c94_op_ctxt,rel_FilteredTrainingMethod_abcda1d07db43c94->createContext());
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(0))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_FilteredTrainingMethod_abcda1d07db43c94->insert(tuple,READ_OP_CONTEXT(rel_FilteredTrainingMethod_abcda1d07db43c94_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(FilteredTrainingMethod(meth) :- 
   Invoke(_,meth,_),
   match("(CountVectorizer|HashingVectorizer|TfidfTransformer|TfidfVectorizer|PCA)[.]fit", meth).
in file main.dl [597:1-603:208])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FilteredTrainingMethod_abcda1d07db43c94_op_ctxt,rel_FilteredTrainingMethod_abcda1d07db43c94->createContext());
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(1))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_FilteredTrainingMethod_abcda1d07db43c94->insert(tuple,READ_OP_CONTEXT(rel_FilteredTrainingMethod_abcda1d07db43c94_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(FilteredTrainingMethod(meth) :- 
   Invoke(_,meth,_),
   match("(Imputer|SimpleImputer|IterativeImputer|KNNImputer)[.]fit", meth).
in file main.dl [597:1-603:208])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FilteredTrainingMethod_abcda1d07db43c94_op_ctxt,rel_FilteredTrainingMethod_abcda1d07db43c94->createContext());
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(2))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_FilteredTrainingMethod_abcda1d07db43c94->insert(tuple,READ_OP_CONTEXT(rel_FilteredTrainingMethod_abcda1d07db43c94_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(FilteredTrainingMethod(meth) :- 
   Invoke(_,meth,_),
   match("(FunctionTransformer|KBinsDiscretizer|KernelCenterer|LabelBinarizer|LabelEncoder|MultiLabelBinarizer|MaxAbsScaler|MinMaxScaler|Normalizer|OneHotEncoder|OrdinalEncoder|PolynomialFeatures|PowerTransformer|QuantileTransformer|RobustScaler|SplineTransformer|StandardScaler)[.]fit", meth).
in file main.dl [597:1-603:208])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FilteredTrainingMethod_abcda1d07db43c94_op_ctxt,rel_FilteredTrainingMethod_abcda1d07db43c94->createContext());
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(3))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_FilteredTrainingMethod_abcda1d07db43c94->insert(tuple,READ_OP_CONTEXT(rel_FilteredTrainingMethod_abcda1d07db43c94_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(FilteredTrainingMethod(meth) :- 
   Invoke(_,meth,_),
   match("(AffinityPropagation|AgglomerativeClustering|Birch|DBSCAN|FeatureAgglomeration|KMeans|MiniBatchKMeans|MeanShift|OPTICS|SpectralClustering|SpectralBiclustering|SpectralCoclustering)[.]fit", meth).
in file main.dl [597:1-603:208])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FilteredTrainingMethod_abcda1d07db43c94_op_ctxt,rel_FilteredTrainingMethod_abcda1d07db43c94->createContext());
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(4))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[1])}};
rel_FilteredTrainingMethod_abcda1d07db43c94->insert(tuple,READ_OP_CONTEXT(rel_FilteredTrainingMethod_abcda1d07db43c94_op_ctxt));
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_FinalNoTestData_29e60fd3659aa18e {
public:
 Stratum_FinalNoTestData_29e60fd3659aa18e(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_nullaries& rel_disconnected0_b2add3842fe11dfe,t_btree_ii__0_1__11::Type& rel_FinalNoTestData_1dcf6aa80b893c15,t_btree_i__0__1::Type& rel__agg_single_bd0385c34ef6548a,t_btree_i__0__1::Type& rel__agg_single0_ae1fba617ee8151c);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_nullaries* rel_disconnected0_b2add3842fe11dfe;
t_btree_ii__0_1__11::Type* rel_FinalNoTestData_1dcf6aa80b893c15;
t_btree_i__0__1::Type* rel__agg_single_bd0385c34ef6548a;
t_btree_i__0__1::Type* rel__agg_single0_ae1fba617ee8151c;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_FinalNoTestData_29e60fd3659aa18e::Stratum_FinalNoTestData_29e60fd3659aa18e(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_nullaries& rel_disconnected0_b2add3842fe11dfe,t_btree_ii__0_1__11::Type& rel_FinalNoTestData_1dcf6aa80b893c15,t_btree_i__0__1::Type& rel__agg_single_bd0385c34ef6548a,t_btree_i__0__1::Type& rel__agg_single0_ae1fba617ee8151c):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_disconnected0_b2add3842fe11dfe(&rel_disconnected0_b2add3842fe11dfe),
rel_FinalNoTestData_1dcf6aa80b893c15(&rel_FinalNoTestData_1dcf6aa80b893c15),
rel__agg_single_bd0385c34ef6548a(&rel__agg_single_bd0385c34ef6548a),
rel__agg_single0_ae1fba617ee8151c(&rel__agg_single0_ae1fba617ee8151c){
}

void Stratum_FinalNoTestData_29e60fd3659aa18e::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(FinalNoTestData("NOTEST",z) :- 
   +disconnected0(),
   __agg_single(z),
   __agg_single0(z).
in file main.dl [1401:1-1405:13])_");
if(!(rel__agg_single_bd0385c34ef6548a->empty()) && !(rel_disconnected0_b2add3842fe11dfe->empty()) && !(rel__agg_single0_ae1fba617ee8151c->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FinalNoTestData_1dcf6aa80b893c15_op_ctxt,rel_FinalNoTestData_1dcf6aa80b893c15->createContext());
CREATE_OP_CONTEXT(rel__agg_single_bd0385c34ef6548a_op_ctxt,rel__agg_single_bd0385c34ef6548a->createContext());
CREATE_OP_CONTEXT(rel__agg_single0_ae1fba617ee8151c_op_ctxt,rel__agg_single0_ae1fba617ee8151c->createContext());
for(const auto& env0 : *rel__agg_single_bd0385c34ef6548a) {
if( rel__agg_single0_ae1fba617ee8151c->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel__agg_single0_ae1fba617ee8151c_op_ctxt))) {
Tuple<RamDomain,2> tuple{{ramBitCast(RamSigned(7)),ramBitCast(env0[0])}};
rel_FinalNoTestData_1dcf6aa80b893c15->insert(tuple,READ_OP_CONTEXT(rel_FinalNoTestData_1dcf6aa80b893c15_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","msg\tcnt"},{"auxArity","0"},{"name","FinalNoTestData"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"msg\", \"cnt\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:symbol\", \"i:number\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_FinalNoTestData_1dcf6aa80b893c15);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_disconnected0_b2add3842fe11dfe->purge();
if (pruneImdtRels) rel__agg_single_bd0385c34ef6548a->purge();
if (pruneImdtRels) rel__agg_single0_ae1fba617ee8151c->purge();
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_FinalNoTestDataWithMultiUse_caef59a0ca7955d8 {
public:
 Stratum_FinalNoTestDataWithMultiUse_caef59a0ca7955d8(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_nullaries& rel_disconnected1_a1b44fde1b4da294,t_btree_ii__0_1__11::Type& rel_FinalNoTestData_1dcf6aa80b893c15,t_btree_ii__0_1__11::Type& rel_FinalNoTestDataWithMultiUse_99aec0c4382a0994);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_nullaries* rel_disconnected1_a1b44fde1b4da294;
t_btree_ii__0_1__11::Type* rel_FinalNoTestData_1dcf6aa80b893c15;
t_btree_ii__0_1__11::Type* rel_FinalNoTestDataWithMultiUse_99aec0c4382a0994;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_FinalNoTestDataWithMultiUse_caef59a0ca7955d8::Stratum_FinalNoTestDataWithMultiUse_caef59a0ca7955d8(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_nullaries& rel_disconnected1_a1b44fde1b4da294,t_btree_ii__0_1__11::Type& rel_FinalNoTestData_1dcf6aa80b893c15,t_btree_ii__0_1__11::Type& rel_FinalNoTestDataWithMultiUse_99aec0c4382a0994):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_disconnected1_a1b44fde1b4da294(&rel_disconnected1_a1b44fde1b4da294),
rel_FinalNoTestData_1dcf6aa80b893c15(&rel_FinalNoTestData_1dcf6aa80b893c15),
rel_FinalNoTestDataWithMultiUse_99aec0c4382a0994(&rel_FinalNoTestDataWithMultiUse_99aec0c4382a0994){
}

void Stratum_FinalNoTestDataWithMultiUse_caef59a0ca7955d8::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(FinalNoTestDataWithMultiUse(msg,c) :- 
   +disconnected1(),
   FinalNoTestData(msg,c).
in file main.dl [1406:1-1409:52])_");
if(!(rel_disconnected1_a1b44fde1b4da294->empty()) && !(rel_FinalNoTestData_1dcf6aa80b893c15->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FinalNoTestData_1dcf6aa80b893c15_op_ctxt,rel_FinalNoTestData_1dcf6aa80b893c15->createContext());
CREATE_OP_CONTEXT(rel_FinalNoTestDataWithMultiUse_99aec0c4382a0994_op_ctxt,rel_FinalNoTestDataWithMultiUse_99aec0c4382a0994->createContext());
for(const auto& env0 : *rel_FinalNoTestData_1dcf6aa80b893c15) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_FinalNoTestDataWithMultiUse_99aec0c4382a0994->insert(tuple,READ_OP_CONTEXT(rel_FinalNoTestDataWithMultiUse_99aec0c4382a0994_op_ctxt));
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","msg\tcnt"},{"auxArity","0"},{"name","FinalNoTestDataWithMultiUse"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"msg\", \"cnt\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:symbol\", \"i:number\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_FinalNoTestDataWithMultiUse_99aec0c4382a0994);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_disconnected1_a1b44fde1b4da294->purge();
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_FinalOverlapLeak_3232c1f7dfb2f033 {
public:
 Stratum_FinalOverlapLeak_3232c1f7dfb2f033(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiiii__0_1_2_3_4_5__111111::Type& rel_FinalOverlapLeak_78ab00e4c1b08b0b,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiiiii__0_6_1_2_3_4_5__1111111__1000001::Type& rel__agg_subclause_32d5cc024cc79173,t_btree_iiiiiiiiii__0_2_4_8_9_1_3_5_6_7__1010100011__1111111111::Type& rel__agg_subclause0_1a0a441f9870a373);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiiiii__0_1_2_3_4_5__111111::Type* rel_FinalOverlapLeak_78ab00e4c1b08b0b;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_TrainingDataWithModel_bf0078ce702b39b8;
t_btree_iiiiiii__0_6_1_2_3_4_5__1111111__1000001::Type* rel__agg_subclause_32d5cc024cc79173;
t_btree_iiiiiiiiii__0_2_4_8_9_1_3_5_6_7__1010100011__1111111111::Type* rel__agg_subclause0_1a0a441f9870a373;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_FinalOverlapLeak_3232c1f7dfb2f033::Stratum_FinalOverlapLeak_3232c1f7dfb2f033(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiiii__0_1_2_3_4_5__111111::Type& rel_FinalOverlapLeak_78ab00e4c1b08b0b,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiiiii__0_6_1_2_3_4_5__1111111__1000001::Type& rel__agg_subclause_32d5cc024cc79173,t_btree_iiiiiiiiii__0_2_4_8_9_1_3_5_6_7__1010100011__1111111111::Type& rel__agg_subclause0_1a0a441f9870a373):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_FinalOverlapLeak_78ab00e4c1b08b0b(&rel_FinalOverlapLeak_78ab00e4c1b08b0b),
rel_TrainingDataWithModel_bf0078ce702b39b8(&rel_TrainingDataWithModel_bf0078ce702b39b8),
rel__agg_subclause_32d5cc024cc79173(&rel__agg_subclause_32d5cc024cc79173),
rel__agg_subclause0_1a0a441f9870a373(&rel__agg_subclause0_1a0a441f9870a373){
}

void Stratum_FinalOverlapLeak_3232c1f7dfb2f033::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(FinalOverlapLeak(trainModel,train,invo,meth,ctx1,@generator_0) :- 
   TrainingDataWithModel(trainModel,train,invo,meth,ctx1),
   @generator_0 > 0,
   @generator_0 = count : { __agg_subclause(ctx1,+underscore_28,+underscore_29,+underscore_30,+underscore_31,+underscore_32,trainModel) },
   @generator_0 = count : { __agg_subclause0(ctx1,+underscore_33,invo,+underscore_34,meth,+underscore_35,+underscore_36,+underscore_37,train,trainModel) }.
in file main.dl [1361:1-1367:12])_");
if(!(rel_TrainingDataWithModel_bf0078ce702b39b8->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FinalOverlapLeak_78ab00e4c1b08b0b_op_ctxt,rel_FinalOverlapLeak_78ab00e4c1b08b0b->createContext());
CREATE_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt,rel_TrainingDataWithModel_bf0078ce702b39b8->createContext());
CREATE_OP_CONTEXT(rel__agg_subclause_32d5cc024cc79173_op_ctxt,rel__agg_subclause_32d5cc024cc79173->createContext());
CREATE_OP_CONTEXT(rel__agg_subclause0_1a0a441f9870a373_op_ctxt,rel__agg_subclause0_1a0a441f9870a373->createContext());
for(const auto& env0 : *rel_TrainingDataWithModel_bf0078ce702b39b8) {
Tuple<RamDomain,1> env1;
bool shouldRunNested = true;
RamSigned res0 = 0;
auto range = rel__agg_subclause_32d5cc024cc79173->lowerUpperRange_1000001(Tuple<RamDomain,7>{{ramBitCast(env0[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0])}},Tuple<RamDomain,7>{{ramBitCast(env0[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel__agg_subclause_32d5cc024cc79173_op_ctxt));
for(const auto& env1 : range) {
if( true) {
shouldRunNested = true;
++res0
;}
}
env1[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(env1[0]) == ramBitCast<RamDomain>(env1[0])) && (ramBitCast<RamSigned>(env1[0]) > ramBitCast<RamSigned>(RamSigned(0)))) {
Tuple<RamDomain,1> env2;
bool shouldRunNested = true;
RamSigned res0 = 0;
auto range = rel__agg_subclause0_1a0a441f9870a373->lowerUpperRange_1010100011(Tuple<RamDomain,10>{{ramBitCast(env0[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env0[0])}},Tuple<RamDomain,10>{{ramBitCast(env0[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel__agg_subclause0_1a0a441f9870a373_op_ctxt));
for(const auto& env2 : range) {
if( true) {
shouldRunNested = true;
++res0
;}
}
env2[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(env1[0]) == ramBitCast<RamDomain>(env2[0]))) {
Tuple<RamDomain,6> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4]),ramBitCast(env1[0])}};
rel_FinalOverlapLeak_78ab00e4c1b08b0b->insert(tuple,READ_OP_CONTEXT(rel_FinalOverlapLeak_78ab00e4c1b08b0b_op_ctxt));
}
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","trainModel\ttrain\tinvo\tmeth\tctx\tc"},{"auxArity","0"},{"name","FinalOverlapLeak"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 6, \"params\": [\"trainModel\", \"train\", \"invo\", \"meth\", \"ctx\", \"c\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 6, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\", \"i:number\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_FinalOverlapLeak_78ab00e4c1b08b0b);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel__agg_subclause_32d5cc024cc79173->purge();
if (pruneImdtRels) rel__agg_subclause0_1a0a441f9870a373->purge();
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_FlowCondition_109ebb821027279b {
public:
 Stratum_FlowCondition_109ebb821027279b(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__0_1_2__100__111::Type& rel_FlowCondition_f30c150f9e6134d8);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__0_1_2__100__111::Type* rel_FlowCondition_f30c150f9e6134d8;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_FlowCondition_109ebb821027279b::Stratum_FlowCondition_109ebb821027279b(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__0_1_2__100__111::Type& rel_FlowCondition_f30c150f9e6134d8):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_FlowCondition_f30c150f9e6134d8(&rel_FlowCondition_f30c150f9e6134d8){
}

void Stratum_FlowCondition_109ebb821027279b::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(FlowCondition(173,"axis","1").
in file main.dl [371:1-371:33])_");
[&](){
CREATE_OP_CONTEXT(rel_FlowCondition_f30c150f9e6134d8_op_ctxt,rel_FlowCondition_f30c150f9e6134d8->createContext());
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(173)),ramBitCast(RamSigned(8)),ramBitCast(RamSigned(9))}};
rel_FlowCondition_f30c150f9e6134d8->insert(tuple,READ_OP_CONTEXT(rel_FlowCondition_f30c150f9e6134d8_op_ctxt));
}
();}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_FlowFrom_706fbd402ae0a9c3 {
public:
 Stratum_FlowFrom_706fbd402ae0a9c3(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_delta_FlowFrom_9453696b0b7d82d1,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_new_FlowFrom_581490064b4976c4,t_btree_iiiii__0_1_2_3_4__11111__11000::Type& rel_FlowFrom_0c9cf4995aeb9ef7,t_btree_iiiii__0_1_4_2_3__11111__11001::Type& rel_FlowFromEdge_6f9cb97dfaad1a54);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel_delta_FlowFrom_9453696b0b7d82d1;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel_new_FlowFrom_581490064b4976c4;
t_btree_iiiii__0_1_2_3_4__11111__11000::Type* rel_FlowFrom_0c9cf4995aeb9ef7;
t_btree_iiiii__0_1_4_2_3__11111__11001::Type* rel_FlowFromEdge_6f9cb97dfaad1a54;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_FlowFrom_706fbd402ae0a9c3::Stratum_FlowFrom_706fbd402ae0a9c3(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_delta_FlowFrom_9453696b0b7d82d1,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_new_FlowFrom_581490064b4976c4,t_btree_iiiii__0_1_2_3_4__11111__11000::Type& rel_FlowFrom_0c9cf4995aeb9ef7,t_btree_iiiii__0_1_4_2_3__11111__11001::Type& rel_FlowFromEdge_6f9cb97dfaad1a54):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_delta_FlowFrom_9453696b0b7d82d1(&rel_delta_FlowFrom_9453696b0b7d82d1),
rel_new_FlowFrom_581490064b4976c4(&rel_new_FlowFrom_581490064b4976c4),
rel_FlowFrom_0c9cf4995aeb9ef7(&rel_FlowFrom_0c9cf4995aeb9ef7),
rel_FlowFromEdge_6f9cb97dfaad1a54(&rel_FlowFromEdge_6f9cb97dfaad1a54){
}

void Stratum_FlowFrom_706fbd402ae0a9c3::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(FlowFrom(to,toCtx,from,fromCtx,tag) :- 
   FlowFromEdge(to,toCtx,from,fromCtx,tag).
in file main.dl [1053:1-1054:49])_");
if(!(rel_FlowFromEdge_6f9cb97dfaad1a54->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFrom_0c9cf4995aeb9ef7_op_ctxt,rel_FlowFrom_0c9cf4995aeb9ef7->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
for(const auto& env0 : *rel_FlowFromEdge_6f9cb97dfaad1a54) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_FlowFrom_0c9cf4995aeb9ef7->insert(tuple,READ_OP_CONTEXT(rel_FlowFrom_0c9cf4995aeb9ef7_op_ctxt));
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_delta_FlowFrom_9453696b0b7d82d1_op_ctxt,rel_delta_FlowFrom_9453696b0b7d82d1->createContext());
CREATE_OP_CONTEXT(rel_FlowFrom_0c9cf4995aeb9ef7_op_ctxt,rel_FlowFrom_0c9cf4995aeb9ef7->createContext());
for(const auto& env0 : *rel_FlowFrom_0c9cf4995aeb9ef7) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_delta_FlowFrom_9453696b0b7d82d1->insert(tuple,READ_OP_CONTEXT(rel_delta_FlowFrom_9453696b0b7d82d1_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(FlowFrom(to,toCtx,from,fromCtx,tag) :- 
   FlowFrom(to,toCtx,mid,midCtx,tag),
   FlowFromEdge(mid,midCtx,from,fromCtx,tag).
in file main.dl [1057:1-1059:51])_");
if(!(rel_delta_FlowFrom_9453696b0b7d82d1->empty()) && !(rel_FlowFromEdge_6f9cb97dfaad1a54->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_FlowFrom_9453696b0b7d82d1_op_ctxt,rel_delta_FlowFrom_9453696b0b7d82d1->createContext());
CREATE_OP_CONTEXT(rel_new_FlowFrom_581490064b4976c4_op_ctxt,rel_new_FlowFrom_581490064b4976c4->createContext());
CREATE_OP_CONTEXT(rel_FlowFrom_0c9cf4995aeb9ef7_op_ctxt,rel_FlowFrom_0c9cf4995aeb9ef7->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
for(const auto& env0 : *rel_delta_FlowFrom_9453696b0b7d82d1) {
auto range = rel_FlowFromEdge_6f9cb97dfaad1a54->lowerUpperRange_11001(Tuple<RamDomain,5>{{ramBitCast(env0[2]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[4])}},Tuple<RamDomain,5>{{ramBitCast(env0[2]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_FlowFrom_0c9cf4995aeb9ef7->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_FlowFrom_0c9cf4995aeb9ef7_op_ctxt)))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env0[4])}};
rel_new_FlowFrom_581490064b4976c4->insert(tuple,READ_OP_CONTEXT(rel_new_FlowFrom_581490064b4976c4_op_ctxt));
}
}
}
}
();}
if(rel_new_FlowFrom_581490064b4976c4->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_new_FlowFrom_581490064b4976c4_op_ctxt,rel_new_FlowFrom_581490064b4976c4->createContext());
CREATE_OP_CONTEXT(rel_FlowFrom_0c9cf4995aeb9ef7_op_ctxt,rel_FlowFrom_0c9cf4995aeb9ef7->createContext());
for(const auto& env0 : *rel_new_FlowFrom_581490064b4976c4) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_FlowFrom_0c9cf4995aeb9ef7->insert(tuple,READ_OP_CONTEXT(rel_FlowFrom_0c9cf4995aeb9ef7_op_ctxt));
}
}
();std::swap(rel_delta_FlowFrom_9453696b0b7d82d1, rel_new_FlowFrom_581490064b4976c4);
rel_new_FlowFrom_581490064b4976c4->purge();
iter++;
}
iter = 0;
rel_delta_FlowFrom_9453696b0b7d82d1->purge();
rel_new_FlowFrom_581490064b4976c4->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\ttoCtx\tfrom\tfromCtx\ttag"},{"auxArity","0"},{"name","FlowFrom"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"to\", \"toCtx\", \"from\", \"fromCtx\", \"tag\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\", \"s:symbol\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_FlowFrom_0c9cf4995aeb9ef7);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_FlowFromEdge_ea849012e52787d8 {
public:
 Stratum_FlowFromEdge_ea849012e52787d8(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__4_0_1_2_3__11111__00001::Type& rel_delta_FlowFromEdge_06b5167ac5e9217c,t_btree_iiiii__4_0_1_2_3__11111__00001::Type& rel_new_FlowFromEdge_4b44b140131ea495,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualKeyParam_c37ca7251a780d4f,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualParam_b7a735170493e717,t_btree_iii__1_0_2__010__110__111::Type& rel_ActualReturn_8bc9db09e057aa22,t_btree_iiii__2_0_1_3__0_1__1111__1100__0010::Type& rel_Alias_22e56a91218d2f0d,t_btree_iiii__0_1_2_3__1111::Type& rel_AssignBinOp_ac278042ec33e40a,t_btree_ii__0_1__11::Type& rel_AssignGlobal_f60b14713e1f1ab7,t_btree_ii__0_1__11::Type& rel_AssignVar_b173aa4bb6352b3a,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_ii__1_0__11__01::Type& rel_ConstantValue_bf370ded014c6df6,t_btree_iii__0_1_2__100__111::Type& rel_FlowCondition_f30c150f9e6134d8,t_btree_iiiii__0_1_4_2_3__11111__11001::Type& rel_FlowFromEdge_6f9cb97dfaad1a54,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_IndexContentPointsTo_db1dfbfa873aff0a,t_btree_iiii__0_2_1_3__1010__1111::Type& rel_InterProcAssign_bed60ee93a02e127,t_btree_i__0__1::Type& rel_IsDataFrameEquivIndexing_5de5b08291e74631,t_btree_iii__2__0_1_2__001__110__111::Type& rel_LoadField_6018b2c33f454495,t_btree_iii__2__0_1_2__001__110__111::Type& rel_LoadIndex_3a07e512c7efb9bd,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_LoadSlice_e590a0ee3f45cac8,t_btree_i__0__1::Type& rel_LocalMethod_5b358702fac6f178,t_btree_iii__1_2_0__011__111::Type& rel_MethodSSA_a9f7ed6321abcd80,t_btree_ii__1_0__11__01::Type& rel_MethodUpdate_b9129e3e14098516,t_btree_iiii__3_0_1_2__1111__0001::Type& rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d,t_btree_iii__2_0_1__001__111::Type& rel_ParamToParamDataFlow_0bd19d43cb842556,t_btree_iii__2_0_1__001__111::Type& rel_ParamToParamFlow_62719282a92885f3,t_btree_iiii__3_0_1_2__1111__0001::Type& rel_ParamToRetCondEquivFlow_219c5a0dd6644473,t_btree_iii__2_0_1__001__111::Type& rel_ParamToRetDataFlow_4802f16da470059f,t_btree_iii__2_0_1__001__111::Type& rel_ParamToRetEquivFlow_cf4bedb68bbe1170,t_btree_iii__0_1_2__111::Type& rel_StoreField_7d8d16151c0ea49b,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_StoreFieldSSA_051b143b9d011002,t_btree_iii__0_1_2__110__111::Type& rel_StoreIndex_bab2c0876dfa7ece,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_StoreIndexSSA_431249b1dfe65e85,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_StoreSlice_2d8a31bc728a3bbd,t_btree_iiiiii__0_1_2_3_4_5__110000__111111::Type& rel_StoreSliceSSA_f26b3c4e2aecada2,t_btree_iiii__2_3_0_1__0_1__1000__1111__1100__0011::Type& rel_VarPointsTo_c1a9f897b9f324f0);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiiii__4_0_1_2_3__11111__00001::Type* rel_delta_FlowFromEdge_06b5167ac5e9217c;
t_btree_iiiii__4_0_1_2_3__11111__00001::Type* rel_new_FlowFromEdge_4b44b140131ea495;
t_btree_iii__1__0_1_2__010__100__110__111::Type* rel_ActualKeyParam_c37ca7251a780d4f;
t_btree_iii__1__0_1_2__010__100__110__111::Type* rel_ActualParam_b7a735170493e717;
t_btree_iii__1_0_2__010__110__111::Type* rel_ActualReturn_8bc9db09e057aa22;
t_btree_iiii__2_0_1_3__0_1__1111__1100__0010::Type* rel_Alias_22e56a91218d2f0d;
t_btree_iiii__0_1_2_3__1111::Type* rel_AssignBinOp_ac278042ec33e40a;
t_btree_ii__0_1__11::Type* rel_AssignGlobal_f60b14713e1f1ab7;
t_btree_ii__0_1__11::Type* rel_AssignVar_b173aa4bb6352b3a;
t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type* rel_CallGraphEdge_333c9d69fed5eee7;
t_btree_ii__1_0__11__01::Type* rel_ConstantValue_bf370ded014c6df6;
t_btree_iii__0_1_2__100__111::Type* rel_FlowCondition_f30c150f9e6134d8;
t_btree_iiiii__0_1_4_2_3__11111__11001::Type* rel_FlowFromEdge_6f9cb97dfaad1a54;
t_btree_iiii__0_1_2_3__1111__1100::Type* rel_IndexContentPointsTo_db1dfbfa873aff0a;
t_btree_iiii__0_2_1_3__1010__1111::Type* rel_InterProcAssign_bed60ee93a02e127;
t_btree_i__0__1::Type* rel_IsDataFrameEquivIndexing_5de5b08291e74631;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_LoadField_6018b2c33f454495;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_LoadIndex_3a07e512c7efb9bd;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel_LoadSlice_e590a0ee3f45cac8;
t_btree_i__0__1::Type* rel_LocalMethod_5b358702fac6f178;
t_btree_iii__1_2_0__011__111::Type* rel_MethodSSA_a9f7ed6321abcd80;
t_btree_ii__1_0__11__01::Type* rel_MethodUpdate_b9129e3e14098516;
t_btree_iiii__3_0_1_2__1111__0001::Type* rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d;
t_btree_iii__2_0_1__001__111::Type* rel_ParamToParamDataFlow_0bd19d43cb842556;
t_btree_iii__2_0_1__001__111::Type* rel_ParamToParamFlow_62719282a92885f3;
t_btree_iiii__3_0_1_2__1111__0001::Type* rel_ParamToRetCondEquivFlow_219c5a0dd6644473;
t_btree_iii__2_0_1__001__111::Type* rel_ParamToRetDataFlow_4802f16da470059f;
t_btree_iii__2_0_1__001__111::Type* rel_ParamToRetEquivFlow_cf4bedb68bbe1170;
t_btree_iii__0_1_2__111::Type* rel_StoreField_7d8d16151c0ea49b;
t_btree_iiii__0_1_2_3__1111__1100::Type* rel_StoreFieldSSA_051b143b9d011002;
t_btree_iii__0_1_2__110__111::Type* rel_StoreIndex_bab2c0876dfa7ece;
t_btree_iiii__0_1_2_3__1111__1100::Type* rel_StoreIndexSSA_431249b1dfe65e85;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel_StoreSlice_2d8a31bc728a3bbd;
t_btree_iiiiii__0_1_2_3_4_5__110000__111111::Type* rel_StoreSliceSSA_f26b3c4e2aecada2;
t_btree_iiii__2_3_0_1__0_1__1000__1111__1100__0011::Type* rel_VarPointsTo_c1a9f897b9f324f0;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_FlowFromEdge_ea849012e52787d8::Stratum_FlowFromEdge_ea849012e52787d8(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__4_0_1_2_3__11111__00001::Type& rel_delta_FlowFromEdge_06b5167ac5e9217c,t_btree_iiiii__4_0_1_2_3__11111__00001::Type& rel_new_FlowFromEdge_4b44b140131ea495,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualKeyParam_c37ca7251a780d4f,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualParam_b7a735170493e717,t_btree_iii__1_0_2__010__110__111::Type& rel_ActualReturn_8bc9db09e057aa22,t_btree_iiii__2_0_1_3__0_1__1111__1100__0010::Type& rel_Alias_22e56a91218d2f0d,t_btree_iiii__0_1_2_3__1111::Type& rel_AssignBinOp_ac278042ec33e40a,t_btree_ii__0_1__11::Type& rel_AssignGlobal_f60b14713e1f1ab7,t_btree_ii__0_1__11::Type& rel_AssignVar_b173aa4bb6352b3a,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_ii__1_0__11__01::Type& rel_ConstantValue_bf370ded014c6df6,t_btree_iii__0_1_2__100__111::Type& rel_FlowCondition_f30c150f9e6134d8,t_btree_iiiii__0_1_4_2_3__11111__11001::Type& rel_FlowFromEdge_6f9cb97dfaad1a54,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_IndexContentPointsTo_db1dfbfa873aff0a,t_btree_iiii__0_2_1_3__1010__1111::Type& rel_InterProcAssign_bed60ee93a02e127,t_btree_i__0__1::Type& rel_IsDataFrameEquivIndexing_5de5b08291e74631,t_btree_iii__2__0_1_2__001__110__111::Type& rel_LoadField_6018b2c33f454495,t_btree_iii__2__0_1_2__001__110__111::Type& rel_LoadIndex_3a07e512c7efb9bd,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_LoadSlice_e590a0ee3f45cac8,t_btree_i__0__1::Type& rel_LocalMethod_5b358702fac6f178,t_btree_iii__1_2_0__011__111::Type& rel_MethodSSA_a9f7ed6321abcd80,t_btree_ii__1_0__11__01::Type& rel_MethodUpdate_b9129e3e14098516,t_btree_iiii__3_0_1_2__1111__0001::Type& rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d,t_btree_iii__2_0_1__001__111::Type& rel_ParamToParamDataFlow_0bd19d43cb842556,t_btree_iii__2_0_1__001__111::Type& rel_ParamToParamFlow_62719282a92885f3,t_btree_iiii__3_0_1_2__1111__0001::Type& rel_ParamToRetCondEquivFlow_219c5a0dd6644473,t_btree_iii__2_0_1__001__111::Type& rel_ParamToRetDataFlow_4802f16da470059f,t_btree_iii__2_0_1__001__111::Type& rel_ParamToRetEquivFlow_cf4bedb68bbe1170,t_btree_iii__0_1_2__111::Type& rel_StoreField_7d8d16151c0ea49b,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_StoreFieldSSA_051b143b9d011002,t_btree_iii__0_1_2__110__111::Type& rel_StoreIndex_bab2c0876dfa7ece,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_StoreIndexSSA_431249b1dfe65e85,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_StoreSlice_2d8a31bc728a3bbd,t_btree_iiiiii__0_1_2_3_4_5__110000__111111::Type& rel_StoreSliceSSA_f26b3c4e2aecada2,t_btree_iiii__2_3_0_1__0_1__1000__1111__1100__0011::Type& rel_VarPointsTo_c1a9f897b9f324f0):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_delta_FlowFromEdge_06b5167ac5e9217c(&rel_delta_FlowFromEdge_06b5167ac5e9217c),
rel_new_FlowFromEdge_4b44b140131ea495(&rel_new_FlowFromEdge_4b44b140131ea495),
rel_ActualKeyParam_c37ca7251a780d4f(&rel_ActualKeyParam_c37ca7251a780d4f),
rel_ActualParam_b7a735170493e717(&rel_ActualParam_b7a735170493e717),
rel_ActualReturn_8bc9db09e057aa22(&rel_ActualReturn_8bc9db09e057aa22),
rel_Alias_22e56a91218d2f0d(&rel_Alias_22e56a91218d2f0d),
rel_AssignBinOp_ac278042ec33e40a(&rel_AssignBinOp_ac278042ec33e40a),
rel_AssignGlobal_f60b14713e1f1ab7(&rel_AssignGlobal_f60b14713e1f1ab7),
rel_AssignVar_b173aa4bb6352b3a(&rel_AssignVar_b173aa4bb6352b3a),
rel_CallGraphEdge_333c9d69fed5eee7(&rel_CallGraphEdge_333c9d69fed5eee7),
rel_ConstantValue_bf370ded014c6df6(&rel_ConstantValue_bf370ded014c6df6),
rel_FlowCondition_f30c150f9e6134d8(&rel_FlowCondition_f30c150f9e6134d8),
rel_FlowFromEdge_6f9cb97dfaad1a54(&rel_FlowFromEdge_6f9cb97dfaad1a54),
rel_IndexContentPointsTo_db1dfbfa873aff0a(&rel_IndexContentPointsTo_db1dfbfa873aff0a),
rel_InterProcAssign_bed60ee93a02e127(&rel_InterProcAssign_bed60ee93a02e127),
rel_IsDataFrameEquivIndexing_5de5b08291e74631(&rel_IsDataFrameEquivIndexing_5de5b08291e74631),
rel_LoadField_6018b2c33f454495(&rel_LoadField_6018b2c33f454495),
rel_LoadIndex_3a07e512c7efb9bd(&rel_LoadIndex_3a07e512c7efb9bd),
rel_LoadSlice_e590a0ee3f45cac8(&rel_LoadSlice_e590a0ee3f45cac8),
rel_LocalMethod_5b358702fac6f178(&rel_LocalMethod_5b358702fac6f178),
rel_MethodSSA_a9f7ed6321abcd80(&rel_MethodSSA_a9f7ed6321abcd80),
rel_MethodUpdate_b9129e3e14098516(&rel_MethodUpdate_b9129e3e14098516),
rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d(&rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d),
rel_ParamToParamDataFlow_0bd19d43cb842556(&rel_ParamToParamDataFlow_0bd19d43cb842556),
rel_ParamToParamFlow_62719282a92885f3(&rel_ParamToParamFlow_62719282a92885f3),
rel_ParamToRetCondEquivFlow_219c5a0dd6644473(&rel_ParamToRetCondEquivFlow_219c5a0dd6644473),
rel_ParamToRetDataFlow_4802f16da470059f(&rel_ParamToRetDataFlow_4802f16da470059f),
rel_ParamToRetEquivFlow_cf4bedb68bbe1170(&rel_ParamToRetEquivFlow_cf4bedb68bbe1170),
rel_StoreField_7d8d16151c0ea49b(&rel_StoreField_7d8d16151c0ea49b),
rel_StoreFieldSSA_051b143b9d011002(&rel_StoreFieldSSA_051b143b9d011002),
rel_StoreIndex_bab2c0876dfa7ece(&rel_StoreIndex_bab2c0876dfa7ece),
rel_StoreIndexSSA_431249b1dfe65e85(&rel_StoreIndexSSA_431249b1dfe65e85),
rel_StoreSlice_2d8a31bc728a3bbd(&rel_StoreSlice_2d8a31bc728a3bbd),
rel_StoreSliceSSA_f26b3c4e2aecada2(&rel_StoreSliceSSA_f26b3c4e2aecada2),
rel_VarPointsTo_c1a9f897b9f324f0(&rel_VarPointsTo_c1a9f897b9f324f0){
}

void Stratum_FlowFromEdge_ea849012e52787d8::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(FlowFromEdge(to,toCtx,from,fromCtx,"normal") :- 
   InterProcAssign(to,toCtx,from,fromCtx).
in file main.dl [913:1-914:47])_");
if(!(rel_InterProcAssign_bed60ee93a02e127->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_InterProcAssign_bed60ee93a02e127_op_ctxt,rel_InterProcAssign_bed60ee93a02e127->createContext());
for(const auto& env0 : *rel_InterProcAssign_bed60ee93a02e127) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,toCtx,from,fromCtx,"normal") :- 
   AssignGlobal(to,from),
   VarPointsTo(to,toCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [926:1-930:38])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_AssignGlobal_f60b14713e1f1ab7->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_AssignGlobal_f60b14713e1f1ab7_op_ctxt,rel_AssignGlobal_f60b14713e1f1ab7->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_AssignGlobal_f60b14713e1f1ab7) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env2[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,toCtx,from,fromCtx,"equiv") :- 
   AssignGlobal(to,from),
   VarPointsTo(to,toCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [926:1-930:38])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_AssignGlobal_f60b14713e1f1ab7->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_AssignGlobal_f60b14713e1f1ab7_op_ctxt,rel_AssignGlobal_f60b14713e1f1ab7->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_AssignGlobal_f60b14713e1f1ab7) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env2[1]),ramBitCast(RamSigned(1))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,toCtx,from,fromCtx,"normal") :- 
   CallGraphEdge(invo,_,meth,_),
   MethodUpdate(fromIdx,meth),
   ActualParam(fromIdx,invo,from),
   Alias(to,toCtx,from,fromCtx).
in file main.dl [940:1-945:37])_");
if(!(rel_MethodUpdate_b9129e3e14098516->empty()) && !(rel_ActualParam_b7a735170493e717->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_Alias_22e56a91218d2f0d->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_Alias_22e56a91218d2f0d_op_ctxt,rel_Alias_22e56a91218d2f0d->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_MethodUpdate_b9129e3e14098516_op_ctxt,rel_MethodUpdate_b9129e3e14098516->createContext());
for(const auto& env0 : *rel_CallGraphEdge_333c9d69fed5eee7) {
auto range = rel_MethodUpdate_b9129e3e14098516->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_MethodUpdate_b9129e3e14098516_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_Alias_22e56a91218d2f0d->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_Alias_22e56a91218d2f0d_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env3[0]),ramBitCast(env3[1]),ramBitCast(env2[2]),ramBitCast(env3[3]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,toCtx,from,fromCtx,"data") :- 
   CallGraphEdge(invo,_,meth,_),
   MethodUpdate(fromIdx,meth),
   ActualParam(fromIdx,invo,from),
   Alias(to,toCtx,from,fromCtx).
in file main.dl [940:1-945:37])_");
if(!(rel_MethodUpdate_b9129e3e14098516->empty()) && !(rel_ActualParam_b7a735170493e717->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_Alias_22e56a91218d2f0d->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_Alias_22e56a91218d2f0d_op_ctxt,rel_Alias_22e56a91218d2f0d->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_MethodUpdate_b9129e3e14098516_op_ctxt,rel_MethodUpdate_b9129e3e14098516->createContext());
for(const auto& env0 : *rel_CallGraphEdge_333c9d69fed5eee7) {
auto range = rel_MethodUpdate_b9129e3e14098516->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_MethodUpdate_b9129e3e14098516_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_Alias_22e56a91218d2f0d->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_Alias_22e56a91218d2f0d_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env3[0]),ramBitCast(env3[1]),ramBitCast(env2[2]),ramBitCast(env3[3]),ramBitCast(RamSigned(0))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,toCtx,from,fromCtx,"normal") :- 
   CallGraphEdge(invo,_,meth,_),
   MethodUpdate(idx,meth),
   MethodSSA(fromIdx,idx,meth),
   ActualReturn(fromIdx,invo,from),
   Alias(to,toCtx,from,fromCtx).
in file main.dl [946:1-952:37])_");
if(!(rel_MethodUpdate_b9129e3e14098516->empty()) && !(rel_ActualReturn_8bc9db09e057aa22->empty()) && !(rel_MethodSSA_a9f7ed6321abcd80->empty()) && !(rel_Alias_22e56a91218d2f0d->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt,rel_ActualReturn_8bc9db09e057aa22->createContext());
CREATE_OP_CONTEXT(rel_Alias_22e56a91218d2f0d_op_ctxt,rel_Alias_22e56a91218d2f0d->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_MethodSSA_a9f7ed6321abcd80_op_ctxt,rel_MethodSSA_a9f7ed6321abcd80->createContext());
CREATE_OP_CONTEXT(rel_MethodUpdate_b9129e3e14098516_op_ctxt,rel_MethodUpdate_b9129e3e14098516->createContext());
for(const auto& env0 : *rel_CallGraphEdge_333c9d69fed5eee7) {
auto range = rel_MethodUpdate_b9129e3e14098516->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_MethodUpdate_b9129e3e14098516_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_MethodSSA_a9f7ed6321abcd80->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0]), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0]), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_MethodSSA_a9f7ed6321abcd80_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_ActualReturn_8bc9db09e057aa22->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env2[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env2[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_Alias_22e56a91218d2f0d->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_Alias_22e56a91218d2f0d_op_ctxt));
for(const auto& env4 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env4[0]),ramBitCast(env4[1]),ramBitCast(env3[2]),ramBitCast(env4[3]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,toCtx,from,fromCtx,"data") :- 
   CallGraphEdge(invo,_,meth,_),
   MethodUpdate(idx,meth),
   MethodSSA(fromIdx,idx,meth),
   ActualReturn(fromIdx,invo,from),
   Alias(to,toCtx,from,fromCtx).
in file main.dl [946:1-952:37])_");
if(!(rel_MethodUpdate_b9129e3e14098516->empty()) && !(rel_ActualReturn_8bc9db09e057aa22->empty()) && !(rel_MethodSSA_a9f7ed6321abcd80->empty()) && !(rel_Alias_22e56a91218d2f0d->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt,rel_ActualReturn_8bc9db09e057aa22->createContext());
CREATE_OP_CONTEXT(rel_Alias_22e56a91218d2f0d_op_ctxt,rel_Alias_22e56a91218d2f0d->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_MethodSSA_a9f7ed6321abcd80_op_ctxt,rel_MethodSSA_a9f7ed6321abcd80->createContext());
CREATE_OP_CONTEXT(rel_MethodUpdate_b9129e3e14098516_op_ctxt,rel_MethodUpdate_b9129e3e14098516->createContext());
for(const auto& env0 : *rel_CallGraphEdge_333c9d69fed5eee7) {
auto range = rel_MethodUpdate_b9129e3e14098516->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_MethodUpdate_b9129e3e14098516_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_MethodSSA_a9f7ed6321abcd80->lowerUpperRange_011(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0]), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0]), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_MethodSSA_a9f7ed6321abcd80_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_ActualReturn_8bc9db09e057aa22->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env2[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env2[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_Alias_22e56a91218d2f0d->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env3[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env3[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_Alias_22e56a91218d2f0d_op_ctxt));
for(const auto& env4 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env4[0]),ramBitCast(env4[1]),ramBitCast(env3[2]),ramBitCast(env4[3]),ramBitCast(RamSigned(0))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(from,fromCtx,from,fromCtx,"normal") :- 
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [965:1-967:38])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_VarPointsTo_c1a9f897b9f324f0) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(from,fromCtx,from,fromCtx,"equiv") :- 
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [965:1-967:38])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_VarPointsTo_c1a9f897b9f324f0) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(RamSigned(1))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"normal") :- 
   CallGraphEdge(invo,_,meth,_),
   ActualParam(_,invo,from),
   ActualReturn(_,invo,to),
   !LocalMethod(meth),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [893:1-900:21])_");
if(!(rel_ActualReturn_8bc9db09e057aa22->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_ActualParam_b7a735170493e717->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt,rel_ActualReturn_8bc9db09e057aa22->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_LocalMethod_5b358702fac6f178_op_ctxt,rel_LocalMethod_5b358702fac6f178->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_CallGraphEdge_333c9d69fed5eee7) {
if( !(rel_LocalMethod_5b358702fac6f178->contains(Tuple<RamDomain,1>{{ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_LocalMethod_5b358702fac6f178_op_ctxt)))) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_ActualReturn_8bc9db09e057aa22->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env3 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env1[2]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[2]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env2[2]),ramBitCast(env3[1]),ramBitCast(env1[2]),ramBitCast(env3[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"normal") :- 
   CallGraphEdge(invo,_,meth,_),
   ActualParam(_,invo,from),
   ActualReturn(_,invo,to),
   meth = "__phi__",
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [893:1-900:21])_");
if(!(rel_ActualReturn_8bc9db09e057aa22->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_ActualParam_b7a735170493e717->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt,rel_ActualReturn_8bc9db09e057aa22->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
auto range = rel_CallGraphEdge_333c9d69fed5eee7->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(3)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(3)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_ActualReturn_8bc9db09e057aa22->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env3 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env1[2]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[2]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env2[2]),ramBitCast(env3[1]),ramBitCast(env1[2]),ramBitCast(env3[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"normal") :- 
   CallGraphEdge(invo,_,meth,_),
   ActualKeyParam(_,invo,from),
   ActualReturn(_,invo,to),
   !LocalMethod(meth),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [893:1-900:21])_");
if(!(rel_ActualReturn_8bc9db09e057aa22->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_ActualKeyParam_c37ca7251a780d4f->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualKeyParam_c37ca7251a780d4f_op_ctxt,rel_ActualKeyParam_c37ca7251a780d4f->createContext());
CREATE_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt,rel_ActualReturn_8bc9db09e057aa22->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_LocalMethod_5b358702fac6f178_op_ctxt,rel_LocalMethod_5b358702fac6f178->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_CallGraphEdge_333c9d69fed5eee7) {
if( !(rel_LocalMethod_5b358702fac6f178->contains(Tuple<RamDomain,1>{{ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_LocalMethod_5b358702fac6f178_op_ctxt)))) {
auto range = rel_ActualKeyParam_c37ca7251a780d4f->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualKeyParam_c37ca7251a780d4f_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_ActualReturn_8bc9db09e057aa22->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env3 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env1[2]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[2]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env2[2]),ramBitCast(env3[1]),ramBitCast(env1[2]),ramBitCast(env3[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"normal") :- 
   CallGraphEdge(invo,_,meth,_),
   ActualKeyParam(_,invo,from),
   ActualReturn(_,invo,to),
   meth = "__phi__",
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [893:1-900:21])_");
if(!(rel_ActualReturn_8bc9db09e057aa22->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_ActualKeyParam_c37ca7251a780d4f->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualKeyParam_c37ca7251a780d4f_op_ctxt,rel_ActualKeyParam_c37ca7251a780d4f->createContext());
CREATE_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt,rel_ActualReturn_8bc9db09e057aa22->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
auto range = rel_CallGraphEdge_333c9d69fed5eee7->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(3)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(3)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt));
for(const auto& env0 : range) {
auto range = rel_ActualKeyParam_c37ca7251a780d4f->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualKeyParam_c37ca7251a780d4f_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_ActualReturn_8bc9db09e057aa22->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env3 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env1[2]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[2]), ramBitCast(env3[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env2[2]),ramBitCast(env3[1]),ramBitCast(env1[2]),ramBitCast(env3[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"normal") :- 
   CallGraphEdge(invo,_,meth,_),
   ParamToParamFlow(toIdx,fromIdx,meth),
   ActualParam(toIdx,invo,to),
   ActualParam(fromIdx,invo,from),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [903:1-910:21])_");
if(!(rel_ActualParam_b7a735170493e717->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_ParamToParamFlow_62719282a92885f3->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamFlow_62719282a92885f3_op_ctxt,rel_ParamToParamFlow_62719282a92885f3->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_CallGraphEdge_333c9d69fed5eee7) {
auto range = rel_ParamToParamFlow_62719282a92885f3->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_ParamToParamFlow_62719282a92885f3_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env2[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env4 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env3[2]), ramBitCast(env4[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env3[2]), ramBitCast(env4[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env2[2]),ramBitCast(env4[1]),ramBitCast(env3[2]),ramBitCast(env4[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"normal") :- 
   AssignVar(to,from),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [917:1-924:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_AssignVar_b173aa4bb6352b3a->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_AssignVar_b173aa4bb6352b3a_op_ctxt,rel_AssignVar_b173aa4bb6352b3a->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_AssignVar_b173aa4bb6352b3a) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"normal") :- 
   AssignBinOp(to,from,_,_),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [917:1-924:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_AssignBinOp_ac278042ec33e40a->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_AssignBinOp_ac278042ec33e40a_op_ctxt,rel_AssignBinOp_ac278042ec33e40a->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_AssignBinOp_ac278042ec33e40a) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"normal") :- 
   AssignBinOp(to,_,_,from),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [917:1-924:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_AssignBinOp_ac278042ec33e40a->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_AssignBinOp_ac278042ec33e40a_op_ctxt,rel_AssignBinOp_ac278042ec33e40a->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_AssignBinOp_ac278042ec33e40a) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[3]),ramBitCast(env1[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"normal") :- 
   LoadIndex(to,from,_),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [917:1-924:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_LoadIndex_3a07e512c7efb9bd->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_LoadIndex_3a07e512c7efb9bd_op_ctxt,rel_LoadIndex_3a07e512c7efb9bd->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_LoadIndex_3a07e512c7efb9bd) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"normal") :- 
   StoreIndex(to,_,from),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [917:1-924:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreIndex_bab2c0876dfa7ece->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_StoreIndex_bab2c0876dfa7ece_op_ctxt,rel_StoreIndex_bab2c0876dfa7ece->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreIndex_bab2c0876dfa7ece) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[2]),ramBitCast(env1[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"normal") :- 
   LoadField(to,from,_),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [917:1-924:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_LoadField_6018b2c33f454495->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_LoadField_6018b2c33f454495_op_ctxt,rel_LoadField_6018b2c33f454495->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_LoadField_6018b2c33f454495) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"normal") :- 
   StoreField(to,_,from),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [917:1-924:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreField_7d8d16151c0ea49b->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_StoreField_7d8d16151c0ea49b_op_ctxt,rel_StoreField_7d8d16151c0ea49b->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreField_7d8d16151c0ea49b) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[2]),ramBitCast(env1[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"normal") :- 
   LoadSlice(to,from,_,_,_),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [917:1-924:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_LoadSlice_e590a0ee3f45cac8->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_LoadSlice_e590a0ee3f45cac8_op_ctxt,rel_LoadSlice_e590a0ee3f45cac8->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_LoadSlice_e590a0ee3f45cac8) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"normal") :- 
   StoreSlice(to,_,_,_,from),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [917:1-924:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreSlice_2d8a31bc728a3bbd->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_StoreSlice_2d8a31bc728a3bbd_op_ctxt,rel_StoreSlice_2d8a31bc728a3bbd->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreSlice_2d8a31bc728a3bbd) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[4]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[4]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[4]),ramBitCast(env1[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"normal") :- 
   StoreIndexSSA(to,_,_,from),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [917:1-924:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreIndexSSA_431249b1dfe65e85->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_StoreIndexSSA_431249b1dfe65e85_op_ctxt,rel_StoreIndexSSA_431249b1dfe65e85->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreIndexSSA_431249b1dfe65e85) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[3]),ramBitCast(env1[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"normal") :- 
   StoreFieldSSA(to,_,_,from),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [917:1-924:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreFieldSSA_051b143b9d011002->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_StoreFieldSSA_051b143b9d011002_op_ctxt,rel_StoreFieldSSA_051b143b9d011002->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreFieldSSA_051b143b9d011002) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[3]),ramBitCast(env1[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"normal") :- 
   StoreSliceSSA(to,_,_,_,_,from),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [917:1-924:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreSliceSSA_f26b3c4e2aecada2->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_StoreSliceSSA_f26b3c4e2aecada2_op_ctxt,rel_StoreSliceSSA_f26b3c4e2aecada2->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreSliceSSA_f26b3c4e2aecada2) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[5]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[5]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[5]),ramBitCast(env1[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"normal") :- 
   StoreIndexSSA(to,from,_,_),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [917:1-924:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreIndexSSA_431249b1dfe65e85->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_StoreIndexSSA_431249b1dfe65e85_op_ctxt,rel_StoreIndexSSA_431249b1dfe65e85->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreIndexSSA_431249b1dfe65e85) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"normal") :- 
   StoreFieldSSA(to,from,_,_),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [917:1-924:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreFieldSSA_051b143b9d011002->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_StoreFieldSSA_051b143b9d011002_op_ctxt,rel_StoreFieldSSA_051b143b9d011002->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreFieldSSA_051b143b9d011002) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"normal") :- 
   StoreSliceSSA(to,from,_,_,_,_),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [917:1-924:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreSliceSSA_f26b3c4e2aecada2->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_StoreSliceSSA_f26b3c4e2aecada2_op_ctxt,rel_StoreSliceSSA_f26b3c4e2aecada2->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreSliceSSA_f26b3c4e2aecada2) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(from,fromCtx,to,midCtx,"normal") :- 
   StoreIndexSSA(to,mid,_,_),
   VarPointsTo(to,midCtx,value,hctx),
   VarPointsTo(mid,midCtx,value,hctx),
   Alias(to,midCtx,from,fromCtx).
in file main.dl [933:1-939:20])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreIndexSSA_431249b1dfe65e85->empty()) && !(rel_Alias_22e56a91218d2f0d->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Alias_22e56a91218d2f0d_op_ctxt,rel_Alias_22e56a91218d2f0d->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_StoreIndexSSA_431249b1dfe65e85_op_ctxt,rel_StoreIndexSSA_431249b1dfe65e85->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreIndexSSA_431249b1dfe65e85) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( rel_VarPointsTo_c1a9f897b9f324f0->contains(Tuple<RamDomain,4>{{ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt))) {
auto range = rel_Alias_22e56a91218d2f0d->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_Alias_22e56a91218d2f0d_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env2[2]),ramBitCast(env2[3]),ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(from,fromCtx,to,midCtx,"normal") :- 
   StoreFieldSSA(to,mid,_,_),
   VarPointsTo(to,midCtx,value,hctx),
   VarPointsTo(mid,midCtx,value,hctx),
   Alias(to,midCtx,from,fromCtx).
in file main.dl [933:1-939:20])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreFieldSSA_051b143b9d011002->empty()) && !(rel_Alias_22e56a91218d2f0d->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Alias_22e56a91218d2f0d_op_ctxt,rel_Alias_22e56a91218d2f0d->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_StoreFieldSSA_051b143b9d011002_op_ctxt,rel_StoreFieldSSA_051b143b9d011002->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreFieldSSA_051b143b9d011002) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( rel_VarPointsTo_c1a9f897b9f324f0->contains(Tuple<RamDomain,4>{{ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt))) {
auto range = rel_Alias_22e56a91218d2f0d->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_Alias_22e56a91218d2f0d_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env2[2]),ramBitCast(env2[3]),ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(from,fromCtx,to,midCtx,"normal") :- 
   StoreSliceSSA(to,mid,_,_,_,_),
   VarPointsTo(to,midCtx,value,hctx),
   VarPointsTo(mid,midCtx,value,hctx),
   Alias(to,midCtx,from,fromCtx).
in file main.dl [933:1-939:20])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreSliceSSA_f26b3c4e2aecada2->empty()) && !(rel_Alias_22e56a91218d2f0d->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Alias_22e56a91218d2f0d_op_ctxt,rel_Alias_22e56a91218d2f0d->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_StoreSliceSSA_f26b3c4e2aecada2_op_ctxt,rel_StoreSliceSSA_f26b3c4e2aecada2->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreSliceSSA_f26b3c4e2aecada2) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( rel_VarPointsTo_c1a9f897b9f324f0->contains(Tuple<RamDomain,4>{{ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt))) {
auto range = rel_Alias_22e56a91218d2f0d->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_Alias_22e56a91218d2f0d_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env2[2]),ramBitCast(env2[3]),ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(RamSigned(10))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(from,fromCtx,to,midCtx,"data") :- 
   StoreIndexSSA(to,mid,_,_),
   VarPointsTo(to,midCtx,value,hctx),
   VarPointsTo(mid,midCtx,value,hctx),
   Alias(to,midCtx,from,fromCtx).
in file main.dl [933:1-939:20])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreIndexSSA_431249b1dfe65e85->empty()) && !(rel_Alias_22e56a91218d2f0d->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Alias_22e56a91218d2f0d_op_ctxt,rel_Alias_22e56a91218d2f0d->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_StoreIndexSSA_431249b1dfe65e85_op_ctxt,rel_StoreIndexSSA_431249b1dfe65e85->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreIndexSSA_431249b1dfe65e85) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( rel_VarPointsTo_c1a9f897b9f324f0->contains(Tuple<RamDomain,4>{{ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt))) {
auto range = rel_Alias_22e56a91218d2f0d->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_Alias_22e56a91218d2f0d_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env2[2]),ramBitCast(env2[3]),ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(RamSigned(0))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(from,fromCtx,to,midCtx,"data") :- 
   StoreFieldSSA(to,mid,_,_),
   VarPointsTo(to,midCtx,value,hctx),
   VarPointsTo(mid,midCtx,value,hctx),
   Alias(to,midCtx,from,fromCtx).
in file main.dl [933:1-939:20])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreFieldSSA_051b143b9d011002->empty()) && !(rel_Alias_22e56a91218d2f0d->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Alias_22e56a91218d2f0d_op_ctxt,rel_Alias_22e56a91218d2f0d->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_StoreFieldSSA_051b143b9d011002_op_ctxt,rel_StoreFieldSSA_051b143b9d011002->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreFieldSSA_051b143b9d011002) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( rel_VarPointsTo_c1a9f897b9f324f0->contains(Tuple<RamDomain,4>{{ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt))) {
auto range = rel_Alias_22e56a91218d2f0d->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_Alias_22e56a91218d2f0d_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env2[2]),ramBitCast(env2[3]),ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(RamSigned(0))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(from,fromCtx,to,midCtx,"data") :- 
   StoreSliceSSA(to,mid,_,_,_,_),
   VarPointsTo(to,midCtx,value,hctx),
   VarPointsTo(mid,midCtx,value,hctx),
   Alias(to,midCtx,from,fromCtx).
in file main.dl [933:1-939:20])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreSliceSSA_f26b3c4e2aecada2->empty()) && !(rel_Alias_22e56a91218d2f0d->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Alias_22e56a91218d2f0d_op_ctxt,rel_Alias_22e56a91218d2f0d->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_StoreSliceSSA_f26b3c4e2aecada2_op_ctxt,rel_StoreSliceSSA_f26b3c4e2aecada2->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreSliceSSA_f26b3c4e2aecada2) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( rel_VarPointsTo_c1a9f897b9f324f0->contains(Tuple<RamDomain,4>{{ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt))) {
auto range = rel_Alias_22e56a91218d2f0d->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_Alias_22e56a91218d2f0d_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env2[2]),ramBitCast(env2[3]),ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(RamSigned(0))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"data") :- 
   AssignBinOp(to,from,_,_),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [1017:1-1023:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_AssignBinOp_ac278042ec33e40a->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_AssignBinOp_ac278042ec33e40a_op_ctxt,rel_AssignBinOp_ac278042ec33e40a->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_AssignBinOp_ac278042ec33e40a) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(RamSigned(0))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"data") :- 
   AssignBinOp(to,_,_,from),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [1017:1-1023:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_AssignBinOp_ac278042ec33e40a->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_AssignBinOp_ac278042ec33e40a_op_ctxt,rel_AssignBinOp_ac278042ec33e40a->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_AssignBinOp_ac278042ec33e40a) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[3]),ramBitCast(env1[1]),ramBitCast(RamSigned(0))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"data") :- 
   LoadIndex(to,from,_),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [1017:1-1023:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_LoadIndex_3a07e512c7efb9bd->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_LoadIndex_3a07e512c7efb9bd_op_ctxt,rel_LoadIndex_3a07e512c7efb9bd->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_LoadIndex_3a07e512c7efb9bd) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(RamSigned(0))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"data") :- 
   StoreIndex(to,_,from),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [1017:1-1023:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreIndex_bab2c0876dfa7ece->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_StoreIndex_bab2c0876dfa7ece_op_ctxt,rel_StoreIndex_bab2c0876dfa7ece->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreIndex_bab2c0876dfa7ece) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[2]),ramBitCast(env1[1]),ramBitCast(RamSigned(0))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"data") :- 
   LoadField(to,from,_),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [1017:1-1023:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_LoadField_6018b2c33f454495->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_LoadField_6018b2c33f454495_op_ctxt,rel_LoadField_6018b2c33f454495->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_LoadField_6018b2c33f454495) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(RamSigned(0))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"data") :- 
   StoreField(to,_,from),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [1017:1-1023:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreField_7d8d16151c0ea49b->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_StoreField_7d8d16151c0ea49b_op_ctxt,rel_StoreField_7d8d16151c0ea49b->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreField_7d8d16151c0ea49b) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[2]),ramBitCast(env1[1]),ramBitCast(RamSigned(0))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"data") :- 
   LoadSlice(to,from,_,_,_),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [1017:1-1023:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_LoadSlice_e590a0ee3f45cac8->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_LoadSlice_e590a0ee3f45cac8_op_ctxt,rel_LoadSlice_e590a0ee3f45cac8->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_LoadSlice_e590a0ee3f45cac8) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(RamSigned(0))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"data") :- 
   StoreSlice(to,_,_,_,from),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [1017:1-1023:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreSlice_2d8a31bc728a3bbd->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_StoreSlice_2d8a31bc728a3bbd_op_ctxt,rel_StoreSlice_2d8a31bc728a3bbd->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreSlice_2d8a31bc728a3bbd) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[4]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[4]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[4]),ramBitCast(env1[1]),ramBitCast(RamSigned(0))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"data") :- 
   StoreIndexSSA(to,_,_,from),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [1017:1-1023:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreIndexSSA_431249b1dfe65e85->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_StoreIndexSSA_431249b1dfe65e85_op_ctxt,rel_StoreIndexSSA_431249b1dfe65e85->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreIndexSSA_431249b1dfe65e85) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[3]),ramBitCast(env1[1]),ramBitCast(RamSigned(0))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"data") :- 
   StoreFieldSSA(to,_,_,from),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [1017:1-1023:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreFieldSSA_051b143b9d011002->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_StoreFieldSSA_051b143b9d011002_op_ctxt,rel_StoreFieldSSA_051b143b9d011002->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreFieldSSA_051b143b9d011002) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[3]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[3]),ramBitCast(env1[1]),ramBitCast(RamSigned(0))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,fromCtx,from,fromCtx,"data") :- 
   StoreSliceSSA(to,_,_,_,_,from),
   VarPointsTo(to,fromCtx,_,_),
   VarPointsTo(from,fromCtx,_,_).
in file main.dl [1017:1-1023:21])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_StoreSliceSSA_f26b3c4e2aecada2->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_StoreSliceSSA_f26b3c4e2aecada2_op_ctxt,rel_StoreSliceSSA_f26b3c4e2aecada2->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_StoreSliceSSA_f26b3c4e2aecada2) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[5]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[5]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt)).empty()) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env0[5]),ramBitCast(env1[1]),ramBitCast(RamSigned(0))}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt,rel_delta_FlowFromEdge_06b5167ac5e9217c->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
for(const auto& env0 : *rel_FlowFromEdge_6f9cb97dfaad1a54) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_delta_FlowFromEdge_06b5167ac5e9217c->insert(tuple,READ_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(FlowFromEdge(to,toCtx,from,fromCtx,"equiv") :- 
   FlowFromEdge(to,toCtx,from,fromCtx,"normal"),
   StoreIndexSSA(to,from,_,_).
in file main.dl [970:1-973:59])_");
if(!(rel_delta_FlowFromEdge_06b5167ac5e9217c->empty()) && !(rel_StoreIndexSSA_431249b1dfe65e85->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt,rel_delta_FlowFromEdge_06b5167ac5e9217c->createContext());
CREATE_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt,rel_new_FlowFromEdge_4b44b140131ea495->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_StoreIndexSSA_431249b1dfe65e85_op_ctxt,rel_StoreIndexSSA_431249b1dfe65e85->createContext());
auto range = rel_delta_FlowFromEdge_06b5167ac5e9217c->lowerUpperRange_00001(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(10))}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(10))}},READ_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt));
for(const auto& env0 : range) {
if( !rel_StoreIndexSSA_431249b1dfe65e85->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_StoreIndexSSA_431249b1dfe65e85_op_ctxt)).empty() && !(rel_FlowFromEdge_6f9cb97dfaad1a54->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt)))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(1))}};
rel_new_FlowFromEdge_4b44b140131ea495->insert(tuple,READ_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,toCtx,from,fromCtx,"equiv") :- 
   FlowFromEdge(to,toCtx,from,fromCtx,"normal"),
   StoreFieldSSA(to,from,_,_).
in file main.dl [970:1-973:59])_");
if(!(rel_delta_FlowFromEdge_06b5167ac5e9217c->empty()) && !(rel_StoreFieldSSA_051b143b9d011002->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt,rel_delta_FlowFromEdge_06b5167ac5e9217c->createContext());
CREATE_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt,rel_new_FlowFromEdge_4b44b140131ea495->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_StoreFieldSSA_051b143b9d011002_op_ctxt,rel_StoreFieldSSA_051b143b9d011002->createContext());
auto range = rel_delta_FlowFromEdge_06b5167ac5e9217c->lowerUpperRange_00001(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(10))}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(10))}},READ_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt));
for(const auto& env0 : range) {
if( !rel_StoreFieldSSA_051b143b9d011002->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_StoreFieldSSA_051b143b9d011002_op_ctxt)).empty() && !(rel_FlowFromEdge_6f9cb97dfaad1a54->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt)))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(1))}};
rel_new_FlowFromEdge_4b44b140131ea495->insert(tuple,READ_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,toCtx,from,fromCtx,"equiv") :- 
   FlowFromEdge(to,toCtx,from,fromCtx,"normal"),
   StoreSliceSSA(to,from,_,_,_,_).
in file main.dl [970:1-973:59])_");
if(!(rel_delta_FlowFromEdge_06b5167ac5e9217c->empty()) && !(rel_StoreSliceSSA_f26b3c4e2aecada2->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt,rel_delta_FlowFromEdge_06b5167ac5e9217c->createContext());
CREATE_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt,rel_new_FlowFromEdge_4b44b140131ea495->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_StoreSliceSSA_f26b3c4e2aecada2_op_ctxt,rel_StoreSliceSSA_f26b3c4e2aecada2->createContext());
auto range = rel_delta_FlowFromEdge_06b5167ac5e9217c->lowerUpperRange_00001(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(10))}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(10))}},READ_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt));
for(const auto& env0 : range) {
if( !rel_StoreSliceSSA_f26b3c4e2aecada2->lowerUpperRange_110000(Tuple<RamDomain,6>{{ramBitCast(env0[0]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,6>{{ramBitCast(env0[0]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_StoreSliceSSA_f26b3c4e2aecada2_op_ctxt)).empty() && !(rel_FlowFromEdge_6f9cb97dfaad1a54->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt)))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(1))}};
rel_new_FlowFromEdge_4b44b140131ea495->insert(tuple,READ_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,toCtx,from,fromCtx,"equiv") :- 
   FlowFromEdge(to,toCtx,from,fromCtx,"normal"),
   InterProcAssign(to,_,from,_).
in file main.dl [970:1-973:59])_");
if(!(rel_delta_FlowFromEdge_06b5167ac5e9217c->empty()) && !(rel_InterProcAssign_bed60ee93a02e127->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt,rel_delta_FlowFromEdge_06b5167ac5e9217c->createContext());
CREATE_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt,rel_new_FlowFromEdge_4b44b140131ea495->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_InterProcAssign_bed60ee93a02e127_op_ctxt,rel_InterProcAssign_bed60ee93a02e127->createContext());
auto range = rel_delta_FlowFromEdge_06b5167ac5e9217c->lowerUpperRange_00001(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(10))}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(10))}},READ_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt));
for(const auto& env0 : range) {
if( !rel_InterProcAssign_bed60ee93a02e127->lowerUpperRange_1010(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_InterProcAssign_bed60ee93a02e127_op_ctxt)).empty() && !(rel_FlowFromEdge_6f9cb97dfaad1a54->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt)))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(1))}};
rel_new_FlowFromEdge_4b44b140131ea495->insert(tuple,READ_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,toCtx,from,fromCtx,"equiv") :- 
   FlowFromEdge(to,toCtx,from,fromCtx,"normal"),
   AssignVar(to,from).
in file main.dl [970:1-973:59])_");
if(!(rel_delta_FlowFromEdge_06b5167ac5e9217c->empty()) && !(rel_AssignVar_b173aa4bb6352b3a->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt,rel_delta_FlowFromEdge_06b5167ac5e9217c->createContext());
CREATE_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt,rel_new_FlowFromEdge_4b44b140131ea495->createContext());
CREATE_OP_CONTEXT(rel_AssignVar_b173aa4bb6352b3a_op_ctxt,rel_AssignVar_b173aa4bb6352b3a->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
auto range = rel_delta_FlowFromEdge_06b5167ac5e9217c->lowerUpperRange_00001(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(10))}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(10))}},READ_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt));
for(const auto& env0 : range) {
if( rel_AssignVar_b173aa4bb6352b3a->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_AssignVar_b173aa4bb6352b3a_op_ctxt)) && !(rel_FlowFromEdge_6f9cb97dfaad1a54->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt)))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(1))}};
rel_new_FlowFromEdge_4b44b140131ea495->insert(tuple,READ_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,toCtx,from,fromCtx,"equiv") :- 
   FlowFromEdge(to,toCtx,from,fromCtx,"normal"),
   LoadField(to,from,_).
in file main.dl [975:1-977:28])_");
if(!(rel_delta_FlowFromEdge_06b5167ac5e9217c->empty()) && !(rel_LoadField_6018b2c33f454495->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt,rel_delta_FlowFromEdge_06b5167ac5e9217c->createContext());
CREATE_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt,rel_new_FlowFromEdge_4b44b140131ea495->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_LoadField_6018b2c33f454495_op_ctxt,rel_LoadField_6018b2c33f454495->createContext());
auto range = rel_delta_FlowFromEdge_06b5167ac5e9217c->lowerUpperRange_00001(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(10))}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(10))}},READ_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt));
for(const auto& env0 : range) {
if( !rel_LoadField_6018b2c33f454495->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_LoadField_6018b2c33f454495_op_ctxt)).empty() && !(rel_FlowFromEdge_6f9cb97dfaad1a54->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt)))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(1))}};
rel_new_FlowFromEdge_4b44b140131ea495->insert(tuple,READ_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,toCtx,from,fromCtx,"equiv") :- 
   FlowFromEdge(to,toCtx,from,fromCtx,"normal"),
   LoadIndex(to,from,idx),
   IsDataFrameEquivIndexing(idx).
in file main.dl [980:1-983:35])_");
if(!(rel_LoadIndex_3a07e512c7efb9bd->empty()) && !(rel_IsDataFrameEquivIndexing_5de5b08291e74631->empty()) && !(rel_delta_FlowFromEdge_06b5167ac5e9217c->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt,rel_delta_FlowFromEdge_06b5167ac5e9217c->createContext());
CREATE_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt,rel_new_FlowFromEdge_4b44b140131ea495->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_IsDataFrameEquivIndexing_5de5b08291e74631_op_ctxt,rel_IsDataFrameEquivIndexing_5de5b08291e74631->createContext());
CREATE_OP_CONTEXT(rel_LoadIndex_3a07e512c7efb9bd_op_ctxt,rel_LoadIndex_3a07e512c7efb9bd->createContext());
auto range = rel_delta_FlowFromEdge_06b5167ac5e9217c->lowerUpperRange_00001(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(10))}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(10))}},READ_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_FlowFromEdge_6f9cb97dfaad1a54->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt)))) {
auto range = rel_LoadIndex_3a07e512c7efb9bd->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[0]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_LoadIndex_3a07e512c7efb9bd_op_ctxt));
for(const auto& env1 : range) {
if( rel_IsDataFrameEquivIndexing_5de5b08291e74631->contains(Tuple<RamDomain,1>{{ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_IsDataFrameEquivIndexing_5de5b08291e74631_op_ctxt))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(1))}};
rel_new_FlowFromEdge_4b44b140131ea495->insert(tuple,READ_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt));
break;
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,toCtx,from,fromCtx,"equiv") :- 
   FlowFromEdge(to,toCtx,from,fromCtx,"normal"),
   CallGraphEdge(invo,_,meth,_),
   ParamToRetEquivFlow(toIdx,fromIdx,meth),
   ActualParam(fromIdx,invo,from),
   ActualReturn(toIdx,invo,to).
in file main.dl [986:1-991:35])_");
if(!(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_ActualParam_b7a735170493e717->empty()) && !(rel_ParamToRetEquivFlow_cf4bedb68bbe1170->empty()) && !(rel_ActualReturn_8bc9db09e057aa22->empty()) && !(rel_delta_FlowFromEdge_06b5167ac5e9217c->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt,rel_delta_FlowFromEdge_06b5167ac5e9217c->createContext());
CREATE_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt,rel_new_FlowFromEdge_4b44b140131ea495->createContext());
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt,rel_ActualReturn_8bc9db09e057aa22->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
auto range = rel_delta_FlowFromEdge_06b5167ac5e9217c->lowerUpperRange_00001(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(10))}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(10))}},READ_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_FlowFromEdge_6f9cb97dfaad1a54->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt)))) {
for(const auto& env1 : *rel_CallGraphEdge_333c9d69fed5eee7) {
auto range = rel_ParamToRetEquivFlow_cf4bedb68bbe1170->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
for(const auto& env2 : range) {
if( rel_ActualReturn_8bc9db09e057aa22->contains(Tuple<RamDomain,3>{{ramBitCast(env2[0]),ramBitCast(env1[0]),ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt)) && rel_ActualParam_b7a735170493e717->contains(Tuple<RamDomain,3>{{ramBitCast(env2[1]),ramBitCast(env1[0]),ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(1))}};
rel_new_FlowFromEdge_4b44b140131ea495->insert(tuple,READ_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,toCtx,from,fromCtx,"equiv") :- 
   FlowFromEdge(to,toCtx,from,fromCtx,"normal"),
   CallGraphEdge(invo,_,meth,_),
   ParamToRetCondEquivFlow(toIdx,fromIdx,cond_id,meth),
   FlowCondition(cond_id,keyword,content),
   ActualKeyParam(keyword,invo,var),
   ConstantValue(var,content),
   ActualParam(fromIdx,invo,from),
   ActualReturn(toIdx,invo,to).
in file main.dl [992:1-1000:35])_");
if(!(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_ActualKeyParam_c37ca7251a780d4f->empty()) && !(rel_ParamToRetCondEquivFlow_219c5a0dd6644473->empty()) && !(rel_FlowCondition_f30c150f9e6134d8->empty()) && !(rel_ActualParam_b7a735170493e717->empty()) && !(rel_ActualReturn_8bc9db09e057aa22->empty()) && !(rel_delta_FlowFromEdge_06b5167ac5e9217c->empty()) && !(rel_ConstantValue_bf370ded014c6df6->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt,rel_delta_FlowFromEdge_06b5167ac5e9217c->createContext());
CREATE_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt,rel_new_FlowFromEdge_4b44b140131ea495->createContext());
CREATE_OP_CONTEXT(rel_ActualKeyParam_c37ca7251a780d4f_op_ctxt,rel_ActualKeyParam_c37ca7251a780d4f->createContext());
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt,rel_ActualReturn_8bc9db09e057aa22->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_ConstantValue_bf370ded014c6df6_op_ctxt,rel_ConstantValue_bf370ded014c6df6->createContext());
CREATE_OP_CONTEXT(rel_FlowCondition_f30c150f9e6134d8_op_ctxt,rel_FlowCondition_f30c150f9e6134d8->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetCondEquivFlow_219c5a0dd6644473_op_ctxt,rel_ParamToRetCondEquivFlow_219c5a0dd6644473->createContext());
auto range = rel_delta_FlowFromEdge_06b5167ac5e9217c->lowerUpperRange_00001(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(10))}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(10))}},READ_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_FlowFromEdge_6f9cb97dfaad1a54->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt)))) {
for(const auto& env1 : *rel_CallGraphEdge_333c9d69fed5eee7) {
auto range = rel_ParamToRetCondEquivFlow_219c5a0dd6644473->lowerUpperRange_0001(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_ParamToRetCondEquivFlow_219c5a0dd6644473_op_ctxt));
for(const auto& env2 : range) {
if( rel_ActualReturn_8bc9db09e057aa22->contains(Tuple<RamDomain,3>{{ramBitCast(env2[0]),ramBitCast(env1[0]),ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt)) && rel_ActualParam_b7a735170493e717->contains(Tuple<RamDomain,3>{{ramBitCast(env2[1]),ramBitCast(env1[0]),ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt))) {
auto range = rel_FlowCondition_f30c150f9e6134d8->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env2[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env2[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FlowCondition_f30c150f9e6134d8_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_ActualKeyParam_c37ca7251a780d4f->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env3[1]), ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env3[1]), ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualKeyParam_c37ca7251a780d4f_op_ctxt));
for(const auto& env4 : range) {
if( rel_ConstantValue_bf370ded014c6df6->contains(Tuple<RamDomain,2>{{ramBitCast(env4[2]),ramBitCast(env3[2])}},READ_OP_CONTEXT(rel_ConstantValue_bf370ded014c6df6_op_ctxt))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(1))}};
rel_new_FlowFromEdge_4b44b140131ea495->insert(tuple,READ_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt));
break;
}
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,toCtx,from,fromCtx,"equiv") :- 
   FlowFromEdge(to,toCtx,from,fromCtx,"normal"),
   CallGraphEdge(invo,_,meth,_),
   ParamContentToRetCondEquivFlow(toIdx,fromIdx,cond_id,meth),
   FlowCondition(cond_id,keyword,content),
   ActualKeyParam(keyword,invo,var),
   ConstantValue(var,content),
   ActualParam(fromIdx,invo,fromList),
   VarPointsTo(fromList,toCtx,fromListValue,baseHctx),
   VarPointsTo(from,fromCtx,fromValue,hctx),
   IndexContentPointsTo(fromListValue,baseHctx,fromValue,hctx),
   ActualReturn(toIdx,invo,to).
in file main.dl [1001:1-1012:35])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty()) && !(rel_delta_FlowFromEdge_06b5167ac5e9217c->empty()) && !(rel_ActualParam_b7a735170493e717->empty()) && !(rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d->empty()) && !(rel_ConstantValue_bf370ded014c6df6->empty()) && !(rel_ActualReturn_8bc9db09e057aa22->empty()) && !(rel_ActualKeyParam_c37ca7251a780d4f->empty()) && !(rel_FlowCondition_f30c150f9e6134d8->empty()) && !(rel_IndexContentPointsTo_db1dfbfa873aff0a->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt,rel_delta_FlowFromEdge_06b5167ac5e9217c->createContext());
CREATE_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt,rel_new_FlowFromEdge_4b44b140131ea495->createContext());
CREATE_OP_CONTEXT(rel_ActualKeyParam_c37ca7251a780d4f_op_ctxt,rel_ActualKeyParam_c37ca7251a780d4f->createContext());
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt,rel_ActualReturn_8bc9db09e057aa22->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_ConstantValue_bf370ded014c6df6_op_ctxt,rel_ConstantValue_bf370ded014c6df6->createContext());
CREATE_OP_CONTEXT(rel_FlowCondition_f30c150f9e6134d8_op_ctxt,rel_FlowCondition_f30c150f9e6134d8->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_IndexContentPointsTo_db1dfbfa873aff0a_op_ctxt,rel_IndexContentPointsTo_db1dfbfa873aff0a->createContext());
CREATE_OP_CONTEXT(rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d_op_ctxt,rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
auto range = rel_delta_FlowFromEdge_06b5167ac5e9217c->lowerUpperRange_00001(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(10))}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(10))}},READ_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_FlowFromEdge_6f9cb97dfaad1a54->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt)))) {
for(const auto& env1 : *rel_CallGraphEdge_333c9d69fed5eee7) {
auto range = rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d->lowerUpperRange_0001(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2])}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d_op_ctxt));
for(const auto& env2 : range) {
if( rel_ActualReturn_8bc9db09e057aa22->contains(Tuple<RamDomain,3>{{ramBitCast(env2[0]),ramBitCast(env1[0]),ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt))) {
auto range = rel_FlowCondition_f30c150f9e6134d8->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env2[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env2[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FlowCondition_f30c150f9e6134d8_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_ActualKeyParam_c37ca7251a780d4f->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env3[1]), ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env3[1]), ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualKeyParam_c37ca7251a780d4f_op_ctxt));
for(const auto& env4 : range) {
if( rel_ConstantValue_bf370ded014c6df6->contains(Tuple<RamDomain,2>{{ramBitCast(env4[2]),ramBitCast(env3[2])}},READ_OP_CONTEXT(rel_ConstantValue_bf370ded014c6df6_op_ctxt))) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env2[1]), ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env2[1]), ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env5 : range) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env5[2]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env5[2]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env6 : range) {
auto range = rel_VarPointsTo_c1a9f897b9f324f0->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt));
for(const auto& env7 : range) {
if( rel_IndexContentPointsTo_db1dfbfa873aff0a->contains(Tuple<RamDomain,4>{{ramBitCast(env6[2]),ramBitCast(env6[3]),ramBitCast(env7[2]),ramBitCast(env7[3])}},READ_OP_CONTEXT(rel_IndexContentPointsTo_db1dfbfa873aff0a_op_ctxt))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(1))}};
rel_new_FlowFromEdge_4b44b140131ea495->insert(tuple,READ_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt));
break;
}
}
}
}
break;
}
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,toCtx,from,fromCtx,"data") :- 
   FlowFromEdge(to,toCtx,from,fromCtx,"equiv").
in file main.dl [1014:1-1015:53])_");
if(!(rel_delta_FlowFromEdge_06b5167ac5e9217c->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt,rel_delta_FlowFromEdge_06b5167ac5e9217c->createContext());
CREATE_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt,rel_new_FlowFromEdge_4b44b140131ea495->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
auto range = rel_delta_FlowFromEdge_06b5167ac5e9217c->lowerUpperRange_00001(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(1))}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(1))}},READ_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_FlowFromEdge_6f9cb97dfaad1a54->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt)))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(0))}};
rel_new_FlowFromEdge_4b44b140131ea495->insert(tuple,READ_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,toCtx,from,fromCtx,"data") :- 
   FlowFromEdge(to,toCtx,from,fromCtx,"normal"),
   CallGraphEdge(invo,_,meth,_),
   ParamToRetDataFlow(toIdx,fromIdx,meth),
   ActualParam(fromIdx,invo,from),
   ActualReturn(toIdx,invo,to).
in file main.dl [1025:1-1030:35])_");
if(!(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_ActualParam_b7a735170493e717->empty()) && !(rel_ParamToRetDataFlow_4802f16da470059f->empty()) && !(rel_ActualReturn_8bc9db09e057aa22->empty()) && !(rel_delta_FlowFromEdge_06b5167ac5e9217c->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt,rel_delta_FlowFromEdge_06b5167ac5e9217c->createContext());
CREATE_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt,rel_new_FlowFromEdge_4b44b140131ea495->createContext());
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt,rel_ActualReturn_8bc9db09e057aa22->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
auto range = rel_delta_FlowFromEdge_06b5167ac5e9217c->lowerUpperRange_00001(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(10))}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(10))}},READ_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_FlowFromEdge_6f9cb97dfaad1a54->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt)))) {
for(const auto& env1 : *rel_CallGraphEdge_333c9d69fed5eee7) {
auto range = rel_ParamToRetDataFlow_4802f16da470059f->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
for(const auto& env2 : range) {
if( rel_ActualReturn_8bc9db09e057aa22->contains(Tuple<RamDomain,3>{{ramBitCast(env2[0]),ramBitCast(env1[0]),ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt)) && rel_ActualParam_b7a735170493e717->contains(Tuple<RamDomain,3>{{ramBitCast(env2[1]),ramBitCast(env1[0]),ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(0))}};
rel_new_FlowFromEdge_4b44b140131ea495->insert(tuple,READ_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(FlowFromEdge(to,toCtx,from,fromCtx,"data") :- 
   FlowFromEdge(to,toCtx,from,fromCtx,"normal"),
   CallGraphEdge(invo,_,meth,_),
   ParamToParamDataFlow(toIdx,fromIdx,meth),
   ActualParam(fromIdx,invo,from),
   ActualParam(toIdx,invo,to).
in file main.dl [1032:1-1037:34])_");
if(!(rel_ParamToParamDataFlow_0bd19d43cb842556->empty()) && !(rel_delta_FlowFromEdge_06b5167ac5e9217c->empty()) && !(rel_ActualParam_b7a735170493e717->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt,rel_delta_FlowFromEdge_06b5167ac5e9217c->createContext());
CREATE_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt,rel_new_FlowFromEdge_4b44b140131ea495->createContext());
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamDataFlow_0bd19d43cb842556_op_ctxt,rel_ParamToParamDataFlow_0bd19d43cb842556->createContext());
auto range = rel_delta_FlowFromEdge_06b5167ac5e9217c->lowerUpperRange_00001(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(10))}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(10))}},READ_OP_CONTEXT(rel_delta_FlowFromEdge_06b5167ac5e9217c_op_ctxt));
for(const auto& env0 : range) {
if( !(rel_FlowFromEdge_6f9cb97dfaad1a54->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(0))}},READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt)))) {
for(const auto& env1 : *rel_CallGraphEdge_333c9d69fed5eee7) {
auto range = rel_ParamToParamDataFlow_0bd19d43cb842556->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_ParamToParamDataFlow_0bd19d43cb842556_op_ctxt));
for(const auto& env2 : range) {
if( rel_ActualParam_b7a735170493e717->contains(Tuple<RamDomain,3>{{ramBitCast(env2[0]),ramBitCast(env1[0]),ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt)) && rel_ActualParam_b7a735170493e717->contains(Tuple<RamDomain,3>{{ramBitCast(env2[1]),ramBitCast(env1[0]),ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(RamSigned(0))}};
rel_new_FlowFromEdge_4b44b140131ea495->insert(tuple,READ_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt));
}
}
}
}
}
}
();}
if(rel_new_FlowFromEdge_4b44b140131ea495->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_new_FlowFromEdge_4b44b140131ea495_op_ctxt,rel_new_FlowFromEdge_4b44b140131ea495->createContext());
CREATE_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt,rel_FlowFromEdge_6f9cb97dfaad1a54->createContext());
for(const auto& env0 : *rel_new_FlowFromEdge_4b44b140131ea495) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_FlowFromEdge_6f9cb97dfaad1a54->insert(tuple,READ_OP_CONTEXT(rel_FlowFromEdge_6f9cb97dfaad1a54_op_ctxt));
}
}
();std::swap(rel_delta_FlowFromEdge_06b5167ac5e9217c, rel_new_FlowFromEdge_4b44b140131ea495);
rel_new_FlowFromEdge_4b44b140131ea495->purge();
iter++;
}
iter = 0;
rel_delta_FlowFromEdge_06b5167ac5e9217c->purge();
rel_new_FlowFromEdge_4b44b140131ea495->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\ttoCtx\tfrom\tfromCtx\ttag"},{"auxArity","0"},{"name","FlowFromEdge"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"to\", \"toCtx\", \"from\", \"fromCtx\", \"tag\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\", \"s:symbol\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_FlowFromEdge_6f9cb97dfaad1a54);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_AssignBinOp_ac278042ec33e40a->purge();
if (pruneImdtRels) rel_FlowCondition_f30c150f9e6134d8->purge();
if (pruneImdtRels) rel_IsDataFrameEquivIndexing_5de5b08291e74631->purge();
if (pruneImdtRels) rel_LoadSlice_e590a0ee3f45cac8->purge();
if (pruneImdtRels) rel_LocalMethod_5b358702fac6f178->purge();
if (pruneImdtRels) rel_MethodSSA_a9f7ed6321abcd80->purge();
if (pruneImdtRels) rel_MethodUpdate_b9129e3e14098516->purge();
if (pruneImdtRels) rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d->purge();
if (pruneImdtRels) rel_ParamToParamDataFlow_0bd19d43cb842556->purge();
if (pruneImdtRels) rel_ParamToParamFlow_62719282a92885f3->purge();
if (pruneImdtRels) rel_ParamToRetCondEquivFlow_219c5a0dd6644473->purge();
if (pruneImdtRels) rel_ParamToRetDataFlow_4802f16da470059f->purge();
if (pruneImdtRels) rel_ParamToRetEquivFlow_cf4bedb68bbe1170->purge();
if (pruneImdtRels) rel_StoreField_7d8d16151c0ea49b->purge();
if (pruneImdtRels) rel_StoreFieldSSA_051b143b9d011002->purge();
if (pruneImdtRels) rel_StoreIndexSSA_431249b1dfe65e85->purge();
if (pruneImdtRels) rel_StoreSlice_2d8a31bc728a3bbd->purge();
if (pruneImdtRels) rel_StoreSliceSSA_f26b3c4e2aecada2->purge();
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_FlowFromExtended_0e80512d50e3e15b {
public:
 Stratum_FlowFromExtended_0e80512d50e3e15b(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_1_2_3_4__11111__11000::Type& rel_FlowFrom_0c9cf4995aeb9ef7,t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type& rel_FlowFromExtended_7fd58681b534e204);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiiii__0_1_2_3_4__11111__11000::Type* rel_FlowFrom_0c9cf4995aeb9ef7;
t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type* rel_FlowFromExtended_7fd58681b534e204;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_FlowFromExtended_0e80512d50e3e15b::Stratum_FlowFromExtended_0e80512d50e3e15b(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_1_2_3_4__11111__11000::Type& rel_FlowFrom_0c9cf4995aeb9ef7,t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type& rel_FlowFromExtended_7fd58681b534e204):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_FlowFrom_0c9cf4995aeb9ef7(&rel_FlowFrom_0c9cf4995aeb9ef7),
rel_FlowFromExtended_7fd58681b534e204(&rel_FlowFromExtended_7fd58681b534e204){
}

void Stratum_FlowFromExtended_0e80512d50e3e15b::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(FlowFromExtended(to,toCtx,from,fromCtx,tag) :- 
   FlowFrom(to,toCtx,from,fromCtx,tag).
in file main.dl [1062:1-1063:45])_");
if(!(rel_FlowFrom_0c9cf4995aeb9ef7->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFrom_0c9cf4995aeb9ef7_op_ctxt,rel_FlowFrom_0c9cf4995aeb9ef7->createContext());
CREATE_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt,rel_FlowFromExtended_7fd58681b534e204->createContext());
for(const auto& env0 : *rel_FlowFrom_0c9cf4995aeb9ef7) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_FlowFromExtended_7fd58681b534e204->insert(tuple,READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt));
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\ttoCtx\tfrom\tfromCtx\ttag"},{"auxArity","0"},{"name","FlowFromExtended"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"to\", \"toCtx\", \"from\", \"fromCtx\", \"tag\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\", \"s:symbol\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_FlowFromExtended_7fd58681b534e204);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_FormalParam_d3df8d7821c3636f {
public:
 Stratum_FormalParam_d3df8d7821c3636f(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1_0_2__010__111::Type& rel_FormalParam_f381be5dce5c9780);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__1_0_2__010__111::Type* rel_FormalParam_f381be5dce5c9780;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_FormalParam_d3df8d7821c3636f::Stratum_FormalParam_d3df8d7821c3636f(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1_0_2__010__111::Type& rel_FormalParam_f381be5dce5c9780):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_FormalParam_f381be5dce5c9780(&rel_FormalParam_f381be5dce5c9780){
}

void Stratum_FormalParam_d3df8d7821c3636f::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","index\tmeth\tvar"},{"auxArity","0"},{"fact-dir","."},{"name","FormalParam"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"index\", \"meth\", \"var\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"i:number\", \"s:Method\", \"s:Var\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_FormalParam_f381be5dce5c9780);
} catch (std::exception& e) {std::cerr << "Error loading FormalParam data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_FormalReturn_926c0f92131927c7 {
public:
 Stratum_FormalReturn_926c0f92131927c7(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1_0_2__010__111::Type& rel_FormalReturn_62e4844334f73406);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__1_0_2__010__111::Type* rel_FormalReturn_62e4844334f73406;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_FormalReturn_926c0f92131927c7::Stratum_FormalReturn_926c0f92131927c7(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1_0_2__010__111::Type& rel_FormalReturn_62e4844334f73406):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_FormalReturn_62e4844334f73406(&rel_FormalReturn_62e4844334f73406){
}

void Stratum_FormalReturn_926c0f92131927c7::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","index\tmeth\tvar"},{"auxArity","0"},{"fact-dir","."},{"name","FormalReturn"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"index\", \"meth\", \"var\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"i:number\", \"s:Method\", \"s:Var\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_FormalReturn_62e4844334f73406);
} catch (std::exception& e) {std::cerr << "Error loading FormalReturn data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_InterProcAssign_e4be1f9ccf593a60 {
public:
 Stratum_InterProcAssign_e4be1f9ccf593a60(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualKeyParam_c37ca7251a780d4f,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualParam_b7a735170493e717,t_btree_iii__1_0_2__010__110__111::Type& rel_ActualReturn_8bc9db09e057aa22,t_btree_iiii__0_1_2_3__1111::Type& rel_ArityMatch_1f1fc51deec0d387,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_i__0__1::Type& rel_FilteredMethod_3007b0a4b117f645,t_btree_iii__1_0_2__010__111::Type& rel_FormalParam_f381be5dce5c9780,t_btree_iii__1_0_2__010__111::Type& rel_FormalReturn_62e4844334f73406,t_btree_iiii__0_2_1_3__1010__1111::Type& rel_InterProcAssign_bed60ee93a02e127);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__1__0_1_2__010__100__110__111::Type* rel_ActualKeyParam_c37ca7251a780d4f;
t_btree_iii__1__0_1_2__010__100__110__111::Type* rel_ActualParam_b7a735170493e717;
t_btree_iii__1_0_2__010__110__111::Type* rel_ActualReturn_8bc9db09e057aa22;
t_btree_iiii__0_1_2_3__1111::Type* rel_ArityMatch_1f1fc51deec0d387;
t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type* rel_CallGraphEdge_333c9d69fed5eee7;
t_btree_i__0__1::Type* rel_FilteredMethod_3007b0a4b117f645;
t_btree_iii__1_0_2__010__111::Type* rel_FormalParam_f381be5dce5c9780;
t_btree_iii__1_0_2__010__111::Type* rel_FormalReturn_62e4844334f73406;
t_btree_iiii__0_2_1_3__1010__1111::Type* rel_InterProcAssign_bed60ee93a02e127;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_InterProcAssign_e4be1f9ccf593a60::Stratum_InterProcAssign_e4be1f9ccf593a60(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualKeyParam_c37ca7251a780d4f,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualParam_b7a735170493e717,t_btree_iii__1_0_2__010__110__111::Type& rel_ActualReturn_8bc9db09e057aa22,t_btree_iiii__0_1_2_3__1111::Type& rel_ArityMatch_1f1fc51deec0d387,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_i__0__1::Type& rel_FilteredMethod_3007b0a4b117f645,t_btree_iii__1_0_2__010__111::Type& rel_FormalParam_f381be5dce5c9780,t_btree_iii__1_0_2__010__111::Type& rel_FormalReturn_62e4844334f73406,t_btree_iiii__0_2_1_3__1010__1111::Type& rel_InterProcAssign_bed60ee93a02e127):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_ActualKeyParam_c37ca7251a780d4f(&rel_ActualKeyParam_c37ca7251a780d4f),
rel_ActualParam_b7a735170493e717(&rel_ActualParam_b7a735170493e717),
rel_ActualReturn_8bc9db09e057aa22(&rel_ActualReturn_8bc9db09e057aa22),
rel_ArityMatch_1f1fc51deec0d387(&rel_ArityMatch_1f1fc51deec0d387),
rel_CallGraphEdge_333c9d69fed5eee7(&rel_CallGraphEdge_333c9d69fed5eee7),
rel_FilteredMethod_3007b0a4b117f645(&rel_FilteredMethod_3007b0a4b117f645),
rel_FormalParam_f381be5dce5c9780(&rel_FormalParam_f381be5dce5c9780),
rel_FormalReturn_62e4844334f73406(&rel_FormalReturn_62e4844334f73406),
rel_InterProcAssign_bed60ee93a02e127(&rel_InterProcAssign_bed60ee93a02e127){
}

void Stratum_InterProcAssign_e4be1f9ccf593a60::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(InterProcAssign(to,calleeCtx,from,callerCtx) :- 
   CallGraphEdge(invo,callerCtx,meth,calleeCtx),
   !FilteredMethod(meth),
   FormalParam(index,meth,to),
   ActualParam(index,invo,from).
in file main.dl [838:1-842:36])_");
if(!(rel_FormalParam_f381be5dce5c9780->empty()) && !(rel_ActualParam_b7a735170493e717->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_FilteredMethod_3007b0a4b117f645_op_ctxt,rel_FilteredMethod_3007b0a4b117f645->createContext());
CREATE_OP_CONTEXT(rel_FormalParam_f381be5dce5c9780_op_ctxt,rel_FormalParam_f381be5dce5c9780->createContext());
CREATE_OP_CONTEXT(rel_InterProcAssign_bed60ee93a02e127_op_ctxt,rel_InterProcAssign_bed60ee93a02e127->createContext());
for(const auto& env0 : *rel_CallGraphEdge_333c9d69fed5eee7) {
if( !(rel_FilteredMethod_3007b0a4b117f645->contains(Tuple<RamDomain,1>{{ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_FilteredMethod_3007b0a4b117f645_op_ctxt)))) {
auto range = rel_FormalParam_f381be5dce5c9780->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FormalParam_f381be5dce5c9780_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[2]),ramBitCast(env0[3]),ramBitCast(env2[2]),ramBitCast(env0[1])}};
rel_InterProcAssign_bed60ee93a02e127->insert(tuple,READ_OP_CONTEXT(rel_InterProcAssign_bed60ee93a02e127_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(InterProcAssign(to,calleeCtx,from,callerCtx) :- 
   CallGraphEdge(invo,callerCtx,meth,calleeCtx),
   !FilteredMethod(meth),
   FormalParam(_,meth,to),
   ActualKeyParam(to,invo,from).
in file main.dl [843:1-847:36])_");
if(!(rel_FormalParam_f381be5dce5c9780->empty()) && !(rel_ActualKeyParam_c37ca7251a780d4f->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualKeyParam_c37ca7251a780d4f_op_ctxt,rel_ActualKeyParam_c37ca7251a780d4f->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_FilteredMethod_3007b0a4b117f645_op_ctxt,rel_FilteredMethod_3007b0a4b117f645->createContext());
CREATE_OP_CONTEXT(rel_FormalParam_f381be5dce5c9780_op_ctxt,rel_FormalParam_f381be5dce5c9780->createContext());
CREATE_OP_CONTEXT(rel_InterProcAssign_bed60ee93a02e127_op_ctxt,rel_InterProcAssign_bed60ee93a02e127->createContext());
for(const auto& env0 : *rel_CallGraphEdge_333c9d69fed5eee7) {
if( !(rel_FilteredMethod_3007b0a4b117f645->contains(Tuple<RamDomain,1>{{ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_FilteredMethod_3007b0a4b117f645_op_ctxt)))) {
auto range = rel_FormalParam_f381be5dce5c9780->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FormalParam_f381be5dce5c9780_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_ActualKeyParam_c37ca7251a780d4f->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[2]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[2]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualKeyParam_c37ca7251a780d4f_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[2]),ramBitCast(env0[3]),ramBitCast(env2[2]),ramBitCast(env0[1])}};
rel_InterProcAssign_bed60ee93a02e127->insert(tuple,READ_OP_CONTEXT(rel_InterProcAssign_bed60ee93a02e127_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(InterProcAssign(to,callerCtx,from,calleeCtx) :- 
   CallGraphEdge(invo,callerCtx,meth,calleeCtx),
   ArityMatch(invo,callerCtx,meth,calleeCtx),
   !FilteredMethod(meth),
   FormalReturn(index,meth,from),
   ActualReturn(index,invo,to).
in file main.dl [848:1-853:35])_");
if(!(rel_ArityMatch_1f1fc51deec0d387->empty()) && !(rel_FormalReturn_62e4844334f73406->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_ActualReturn_8bc9db09e057aa22->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt,rel_ActualReturn_8bc9db09e057aa22->createContext());
CREATE_OP_CONTEXT(rel_ArityMatch_1f1fc51deec0d387_op_ctxt,rel_ArityMatch_1f1fc51deec0d387->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_FilteredMethod_3007b0a4b117f645_op_ctxt,rel_FilteredMethod_3007b0a4b117f645->createContext());
CREATE_OP_CONTEXT(rel_FormalReturn_62e4844334f73406_op_ctxt,rel_FormalReturn_62e4844334f73406->createContext());
CREATE_OP_CONTEXT(rel_InterProcAssign_bed60ee93a02e127_op_ctxt,rel_InterProcAssign_bed60ee93a02e127->createContext());
for(const auto& env0 : *rel_CallGraphEdge_333c9d69fed5eee7) {
if( rel_ArityMatch_1f1fc51deec0d387->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_ArityMatch_1f1fc51deec0d387_op_ctxt)) && !(rel_FilteredMethod_3007b0a4b117f645->contains(Tuple<RamDomain,1>{{ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_FilteredMethod_3007b0a4b117f645_op_ctxt)))) {
auto range = rel_FormalReturn_62e4844334f73406->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FormalReturn_62e4844334f73406_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_ActualReturn_8bc9db09e057aa22->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env2[2]),ramBitCast(env0[1]),ramBitCast(env1[2]),ramBitCast(env0[3])}};
rel_InterProcAssign_bed60ee93a02e127->insert(tuple,READ_OP_CONTEXT(rel_InterProcAssign_bed60ee93a02e127_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(InterProcAssign(to,callerCtx,from,calleeCtx) :- 
   CallGraphEdge(invo,callerCtx,meth,calleeCtx),
   !ArityMatch(invo,callerCtx,meth,calleeCtx),
   !FilteredMethod(meth),
   FormalReturn(_,meth,from),
   ActualReturn(_,invo,to).
in file main.dl [855:1-860:31])_");
if(!(rel_FormalReturn_62e4844334f73406->empty()) && !(rel_ActualReturn_8bc9db09e057aa22->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt,rel_ActualReturn_8bc9db09e057aa22->createContext());
CREATE_OP_CONTEXT(rel_ArityMatch_1f1fc51deec0d387_op_ctxt,rel_ArityMatch_1f1fc51deec0d387->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_FilteredMethod_3007b0a4b117f645_op_ctxt,rel_FilteredMethod_3007b0a4b117f645->createContext());
CREATE_OP_CONTEXT(rel_FormalReturn_62e4844334f73406_op_ctxt,rel_FormalReturn_62e4844334f73406->createContext());
CREATE_OP_CONTEXT(rel_InterProcAssign_bed60ee93a02e127_op_ctxt,rel_InterProcAssign_bed60ee93a02e127->createContext());
for(const auto& env0 : *rel_CallGraphEdge_333c9d69fed5eee7) {
if( !(rel_FilteredMethod_3007b0a4b117f645->contains(Tuple<RamDomain,1>{{ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_FilteredMethod_3007b0a4b117f645_op_ctxt))) && !(rel_ArityMatch_1f1fc51deec0d387->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_ArityMatch_1f1fc51deec0d387_op_ctxt)))) {
auto range = rel_FormalReturn_62e4844334f73406->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FormalReturn_62e4844334f73406_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_ActualReturn_8bc9db09e057aa22->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env2[2]),ramBitCast(env0[1]),ramBitCast(env1[2]),ramBitCast(env0[3])}};
rel_InterProcAssign_bed60ee93a02e127->insert(tuple,READ_OP_CONTEXT(rel_InterProcAssign_bed60ee93a02e127_op_ctxt));
}
}
}
}
}
();}
if (pruneImdtRels) rel_ArityMatch_1f1fc51deec0d387->purge();
if (pruneImdtRels) rel_FilteredMethod_3007b0a4b117f645->purge();
if (pruneImdtRels) rel_FormalParam_f381be5dce5c9780->purge();
if (pruneImdtRels) rel_FormalReturn_62e4844334f73406->purge();
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_Invoke_dd34603d62ced004 {
public:
 Stratum_Invoke_dd34603d62ced004(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_Invoke_d61c77705bff35b0;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_Invoke_dd34603d62ced004::Stratum_Invoke_dd34603d62ced004(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_Invoke_d61c77705bff35b0(&rel_Invoke_d61c77705bff35b0){
}

void Stratum_Invoke_dd34603d62ced004::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","invo\ttoMeth\tinMeth"},{"auxArity","0"},{"fact-dir","."},{"name","Invoke"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"invo\", \"toMeth\", \"inMeth\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Invocation\", \"s:Method\", \"s:Method\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_Invoke_d61c77705bff35b0);
} catch (std::exception& e) {std::cerr << "Error loading Invoke data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_InvokeEdge_578ec363579b2aea {
public:
 Stratum_InvokeEdge_578ec363579b2aea(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_delta_InvokeEdge_a34c04d9e3048d06,t_btree_iiii__0_1_2_3__1111::Type& rel_new_InvokeEdge_1250f9237f36bc79,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iiii__0_1_2_3__1111::Type& rel_InvokeEdge_101b6dc2a844897b,t_btree_ii__1_0__11__01::Type& rel_NextInvoke_f6aefda469e3b88c);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__0_1_2_3__1111::Type* rel_delta_InvokeEdge_a34c04d9e3048d06;
t_btree_iiii__0_1_2_3__1111::Type* rel_new_InvokeEdge_1250f9237f36bc79;
t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type* rel_CallGraphEdge_333c9d69fed5eee7;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_Invoke_d61c77705bff35b0;
t_btree_iiii__0_1_2_3__1111::Type* rel_InvokeEdge_101b6dc2a844897b;
t_btree_ii__1_0__11__01::Type* rel_NextInvoke_f6aefda469e3b88c;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_InvokeEdge_578ec363579b2aea::Stratum_InvokeEdge_578ec363579b2aea(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_delta_InvokeEdge_a34c04d9e3048d06,t_btree_iiii__0_1_2_3__1111::Type& rel_new_InvokeEdge_1250f9237f36bc79,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iiii__0_1_2_3__1111::Type& rel_InvokeEdge_101b6dc2a844897b,t_btree_ii__1_0__11__01::Type& rel_NextInvoke_f6aefda469e3b88c):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_delta_InvokeEdge_a34c04d9e3048d06(&rel_delta_InvokeEdge_a34c04d9e3048d06),
rel_new_InvokeEdge_1250f9237f36bc79(&rel_new_InvokeEdge_1250f9237f36bc79),
rel_CallGraphEdge_333c9d69fed5eee7(&rel_CallGraphEdge_333c9d69fed5eee7),
rel_Invoke_d61c77705bff35b0(&rel_Invoke_d61c77705bff35b0),
rel_InvokeEdge_101b6dc2a844897b(&rel_InvokeEdge_101b6dc2a844897b),
rel_NextInvoke_f6aefda469e3b88c(&rel_NextInvoke_f6aefda469e3b88c){
}

void Stratum_InvokeEdge_578ec363579b2aea::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(InvokeEdge(to_invo,ctx,from_invo,ctx) :- 
   NextInvoke(from_invo,to_invo),
   CallGraphEdge(from_invo,ctx,_,_),
   CallGraphEdge(to_invo,ctx,_,_).
in file main.dl [673:1-676:39])_");
if(!(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_NextInvoke_f6aefda469e3b88c->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_InvokeEdge_101b6dc2a844897b_op_ctxt,rel_InvokeEdge_101b6dc2a844897b->createContext());
CREATE_OP_CONTEXT(rel_NextInvoke_f6aefda469e3b88c_op_ctxt,rel_NextInvoke_f6aefda469e3b88c->createContext());
for(const auto& env0 : *rel_NextInvoke_f6aefda469e3b88c) {
auto range = rel_CallGraphEdge_333c9d69fed5eee7->lowerUpperRange_1000(Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt));
for(const auto& env1 : range) {
if( !rel_CallGraphEdge_333c9d69fed5eee7->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt)).empty()) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[1]),ramBitCast(env1[1]),ramBitCast(env0[0]),ramBitCast(env1[1])}};
rel_InvokeEdge_101b6dc2a844897b->insert(tuple,READ_OP_CONTEXT(rel_InvokeEdge_101b6dc2a844897b_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(InvokeEdge(to_invo,calleeCtx,from_invo,callerCtx) :- 
   CallGraphEdge(from_invo,callerCtx,toMeth,calleeCtx),
   Invoke(to_invo,_,toMeth),
   CallGraphEdge(to_invo,calleeCtx,_,_),
   !NextInvoke(_,to_invo).
in file main.dl [678:1-682:29])_");
if(!(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_InvokeEdge_101b6dc2a844897b_op_ctxt,rel_InvokeEdge_101b6dc2a844897b->createContext());
CREATE_OP_CONTEXT(rel_NextInvoke_f6aefda469e3b88c_op_ctxt,rel_NextInvoke_f6aefda469e3b88c->createContext());
for(const auto& env0 : *rel_CallGraphEdge_333c9d69fed5eee7) {
auto range = rel_Invoke_d61c77705bff35b0->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt));
for(const auto& env1 : range) {
if( !rel_CallGraphEdge_333c9d69fed5eee7->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env1[0]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[0]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt)).empty() && !(!rel_NextInvoke_f6aefda469e3b88c->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[0])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_NextInvoke_f6aefda469e3b88c_op_ctxt)).empty())) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[0]),ramBitCast(env0[3]),ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_InvokeEdge_101b6dc2a844897b->insert(tuple,READ_OP_CONTEXT(rel_InvokeEdge_101b6dc2a844897b_op_ctxt));
}
}
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_delta_InvokeEdge_a34c04d9e3048d06_op_ctxt,rel_delta_InvokeEdge_a34c04d9e3048d06->createContext());
CREATE_OP_CONTEXT(rel_InvokeEdge_101b6dc2a844897b_op_ctxt,rel_InvokeEdge_101b6dc2a844897b->createContext());
for(const auto& env0 : *rel_InvokeEdge_101b6dc2a844897b) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_delta_InvokeEdge_a34c04d9e3048d06->insert(tuple,READ_OP_CONTEXT(rel_delta_InvokeEdge_a34c04d9e3048d06_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(InvokeEdge(to_invo,callerCtx,from_invo,calleeCtx) :- 
   InvokeEdge(to_invo,callerCtx,mid_invo,callerCtx),
   CallGraphEdge(mid_invo,callerCtx,toMeth,calleeCtx),
   Invoke(from_invo,_,toMeth),
   NextInvoke(from_invo,"invo_end").
in file main.dl [684:1-688:39])_");
if(!(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_Invoke_d61c77705bff35b0->empty()) && !(rel_delta_InvokeEdge_a34c04d9e3048d06->empty()) && !(rel_NextInvoke_f6aefda469e3b88c->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_InvokeEdge_a34c04d9e3048d06_op_ctxt,rel_delta_InvokeEdge_a34c04d9e3048d06->createContext());
CREATE_OP_CONTEXT(rel_new_InvokeEdge_1250f9237f36bc79_op_ctxt,rel_new_InvokeEdge_1250f9237f36bc79->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_InvokeEdge_101b6dc2a844897b_op_ctxt,rel_InvokeEdge_101b6dc2a844897b->createContext());
CREATE_OP_CONTEXT(rel_NextInvoke_f6aefda469e3b88c_op_ctxt,rel_NextInvoke_f6aefda469e3b88c->createContext());
for(const auto& env0 : *rel_delta_InvokeEdge_a34c04d9e3048d06) {
if( (ramBitCast<RamDomain>(env0[1]) == ramBitCast<RamDomain>(env0[3]))) {
auto range = rel_CallGraphEdge_333c9d69fed5eee7->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_Invoke_d61c77705bff35b0->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt));
for(const auto& env2 : range) {
if( rel_NextInvoke_f6aefda469e3b88c->contains(Tuple<RamDomain,2>{{ramBitCast(env2[0]),ramBitCast(RamSigned(11))}},READ_OP_CONTEXT(rel_NextInvoke_f6aefda469e3b88c_op_ctxt)) && !(rel_InvokeEdge_101b6dc2a844897b->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env2[0]),ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_InvokeEdge_101b6dc2a844897b_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env2[0]),ramBitCast(env1[3])}};
rel_new_InvokeEdge_1250f9237f36bc79->insert(tuple,READ_OP_CONTEXT(rel_new_InvokeEdge_1250f9237f36bc79_op_ctxt));
}
}
}
}
}
}
();}
if(rel_new_InvokeEdge_1250f9237f36bc79->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_new_InvokeEdge_1250f9237f36bc79_op_ctxt,rel_new_InvokeEdge_1250f9237f36bc79->createContext());
CREATE_OP_CONTEXT(rel_InvokeEdge_101b6dc2a844897b_op_ctxt,rel_InvokeEdge_101b6dc2a844897b->createContext());
for(const auto& env0 : *rel_new_InvokeEdge_1250f9237f36bc79) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_InvokeEdge_101b6dc2a844897b->insert(tuple,READ_OP_CONTEXT(rel_InvokeEdge_101b6dc2a844897b_op_ctxt));
}
}
();std::swap(rel_delta_InvokeEdge_a34c04d9e3048d06, rel_new_InvokeEdge_1250f9237f36bc79);
rel_new_InvokeEdge_1250f9237f36bc79->purge();
iter++;
}
iter = 0;
rel_delta_InvokeEdge_a34c04d9e3048d06->purge();
rel_new_InvokeEdge_1250f9237f36bc79->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to_invo\tto_ctx\tfrom_invo\tfrom_ctx"},{"auxArity","0"},{"name","InvokeEdge"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"to_invo\", \"to_ctx\", \"from_invo\", \"from_ctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Invocation\", \"r:Context\", \"s:Invocation\", \"r:Context\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_InvokeEdge_101b6dc2a844897b);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_Invoke_d61c77705bff35b0->purge();
if (pruneImdtRels) rel_NextInvoke_f6aefda469e3b88c->purge();
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_InvokeInLoop_19e1b9e18afecb56 {
public:
 Stratum_InvokeInLoop_19e1b9e18afecb56(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__0_1__11__10::Type& rel_InvokeInLoop_c641dec75a6890e7);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_ii__0_1__11__10::Type* rel_InvokeInLoop_c641dec75a6890e7;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_InvokeInLoop_19e1b9e18afecb56::Stratum_InvokeInLoop_19e1b9e18afecb56(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__0_1__11__10::Type& rel_InvokeInLoop_c641dec75a6890e7):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_InvokeInLoop_c641dec75a6890e7(&rel_InvokeInLoop_c641dec75a6890e7){
}

void Stratum_InvokeInLoop_19e1b9e18afecb56::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","invo\tloop_var"},{"auxArity","0"},{"fact-dir","."},{"name","InvokeInLoop"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"invo\", \"loop_var\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Var\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_InvokeInLoop_c641dec75a6890e7);
} catch (std::exception& e) {std::cerr << "Error loading InvokeInLoop data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_InvokePath_e8b168cd865879e8 {
public:
 Stratum_InvokePath_e8b168cd865879e8(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_delta_InvokePath_269e2f7ec8f9b43d,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_new_InvokePath_3ae2baced09cf095,t_btree_iiii__0_1_2_3__1111::Type& rel_InvokeEdge_101b6dc2a844897b,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_InvokePath_12c42b7c9b655a96);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__0_1_2_3__1111__1100::Type* rel_delta_InvokePath_269e2f7ec8f9b43d;
t_btree_iiii__0_1_2_3__1111__1100::Type* rel_new_InvokePath_3ae2baced09cf095;
t_btree_iiii__0_1_2_3__1111::Type* rel_InvokeEdge_101b6dc2a844897b;
t_btree_iiii__0_1_2_3__1111__1100::Type* rel_InvokePath_12c42b7c9b655a96;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_InvokePath_e8b168cd865879e8::Stratum_InvokePath_e8b168cd865879e8(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_delta_InvokePath_269e2f7ec8f9b43d,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_new_InvokePath_3ae2baced09cf095,t_btree_iiii__0_1_2_3__1111::Type& rel_InvokeEdge_101b6dc2a844897b,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_InvokePath_12c42b7c9b655a96):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_delta_InvokePath_269e2f7ec8f9b43d(&rel_delta_InvokePath_269e2f7ec8f9b43d),
rel_new_InvokePath_3ae2baced09cf095(&rel_new_InvokePath_3ae2baced09cf095),
rel_InvokeEdge_101b6dc2a844897b(&rel_InvokeEdge_101b6dc2a844897b),
rel_InvokePath_12c42b7c9b655a96(&rel_InvokePath_12c42b7c9b655a96){
}

void Stratum_InvokePath_e8b168cd865879e8::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(InvokePath(to_invo,to_ctx,from_invo,from_ctx) :- 
   InvokeEdge(to_invo,to_ctx,from_invo,from_ctx).
in file main.dl [690:1-691:54])_");
if(!(rel_InvokeEdge_101b6dc2a844897b->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_InvokeEdge_101b6dc2a844897b_op_ctxt,rel_InvokeEdge_101b6dc2a844897b->createContext());
CREATE_OP_CONTEXT(rel_InvokePath_12c42b7c9b655a96_op_ctxt,rel_InvokePath_12c42b7c9b655a96->createContext());
for(const auto& env0 : *rel_InvokeEdge_101b6dc2a844897b) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_InvokePath_12c42b7c9b655a96->insert(tuple,READ_OP_CONTEXT(rel_InvokePath_12c42b7c9b655a96_op_ctxt));
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_delta_InvokePath_269e2f7ec8f9b43d_op_ctxt,rel_delta_InvokePath_269e2f7ec8f9b43d->createContext());
CREATE_OP_CONTEXT(rel_InvokePath_12c42b7c9b655a96_op_ctxt,rel_InvokePath_12c42b7c9b655a96->createContext());
for(const auto& env0 : *rel_InvokePath_12c42b7c9b655a96) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_delta_InvokePath_269e2f7ec8f9b43d->insert(tuple,READ_OP_CONTEXT(rel_delta_InvokePath_269e2f7ec8f9b43d_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(InvokePath(to_invo,to_ctx,from_invo,from_ctx) :- 
   InvokeEdge(to_invo,to_ctx,mid_invo,mid_ctx),
   InvokePath(mid_invo,mid_ctx,from_invo,from_ctx).
in file main.dl [693:1-695:56])_");
if(!(rel_InvokeEdge_101b6dc2a844897b->empty()) && !(rel_delta_InvokePath_269e2f7ec8f9b43d->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_InvokePath_269e2f7ec8f9b43d_op_ctxt,rel_delta_InvokePath_269e2f7ec8f9b43d->createContext());
CREATE_OP_CONTEXT(rel_new_InvokePath_3ae2baced09cf095_op_ctxt,rel_new_InvokePath_3ae2baced09cf095->createContext());
CREATE_OP_CONTEXT(rel_InvokeEdge_101b6dc2a844897b_op_ctxt,rel_InvokeEdge_101b6dc2a844897b->createContext());
CREATE_OP_CONTEXT(rel_InvokePath_12c42b7c9b655a96_op_ctxt,rel_InvokePath_12c42b7c9b655a96->createContext());
for(const auto& env0 : *rel_InvokeEdge_101b6dc2a844897b) {
auto range = rel_delta_InvokePath_269e2f7ec8f9b43d->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_InvokePath_269e2f7ec8f9b43d_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_InvokePath_12c42b7c9b655a96->contains(Tuple<RamDomain,4>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}},READ_OP_CONTEXT(rel_InvokePath_12c42b7c9b655a96_op_ctxt)))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env1[2]),ramBitCast(env1[3])}};
rel_new_InvokePath_3ae2baced09cf095->insert(tuple,READ_OP_CONTEXT(rel_new_InvokePath_3ae2baced09cf095_op_ctxt));
}
}
}
}
();}
if(rel_new_InvokePath_3ae2baced09cf095->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_new_InvokePath_3ae2baced09cf095_op_ctxt,rel_new_InvokePath_3ae2baced09cf095->createContext());
CREATE_OP_CONTEXT(rel_InvokePath_12c42b7c9b655a96_op_ctxt,rel_InvokePath_12c42b7c9b655a96->createContext());
for(const auto& env0 : *rel_new_InvokePath_3ae2baced09cf095) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_InvokePath_12c42b7c9b655a96->insert(tuple,READ_OP_CONTEXT(rel_InvokePath_12c42b7c9b655a96_op_ctxt));
}
}
();std::swap(rel_delta_InvokePath_269e2f7ec8f9b43d, rel_new_InvokePath_3ae2baced09cf095);
rel_new_InvokePath_3ae2baced09cf095->purge();
iter++;
}
iter = 0;
rel_delta_InvokePath_269e2f7ec8f9b43d->purge();
rel_new_InvokePath_3ae2baced09cf095->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to_invo\tto_ctx\tfrom_invo\tfrom_ctx"},{"auxArity","0"},{"name","InvokePath"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"to_invo\", \"to_ctx\", \"from_invo\", \"from_ctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Invocation\", \"r:Context\", \"s:Invocation\", \"r:Context\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_InvokePath_12c42b7c9b655a96);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_IsDataFrameEquivIndexing_e4c10b45d138cfbf {
public:
 Stratum_IsDataFrameEquivIndexing_e4c10b45d138cfbf(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_i__0__1::Type& rel_IsDataFrameEquivIndexing_5de5b08291e74631,t_btree_ii__1_0__0__11__10__01::Type& rel_VarType_28c8217e193eb319);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_i__0__1::Type* rel_IsDataFrameEquivIndexing_5de5b08291e74631;
t_btree_ii__1_0__0__11__10__01::Type* rel_VarType_28c8217e193eb319;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_IsDataFrameEquivIndexing_e4c10b45d138cfbf::Stratum_IsDataFrameEquivIndexing_e4c10b45d138cfbf(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_i__0__1::Type& rel_IsDataFrameEquivIndexing_5de5b08291e74631,t_btree_ii__1_0__0__11__10__01::Type& rel_VarType_28c8217e193eb319):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_IsDataFrameEquivIndexing_5de5b08291e74631(&rel_IsDataFrameEquivIndexing_5de5b08291e74631),
rel_VarType_28c8217e193eb319(&rel_VarType_28c8217e193eb319){
}

void Stratum_IsDataFrameEquivIndexing_e4c10b45d138cfbf::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(IsDataFrameEquivIndexing(idx) :- 
   VarType(idx,"str").
in file main.dl [612:1-613:74])_");
if(!(rel_VarType_28c8217e193eb319->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_IsDataFrameEquivIndexing_5de5b08291e74631_op_ctxt,rel_IsDataFrameEquivIndexing_5de5b08291e74631->createContext());
CREATE_OP_CONTEXT(rel_VarType_28c8217e193eb319_op_ctxt,rel_VarType_28c8217e193eb319->createContext());
auto range = rel_VarType_28c8217e193eb319->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(12))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(12))}},READ_OP_CONTEXT(rel_VarType_28c8217e193eb319_op_ctxt));
for(const auto& env0 : range) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_IsDataFrameEquivIndexing_5de5b08291e74631->insert(tuple,READ_OP_CONTEXT(rel_IsDataFrameEquivIndexing_5de5b08291e74631_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(IsDataFrameEquivIndexing(idx) :- 
   VarType(idx,"list[str]").
in file main.dl [612:1-613:74])_");
if(!(rel_VarType_28c8217e193eb319->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_IsDataFrameEquivIndexing_5de5b08291e74631_op_ctxt,rel_IsDataFrameEquivIndexing_5de5b08291e74631->createContext());
CREATE_OP_CONTEXT(rel_VarType_28c8217e193eb319_op_ctxt,rel_VarType_28c8217e193eb319->createContext());
auto range = rel_VarType_28c8217e193eb319->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(13))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(13))}},READ_OP_CONTEXT(rel_VarType_28c8217e193eb319_op_ctxt));
for(const auto& env0 : range) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_IsDataFrameEquivIndexing_5de5b08291e74631->insert(tuple,READ_OP_CONTEXT(rel_IsDataFrameEquivIndexing_5de5b08291e74631_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(IsDataFrameEquivIndexing(idx) :- 
   VarType(idx,"list").
in file main.dl [612:1-613:74])_");
if(!(rel_VarType_28c8217e193eb319->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_IsDataFrameEquivIndexing_5de5b08291e74631_op_ctxt,rel_IsDataFrameEquivIndexing_5de5b08291e74631->createContext());
CREATE_OP_CONTEXT(rel_VarType_28c8217e193eb319_op_ctxt,rel_VarType_28c8217e193eb319->createContext());
auto range = rel_VarType_28c8217e193eb319->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(14))}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(14))}},READ_OP_CONTEXT(rel_VarType_28c8217e193eb319_op_ctxt));
for(const auto& env0 : range) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel_IsDataFrameEquivIndexing_5de5b08291e74631->insert(tuple,READ_OP_CONTEXT(rel_IsDataFrameEquivIndexing_5de5b08291e74631_op_ctxt));
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_LoadField_d008bdbc48c72349 {
public:
 Stratum_LoadField_d008bdbc48c72349(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_LoadField_6018b2c33f454495);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_LoadField_6018b2c33f454495;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_LoadField_d008bdbc48c72349::Stratum_LoadField_d008bdbc48c72349(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_LoadField_6018b2c33f454495):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_LoadField_6018b2c33f454495(&rel_LoadField_6018b2c33f454495){
}

void Stratum_LoadField_d008bdbc48c72349::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\tbase\tf"},{"auxArity","0"},{"fact-dir","."},{"name","LoadField"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"to\", \"base\", \"f\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Var\", \"s:Var\", \"s:Field\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_LoadField_6018b2c33f454495);
} catch (std::exception& e) {std::cerr << "Error loading LoadField data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_LoadIndex_0757e6ece445a802 {
public:
 Stratum_LoadIndex_0757e6ece445a802(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_LoadIndex_3a07e512c7efb9bd);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_LoadIndex_3a07e512c7efb9bd;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_LoadIndex_0757e6ece445a802::Stratum_LoadIndex_0757e6ece445a802(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_LoadIndex_3a07e512c7efb9bd):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_LoadIndex_3a07e512c7efb9bd(&rel_LoadIndex_3a07e512c7efb9bd){
}

void Stratum_LoadIndex_0757e6ece445a802::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\tbase\ti"},{"auxArity","0"},{"fact-dir","."},{"name","LoadIndex"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"to\", \"base\", \"i\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Var\", \"s:Var\", \"s:Index\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_LoadIndex_3a07e512c7efb9bd);
} catch (std::exception& e) {std::cerr << "Error loading LoadIndex data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_LoadSlice_b0ffa9dd9f205537 {
public:
 Stratum_LoadSlice_b0ffa9dd9f205537(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_LoadSlice_e590a0ee3f45cac8);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel_LoadSlice_e590a0ee3f45cac8;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_LoadSlice_b0ffa9dd9f205537::Stratum_LoadSlice_b0ffa9dd9f205537(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_LoadSlice_e590a0ee3f45cac8):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_LoadSlice_e590a0ee3f45cac8(&rel_LoadSlice_e590a0ee3f45cac8){
}

void Stratum_LoadSlice_b0ffa9dd9f205537::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\tbase\tst\ted\tstep"},{"auxArity","0"},{"fact-dir","."},{"name","LoadSlice"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"to\", \"base\", \"st\", \"ed\", \"step\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"s:Var\", \"s:Var\", \"s:Var\", \"s:Var\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_LoadSlice_e590a0ee3f45cac8);
} catch (std::exception& e) {std::cerr << "Error loading LoadSlice data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_LocalMethod_5f8dd393e44bae27 {
public:
 Stratum_LocalMethod_5f8dd393e44bae27(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_i__0__1::Type& rel_LocalMethod_5b358702fac6f178);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_i__0__1::Type* rel_LocalMethod_5b358702fac6f178;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_LocalMethod_5f8dd393e44bae27::Stratum_LocalMethod_5f8dd393e44bae27(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_i__0__1::Type& rel_LocalMethod_5b358702fac6f178):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_LocalMethod_5b358702fac6f178(&rel_LocalMethod_5b358702fac6f178){
}

void Stratum_LocalMethod_5f8dd393e44bae27::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","meth"},{"auxArity","0"},{"fact-dir","."},{"name","LocalMethod"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"meth\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Method\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_LocalMethod_5b358702fac6f178);
} catch (std::exception& e) {std::cerr << "Error loading LocalMethod data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_MethodIndexToKey_7b30be7a4b7f0a29 {
public:
 Stratum_MethodIndexToKey_7b30be7a4b7f0a29(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iii__0_1_2__111::Type& rel_MethodIndexToKey_1e172395196e36b8);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_Invoke_d61c77705bff35b0;
t_btree_iii__0_1_2__111::Type* rel_MethodIndexToKey_1e172395196e36b8;
std::vector<std::regex> regexes;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_MethodIndexToKey_7b30be7a4b7f0a29::Stratum_MethodIndexToKey_7b30be7a4b7f0a29(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iii__0_1_2__111::Type& rel_MethodIndexToKey_1e172395196e36b8):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_Invoke_d61c77705bff35b0(&rel_Invoke_d61c77705bff35b0),
rel_MethodIndexToKey_1e172395196e36b8(&rel_MethodIndexToKey_1e172395196e36b8),
regexes({
	std::regex("pandas[.](Series|DataFrame|get_dummies|pivot|pivot_table)"),
	std::regex("pandas[.](cut|qcut)"),
	std::regex("pandas[.](facorize|unique)"),
	std::regex("pandas[.](concat|isna|isnull|notna|notnull)"),
	std::regex("pandas[.](to_numeric|to_datetime|to_timedelta)"),
	std::regex("pandas[.](merge|merge_ordered|merge_asof)"),
	std::regex(".*DataLoader"),
	std::regex(".*[.](fit|predict|predict_log_proba|predict_proba|score|fit_sample|fit_resample)"),
	std::regex(".*[.](fit|score)"),
	std::regex(".*[.](fit|evaluate|predict|predict_classes|predict_proba|train_on_batch|test_on_batch|predict_on_batch)"),
	std::regex(".*[.](fit_generator|evaluate_generator)"),
	std::regex(".*[.](fit)"),
	std::regex(".*[.](fit_generator)"),
}){
}

void Stratum_MethodIndexToKey_7b30be7a4b7f0a29::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(MethodIndexToKey(1,"data",meth) :- 
   Invoke(_,meth,_),
   match("pandas[.](Series|DataFrame|get_dummies|pivot|pivot_table)", meth).
in file main.dl [121:1-123:78])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt,rel_MethodIndexToKey_1e172395196e36b8->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(0))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(1)),ramBitCast(RamSigned(0)),ramBitCast(env0[1])}};
rel_MethodIndexToKey_1e172395196e36b8->insert(tuple,READ_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(MethodIndexToKey(1,"x",meth) :- 
   Invoke(_,meth,_),
   match("pandas[.](cut|qcut)", meth).
in file main.dl [124:1-126:40])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt,rel_MethodIndexToKey_1e172395196e36b8->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(1))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(1)),ramBitCast(RamSigned(15)),ramBitCast(env0[1])}};
rel_MethodIndexToKey_1e172395196e36b8->insert(tuple,READ_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(MethodIndexToKey(1,"values",meth) :- 
   Invoke(_,meth,_),
   match("pandas[.](facorize|unique)", meth).
in file main.dl [127:1-129:47])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt,rel_MethodIndexToKey_1e172395196e36b8->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(2))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(1)),ramBitCast(RamSigned(16)),ramBitCast(env0[1])}};
rel_MethodIndexToKey_1e172395196e36b8->insert(tuple,READ_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(MethodIndexToKey(1,"objs",meth) :- 
   Invoke(_,meth,_),
   match("pandas[.](concat|isna|isnull|notna|notnull)", meth).
in file main.dl [130:1-132:64])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt,rel_MethodIndexToKey_1e172395196e36b8->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(3))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(1)),ramBitCast(RamSigned(17)),ramBitCast(env0[1])}};
rel_MethodIndexToKey_1e172395196e36b8->insert(tuple,READ_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(MethodIndexToKey(1,"arg",meth) :- 
   Invoke(_,meth,_),
   match("pandas[.](to_numeric|to_datetime|to_timedelta)", meth).
in file main.dl [133:1-135:67])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt,rel_MethodIndexToKey_1e172395196e36b8->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(4))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(1)),ramBitCast(RamSigned(18)),ramBitCast(env0[1])}};
rel_MethodIndexToKey_1e172395196e36b8->insert(tuple,READ_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(MethodIndexToKey(1,"frame","pandas.melt").
in file main.dl [136:1-136:45])_");
[&](){
CREATE_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt,rel_MethodIndexToKey_1e172395196e36b8->createContext());
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(1)),ramBitCast(RamSigned(19)),ramBitCast(RamSigned(20))}};
rel_MethodIndexToKey_1e172395196e36b8->insert(tuple,READ_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt));
}
();signalHandler->setMsg(R"_(MethodIndexToKey(1,"df","pandas.wide_to_long").
in file main.dl [137:1-137:50])_");
[&](){
CREATE_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt,rel_MethodIndexToKey_1e172395196e36b8->createContext());
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(1)),ramBitCast(RamSigned(21)),ramBitCast(RamSigned(22))}};
rel_MethodIndexToKey_1e172395196e36b8->insert(tuple,READ_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt));
}
();signalHandler->setMsg(R"_(MethodIndexToKey(1,"left",meth) :- 
   Invoke(_,meth,_),
   match("pandas[.](merge|merge_ordered|merge_asof)", meth).
in file main.dl [138:1-141:62])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt,rel_MethodIndexToKey_1e172395196e36b8->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(5))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(1)),ramBitCast(RamSigned(23)),ramBitCast(env0[1])}};
rel_MethodIndexToKey_1e172395196e36b8->insert(tuple,READ_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(MethodIndexToKey(2,"right",meth) :- 
   Invoke(_,meth,_),
   match("pandas[.](merge|merge_ordered|merge_asof)", meth).
in file main.dl [138:1-141:62])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt,rel_MethodIndexToKey_1e172395196e36b8->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(5))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(2)),ramBitCast(RamSigned(24)),ramBitCast(env0[1])}};
rel_MethodIndexToKey_1e172395196e36b8->insert(tuple,READ_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(MethodIndexToKey(1,"dataset",meth) :- 
   Invoke(_,meth,_),
   match(".*DataLoader", meth).
in file main.dl [142:1-144:33])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt,rel_MethodIndexToKey_1e172395196e36b8->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(6))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(1)),ramBitCast(RamSigned(25)),ramBitCast(env0[1])}};
rel_MethodIndexToKey_1e172395196e36b8->insert(tuple,READ_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(MethodIndexToKey(1,"X",meth) :- 
   Invoke(_,meth,_),
   match(".*[.](fit|predict|predict_log_proba|predict_proba|score|fit_sample|fit_resample)", meth).
in file main.dl [147:1-149:101])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt,rel_MethodIndexToKey_1e172395196e36b8->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(7))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(1)),ramBitCast(RamSigned(26)),ramBitCast(env0[1])}};
rel_MethodIndexToKey_1e172395196e36b8->insert(tuple,READ_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(MethodIndexToKey(2,"y",meth) :- 
   Invoke(_,meth,_),
   match(".*[.](fit|score)", meth).
in file main.dl [150:1-152:37])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt,rel_MethodIndexToKey_1e172395196e36b8->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(8))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(2)),ramBitCast(RamSigned(27)),ramBitCast(env0[1])}};
rel_MethodIndexToKey_1e172395196e36b8->insert(tuple,READ_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(MethodIndexToKey(1,"x",meth) :- 
   Invoke(_,meth,_),
   match(".*[.](fit|evaluate|predict|predict_classes|predict_proba|train_on_batch|test_on_batch|predict_on_batch)", meth).
in file main.dl [155:1-157:124])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt,rel_MethodIndexToKey_1e172395196e36b8->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(9))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(1)),ramBitCast(RamSigned(15)),ramBitCast(env0[1])}};
rel_MethodIndexToKey_1e172395196e36b8->insert(tuple,READ_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(MethodIndexToKey(1,"generator",meth) :- 
   Invoke(_,meth,_),
   match(".*[.](fit_generator|evaluate_generator)", meth).
in file main.dl [158:1-160:60])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt,rel_MethodIndexToKey_1e172395196e36b8->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(10))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(1)),ramBitCast(RamSigned(28)),ramBitCast(env0[1])}};
rel_MethodIndexToKey_1e172395196e36b8->insert(tuple,READ_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(MethodIndexToKey(8,"validation_data",meth) :- 
   Invoke(_,meth,_),
   match(".*[.](fit)", meth).
in file main.dl [162:1-164:31])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt,rel_MethodIndexToKey_1e172395196e36b8->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(11))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(8)),ramBitCast(RamSigned(29)),ramBitCast(env0[1])}};
rel_MethodIndexToKey_1e172395196e36b8->insert(tuple,READ_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(MethodIndexToKey(6,"validation_data",meth) :- 
   Invoke(_,meth,_),
   match(".*[.](fit_generator)", meth).
in file main.dl [165:1-167:41])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt,rel_MethodIndexToKey_1e172395196e36b8->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(12))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(6)),ramBitCast(RamSigned(29)),ramBitCast(env0[1])}};
rel_MethodIndexToKey_1e172395196e36b8->insert(tuple,READ_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt));
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_MethodSSA_23c359ba50403efd {
public:
 Stratum_MethodSSA_23c359ba50403efd(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iii__1_2_0__011__111::Type& rel_MethodSSA_a9f7ed6321abcd80);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_Invoke_d61c77705bff35b0;
t_btree_iii__1_2_0__011__111::Type* rel_MethodSSA_a9f7ed6321abcd80;
std::vector<std::regex> regexes;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_MethodSSA_23c359ba50403efd::Stratum_MethodSSA_23c359ba50403efd(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iii__1_2_0__011__111::Type& rel_MethodSSA_a9f7ed6321abcd80):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_Invoke_d61c77705bff35b0(&rel_Invoke_d61c77705bff35b0),
rel_MethodSSA_a9f7ed6321abcd80(&rel_MethodSSA_a9f7ed6321abcd80),
regexes({
	std::regex(".*[.](fit|fit_generator)"),
}){
}

void Stratum_MethodSSA_23c359ba50403efd::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(MethodSSA(0,0,meth) :- 
   Invoke(_,meth,_),
   match(".*[.](fit|fit_generator)", meth).
in file main.dl [115:1-117:45])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_MethodSSA_a9f7ed6321abcd80_op_ctxt,rel_MethodSSA_a9f7ed6321abcd80->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(0))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0)),ramBitCast(env0[1])}};
rel_MethodSSA_a9f7ed6321abcd80->insert(tuple,READ_OP_CONTEXT(rel_MethodSSA_a9f7ed6321abcd80_op_ctxt));
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_MethodUpdate_ff9426f0e68a272c {
public:
 Stratum_MethodUpdate_ff9426f0e68a272c(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_ii__1_0__11__01::Type& rel_MethodUpdate_b9129e3e14098516,t_btree_iii__2_0_1__001__111::Type& rel_ParamToParamFlow_62719282a92885f3);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_Invoke_d61c77705bff35b0;
t_btree_ii__1_0__11__01::Type* rel_MethodUpdate_b9129e3e14098516;
t_btree_iii__2_0_1__001__111::Type* rel_ParamToParamFlow_62719282a92885f3;
std::vector<std::regex> regexes;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_MethodUpdate_ff9426f0e68a272c::Stratum_MethodUpdate_ff9426f0e68a272c(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_ii__1_0__11__01::Type& rel_MethodUpdate_b9129e3e14098516,t_btree_iii__2_0_1__001__111::Type& rel_ParamToParamFlow_62719282a92885f3):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_Invoke_d61c77705bff35b0(&rel_Invoke_d61c77705bff35b0),
rel_MethodUpdate_b9129e3e14098516(&rel_MethodUpdate_b9129e3e14098516),
rel_ParamToParamFlow_62719282a92885f3(&rel_ParamToParamFlow_62719282a92885f3),
regexes({
	std::regex(".*[.](fit|fit_transform|train)"),
}){
}

void Stratum_MethodUpdate_ff9426f0e68a272c::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(MethodUpdate(0,meth) :- 
   Invoke(_,meth,_),
   match(".*[.](fit|fit_transform|train)", meth).
in file main.dl [108:1-110:51])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_MethodUpdate_b9129e3e14098516_op_ctxt,rel_MethodUpdate_b9129e3e14098516->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(0))) {
Tuple<RamDomain,2> tuple{{ramBitCast(RamSigned(0)),ramBitCast(env0[1])}};
rel_MethodUpdate_b9129e3e14098516->insert(tuple,READ_OP_CONTEXT(rel_MethodUpdate_b9129e3e14098516_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(MethodUpdate(to,meth) :- 
   ParamToParamFlow(to,_,meth).
in file main.dl [111:1-112:38])_");
if(!(rel_ParamToParamFlow_62719282a92885f3->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_MethodUpdate_b9129e3e14098516_op_ctxt,rel_MethodUpdate_b9129e3e14098516->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamFlow_62719282a92885f3_op_ctxt,rel_ParamToParamFlow_62719282a92885f3->createContext());
for(const auto& env0 : *rel_ParamToParamFlow_62719282a92885f3) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[2])}};
rel_MethodUpdate_b9129e3e14098516->insert(tuple,READ_OP_CONTEXT(rel_MethodUpdate_b9129e3e14098516_op_ctxt));
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_ModelPair_6a77bcd3d5f1711d {
public:
 Stratum_ModelPair_6a77bcd3d5f1711d(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPair_a5a4124c4969f589,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPairCandidate_9322881dca01d8da,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a,t_btree_iiiiiiii__0_1_3_5_6_2_4_7__11010110__11111111::Type& rel__agg_subclause1_6b72bc2ad4593b7d);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__0_1_2_3__1111::Type* rel_ModelPair_a5a4124c4969f589;
t_btree_iiii__0_1_2_3__1111::Type* rel_ModelPairCandidate_9322881dca01d8da;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_TrainingDataWithModel_bf0078ce702b39b8;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_ValOrTestDataWithModel_2810ba231c0c185a;
t_btree_iiiiiiii__0_1_3_5_6_2_4_7__11010110__11111111::Type* rel__agg_subclause1_6b72bc2ad4593b7d;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_ModelPair_6a77bcd3d5f1711d::Stratum_ModelPair_6a77bcd3d5f1711d(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPair_a5a4124c4969f589,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPairCandidate_9322881dca01d8da,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a,t_btree_iiiiiiii__0_1_3_5_6_2_4_7__11010110__11111111::Type& rel__agg_subclause1_6b72bc2ad4593b7d):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_ModelPair_a5a4124c4969f589(&rel_ModelPair_a5a4124c4969f589),
rel_ModelPairCandidate_9322881dca01d8da(&rel_ModelPairCandidate_9322881dca01d8da),
rel_TrainingDataWithModel_bf0078ce702b39b8(&rel_TrainingDataWithModel_bf0078ce702b39b8),
rel_ValOrTestDataWithModel_2810ba231c0c185a(&rel_ValOrTestDataWithModel_2810ba231c0c185a),
rel__agg_subclause1_6b72bc2ad4593b7d(&rel__agg_subclause1_6b72bc2ad4593b7d){
}

void Stratum_ModelPair_6a77bcd3d5f1711d::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(ModelPair(testModel,ctx1,trainModel,ctx2) :- 
   ModelPairCandidate(testModel,ctx1,trainModel,ctx2),
   ValOrTestDataWithModel(testModel,_,_,_,ctx1),
   TrainingDataWithModel(trainModel,_,invo2,_,ctx2),
   0 = count : { __agg_subclause1(ctx1,ctx2,+underscore_342,invo2,+underscore_343,testModel,trainModel,+underscore_344) }.
in file main.dl [1278:1-1284:12])_");
if(!(rel_ValOrTestDataWithModel_2810ba231c0c185a->empty()) && !(rel_TrainingDataWithModel_bf0078ce702b39b8->empty()) && !(rel_ModelPairCandidate_9322881dca01d8da->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ModelPair_a5a4124c4969f589_op_ctxt,rel_ModelPair_a5a4124c4969f589->createContext());
CREATE_OP_CONTEXT(rel_ModelPairCandidate_9322881dca01d8da_op_ctxt,rel_ModelPairCandidate_9322881dca01d8da->createContext());
CREATE_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt,rel_TrainingDataWithModel_bf0078ce702b39b8->createContext());
CREATE_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt,rel_ValOrTestDataWithModel_2810ba231c0c185a->createContext());
CREATE_OP_CONTEXT(rel__agg_subclause1_6b72bc2ad4593b7d_op_ctxt,rel__agg_subclause1_6b72bc2ad4593b7d->createContext());
for(const auto& env0 : *rel_ModelPairCandidate_9322881dca01d8da) {
if( !rel_ValOrTestDataWithModel_2810ba231c0c185a->lowerUpperRange_10001(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt)).empty()) {
auto range = rel_TrainingDataWithModel_bf0078ce702b39b8->lowerUpperRange_10001(Tuple<RamDomain,5>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[3])}},Tuple<RamDomain,5>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,1> env2;
bool shouldRunNested = true;
RamSigned res0 = 0;
auto range = rel__agg_subclause1_6b72bc2ad4593b7d->lowerUpperRange_11010110(Tuple<RamDomain,8>{{ramBitCast(env0[1]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,8>{{ramBitCast(env0[1]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel__agg_subclause1_6b72bc2ad4593b7d_op_ctxt));
for(const auto& env2 : range) {
if( true) {
shouldRunNested = true;
++res0
;}
}
env2[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(RamSigned(0)) == ramBitCast<RamDomain>(env2[0]))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_ModelPair_a5a4124c4969f589->insert(tuple,READ_OP_CONTEXT(rel_ModelPair_a5a4124c4969f589_op_ctxt));
}
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","testModel\tctx1\ttrainModel\tctx2"},{"auxArity","0"},{"name","ModelPair"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"testModel\", \"ctx1\", \"trainModel\", \"ctx2\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_ModelPair_a5a4124c4969f589);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_ModelPairCandidate_34fe56e981955072 {
public:
 Stratum_ModelPairCandidate_34fe56e981955072(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type& rel_FlowFromExtended_7fd58681b534e204,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_InvokePath_12c42b7c9b655a96,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPairCandidate_9322881dca01d8da,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type* rel_FlowFromExtended_7fd58681b534e204;
t_btree_iiii__0_1_2_3__1111__1100::Type* rel_InvokePath_12c42b7c9b655a96;
t_btree_iiii__0_1_2_3__1111::Type* rel_ModelPairCandidate_9322881dca01d8da;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_TrainingDataWithModel_bf0078ce702b39b8;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_ValOrTestDataWithModel_2810ba231c0c185a;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_ModelPairCandidate_34fe56e981955072::Stratum_ModelPairCandidate_34fe56e981955072(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type& rel_FlowFromExtended_7fd58681b534e204,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_InvokePath_12c42b7c9b655a96,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPairCandidate_9322881dca01d8da,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_FlowFromExtended_7fd58681b534e204(&rel_FlowFromExtended_7fd58681b534e204),
rel_InvokePath_12c42b7c9b655a96(&rel_InvokePath_12c42b7c9b655a96),
rel_ModelPairCandidate_9322881dca01d8da(&rel_ModelPairCandidate_9322881dca01d8da),
rel_TrainingDataWithModel_bf0078ce702b39b8(&rel_TrainingDataWithModel_bf0078ce702b39b8),
rel_ValOrTestDataWithModel_2810ba231c0c185a(&rel_ValOrTestDataWithModel_2810ba231c0c185a){
}

void Stratum_ModelPairCandidate_34fe56e981955072::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(ModelPairCandidate(testModel,ctx1,trainModel,ctx2) :- 
   ValOrTestDataWithModel(testModel,_,invo1,_,ctx1),
   TrainingDataWithModel(trainModel,_,invo2,_,ctx2),
   FlowFromExtended(testModel,ctx1,trainModel,ctx2,_),
   InvokePath(invo1,ctx1,invo2,ctx2).
in file main.dl [1272:1-1276:42])_");
if(!(rel_TrainingDataWithModel_bf0078ce702b39b8->empty()) && !(rel_InvokePath_12c42b7c9b655a96->empty()) && !(rel_ValOrTestDataWithModel_2810ba231c0c185a->empty()) && !(rel_FlowFromExtended_7fd58681b534e204->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt,rel_FlowFromExtended_7fd58681b534e204->createContext());
CREATE_OP_CONTEXT(rel_InvokePath_12c42b7c9b655a96_op_ctxt,rel_InvokePath_12c42b7c9b655a96->createContext());
CREATE_OP_CONTEXT(rel_ModelPairCandidate_9322881dca01d8da_op_ctxt,rel_ModelPairCandidate_9322881dca01d8da->createContext());
CREATE_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt,rel_TrainingDataWithModel_bf0078ce702b39b8->createContext());
CREATE_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt,rel_ValOrTestDataWithModel_2810ba231c0c185a->createContext());
for(const auto& env0 : *rel_ValOrTestDataWithModel_2810ba231c0c185a) {
for(const auto& env1 : *rel_TrainingDataWithModel_bf0078ce702b39b8) {
if( !rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_11110(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast(env1[0]), ramBitCast(env1[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast(env1[0]), ramBitCast(env1[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt)).empty() && rel_InvokePath_12c42b7c9b655a96->contains(Tuple<RamDomain,4>{{ramBitCast(env0[2]),ramBitCast(env0[4]),ramBitCast(env1[2]),ramBitCast(env1[4])}},READ_OP_CONTEXT(rel_InvokePath_12c42b7c9b655a96_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[4]),ramBitCast(env1[0]),ramBitCast(env1[4])}};
rel_ModelPairCandidate_9322881dca01d8da->insert(tuple,READ_OP_CONTEXT(rel_ModelPairCandidate_9322881dca01d8da_op_ctxt));
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","testModel\tctx1\ttrainModel\tctx2"},{"auxArity","0"},{"name","ModelPairCandidate"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"testModel\", \"ctx1\", \"trainModel\", \"ctx2\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_ModelPairCandidate_9322881dca01d8da);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_MultiUseTestLeak_a461fa3df0bbe5fc {
public:
 Stratum_MultiUseTestLeak_a461fa3df0bbe5fc(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_DataOverlap_5a4300eece6cb523,t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type& rel_FlowFromExtended_7fd58681b534e204,t_btree_iiii__0_1_2_3__1111::Type& rel_MultiUseTestLeak_0ea2b38088c6193a,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_ScoredDataWithModel_55bb6aafc5a52e34);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__0_1_2_3__1111::Type* rel_DataOverlap_5a4300eece6cb523;
t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type* rel_FlowFromExtended_7fd58681b534e204;
t_btree_iiii__0_1_2_3__1111::Type* rel_MultiUseTestLeak_0ea2b38088c6193a;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel_ScoredDataWithModel_55bb6aafc5a52e34;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_MultiUseTestLeak_a461fa3df0bbe5fc::Stratum_MultiUseTestLeak_a461fa3df0bbe5fc(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_DataOverlap_5a4300eece6cb523,t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type& rel_FlowFromExtended_7fd58681b534e204,t_btree_iiii__0_1_2_3__1111::Type& rel_MultiUseTestLeak_0ea2b38088c6193a,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_ScoredDataWithModel_55bb6aafc5a52e34):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_DataOverlap_5a4300eece6cb523(&rel_DataOverlap_5a4300eece6cb523),
rel_FlowFromExtended_7fd58681b534e204(&rel_FlowFromExtended_7fd58681b534e204),
rel_MultiUseTestLeak_0ea2b38088c6193a(&rel_MultiUseTestLeak_0ea2b38088c6193a),
rel_ScoredDataWithModel_55bb6aafc5a52e34(&rel_ScoredDataWithModel_55bb6aafc5a52e34){
}

void Stratum_MultiUseTestLeak_a461fa3df0bbe5fc::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(MultiUseTestLeak(test,invo,meth,ctx1) :- 
   ScoredDataWithModel(testModel,test,invo,meth,ctx1),
   ScoredDataWithModel(testModel2,test2,_,_,ctx2),
   DataOverlap(test,ctx1,test2,ctx2),
   !FlowFromExtended(testModel,ctx1,testModel2,ctx2,_),
   !FlowFromExtended(testModel2,ctx2,testModel,ctx1,_).
in file main.dl [1415:1-1422:61])_");
if(!(rel_DataOverlap_5a4300eece6cb523->empty()) && !(rel_ScoredDataWithModel_55bb6aafc5a52e34->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt,rel_DataOverlap_5a4300eece6cb523->createContext());
CREATE_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt,rel_FlowFromExtended_7fd58681b534e204->createContext());
CREATE_OP_CONTEXT(rel_MultiUseTestLeak_0ea2b38088c6193a_op_ctxt,rel_MultiUseTestLeak_0ea2b38088c6193a->createContext());
CREATE_OP_CONTEXT(rel_ScoredDataWithModel_55bb6aafc5a52e34_op_ctxt,rel_ScoredDataWithModel_55bb6aafc5a52e34->createContext());
for(const auto& env0 : *rel_ScoredDataWithModel_55bb6aafc5a52e34) {
for(const auto& env1 : *rel_ScoredDataWithModel_55bb6aafc5a52e34) {
if( rel_DataOverlap_5a4300eece6cb523->contains(Tuple<RamDomain,4>{{ramBitCast(env0[1]),ramBitCast(env0[4]),ramBitCast(env1[1]),ramBitCast(env1[4])}},READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt)) && !(!rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_11110(Tuple<RamDomain,5>{{ramBitCast(env1[0]), ramBitCast(env1[4]), ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env1[0]), ramBitCast(env1[4]), ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt)).empty()) && !(!rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_11110(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast(env1[0]), ramBitCast(env1[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast(env1[0]), ramBitCast(env1[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt)).empty())) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_MultiUseTestLeak_0ea2b38088c6193a->insert(tuple,READ_OP_CONTEXT(rel_MultiUseTestLeak_0ea2b38088c6193a_op_ctxt));
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","test\tinvo\tmeth\tctx"},{"auxArity","0"},{"name","MultiUseTestLeak"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"test\", \"invo\", \"meth\", \"ctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_MultiUseTestLeak_0ea2b38088c6193a);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_NextInvoke_55515eca48c56555 {
public:
 Stratum_NextInvoke_55515eca48c56555(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__1_0__11__01::Type& rel_NextInvoke_f6aefda469e3b88c);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_ii__1_0__11__01::Type* rel_NextInvoke_f6aefda469e3b88c;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_NextInvoke_55515eca48c56555::Stratum_NextInvoke_55515eca48c56555(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__1_0__11__01::Type& rel_NextInvoke_f6aefda469e3b88c):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_NextInvoke_f6aefda469e3b88c(&rel_NextInvoke_f6aefda469e3b88c){
}

void Stratum_NextInvoke_55515eca48c56555::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","invo1\tinvo2"},{"auxArity","0"},{"fact-dir","."},{"name","NextInvoke"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_NextInvoke_f6aefda469e3b88c);
} catch (std::exception& e) {std::cerr << "Error loading NextInvoke data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_NoTestData_75ac28ee7b7be134 {
public:
 Stratum_NoTestData_75ac28ee7b7be134(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_NoTestData_38fc47759ae30ee9,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiiii__1_4_5_0_2_3__111111__010011::Type& rel__agg_subclause2_47fa128cc9c98832);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel_NoTestData_38fc47759ae30ee9;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_TrainingDataWithModel_bf0078ce702b39b8;
t_btree_iiiiii__1_4_5_0_2_3__111111__010011::Type* rel__agg_subclause2_47fa128cc9c98832;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_NoTestData_75ac28ee7b7be134::Stratum_NoTestData_75ac28ee7b7be134(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_NoTestData_38fc47759ae30ee9,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiiii__1_4_5_0_2_3__111111__010011::Type& rel__agg_subclause2_47fa128cc9c98832):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_NoTestData_38fc47759ae30ee9(&rel_NoTestData_38fc47759ae30ee9),
rel_TrainingDataWithModel_bf0078ce702b39b8(&rel_TrainingDataWithModel_bf0078ce702b39b8),
rel__agg_subclause2_47fa128cc9c98832(&rel__agg_subclause2_47fa128cc9c98832){
}

void Stratum_NoTestData_75ac28ee7b7be134::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(NoTestData(trainModel,train,invo,meth,ctx2) :- 
   TrainingDataWithModel(trainModel,train,invo,meth,ctx2),
   0 = count : { __agg_subclause2(+underscore_352,ctx2,+underscore_353,+underscore_354,train,trainModel) }.
in file main.dl [1380:1-1383:11])_");
if(!(rel_TrainingDataWithModel_bf0078ce702b39b8->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_NoTestData_38fc47759ae30ee9_op_ctxt,rel_NoTestData_38fc47759ae30ee9->createContext());
CREATE_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt,rel_TrainingDataWithModel_bf0078ce702b39b8->createContext());
CREATE_OP_CONTEXT(rel__agg_subclause2_47fa128cc9c98832_op_ctxt,rel__agg_subclause2_47fa128cc9c98832->createContext());
for(const auto& env0 : *rel_TrainingDataWithModel_bf0078ce702b39b8) {
Tuple<RamDomain,1> env1;
bool shouldRunNested = true;
RamSigned res0 = 0;
auto range = rel__agg_subclause2_47fa128cc9c98832->lowerUpperRange_010011(Tuple<RamDomain,6>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env0[0])}},Tuple<RamDomain,6>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel__agg_subclause2_47fa128cc9c98832_op_ctxt));
for(const auto& env1 : range) {
if( true) {
shouldRunNested = true;
++res0
;}
}
env1[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(RamSigned(0)) == ramBitCast<RamDomain>(env1[0]))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_NoTestData_38fc47759ae30ee9->insert(tuple,READ_OP_CONTEXT(rel_NoTestData_38fc47759ae30ee9_op_ctxt));
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","trainModel\ttrain\tinvo\tmeth\tctx"},{"auxArity","0"},{"name","NoTestData"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"trainModel\", \"train\", \"invo\", \"meth\", \"ctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_NoTestData_38fc47759ae30ee9);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel__agg_subclause2_47fa128cc9c98832->purge();
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_NoValAndTestData_bf8999ec0a234c2d {
public:
 Stratum_NoValAndTestData_bf8999ec0a234c2d(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_NoValAndTestData_4e404a42ce2c80b7,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiiii__1_4_5_0_2_3__111111__010011::Type& rel__agg_subclause3_6933ce586d204815);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel_NoValAndTestData_4e404a42ce2c80b7;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_TrainingDataWithModel_bf0078ce702b39b8;
t_btree_iiiiii__1_4_5_0_2_3__111111__010011::Type* rel__agg_subclause3_6933ce586d204815;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_NoValAndTestData_bf8999ec0a234c2d::Stratum_NoValAndTestData_bf8999ec0a234c2d(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_NoValAndTestData_4e404a42ce2c80b7,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiiii__1_4_5_0_2_3__111111__010011::Type& rel__agg_subclause3_6933ce586d204815):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_NoValAndTestData_4e404a42ce2c80b7(&rel_NoValAndTestData_4e404a42ce2c80b7),
rel_TrainingDataWithModel_bf0078ce702b39b8(&rel_TrainingDataWithModel_bf0078ce702b39b8),
rel__agg_subclause3_6933ce586d204815(&rel__agg_subclause3_6933ce586d204815){
}

void Stratum_NoValAndTestData_bf8999ec0a234c2d::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(NoValAndTestData(trainModel,train,invo,meth,ctx2) :- 
   TrainingDataWithModel(trainModel,train,invo,meth,ctx2),
   0 = count : { __agg_subclause3(+underscore_355,ctx2,+underscore_356,+underscore_357,train,trainModel) }.
in file main.dl [1375:1-1378:11])_");
if(!(rel_TrainingDataWithModel_bf0078ce702b39b8->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_NoValAndTestData_4e404a42ce2c80b7_op_ctxt,rel_NoValAndTestData_4e404a42ce2c80b7->createContext());
CREATE_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt,rel_TrainingDataWithModel_bf0078ce702b39b8->createContext());
CREATE_OP_CONTEXT(rel__agg_subclause3_6933ce586d204815_op_ctxt,rel__agg_subclause3_6933ce586d204815->createContext());
for(const auto& env0 : *rel_TrainingDataWithModel_bf0078ce702b39b8) {
Tuple<RamDomain,1> env1;
bool shouldRunNested = true;
RamSigned res0 = 0;
auto range = rel__agg_subclause3_6933ce586d204815->lowerUpperRange_010011(Tuple<RamDomain,6>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env0[0])}},Tuple<RamDomain,6>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel__agg_subclause3_6933ce586d204815_op_ctxt));
for(const auto& env1 : range) {
if( true) {
shouldRunNested = true;
++res0
;}
}
env1[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(RamSigned(0)) == ramBitCast<RamDomain>(env1[0]))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_NoValAndTestData_4e404a42ce2c80b7->insert(tuple,READ_OP_CONTEXT(rel_NoValAndTestData_4e404a42ce2c80b7_op_ctxt));
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","trainModel\ttrain\tinvo\tmeth\tctx"},{"auxArity","0"},{"name","NoValAndTestData"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"trainModel\", \"train\", \"invo\", \"meth\", \"ctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_NoValAndTestData_4e404a42ce2c80b7);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel__agg_subclause3_6933ce586d204815->purge();
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_OverlapLeak_df4929de03870880 {
public:
 Stratum_OverlapLeak_df4929de03870880(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_DataOverlap_5a4300eece6cb523,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPair_a5a4124c4969f589,t_btree_iiiiii__0_1_2_3_4_5__111111::Type& rel_OverlapLeak_703978dd669490f5,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__0_1_2_3__1111::Type* rel_DataOverlap_5a4300eece6cb523;
t_btree_iiii__0_1_2_3__1111::Type* rel_ModelPair_a5a4124c4969f589;
t_btree_iiiiii__0_1_2_3_4_5__111111::Type* rel_OverlapLeak_703978dd669490f5;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_TrainingDataWithModel_bf0078ce702b39b8;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_ValOrTestDataWithModel_2810ba231c0c185a;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_OverlapLeak_df4929de03870880::Stratum_OverlapLeak_df4929de03870880(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_DataOverlap_5a4300eece6cb523,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPair_a5a4124c4969f589,t_btree_iiiiii__0_1_2_3_4_5__111111::Type& rel_OverlapLeak_703978dd669490f5,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_DataOverlap_5a4300eece6cb523(&rel_DataOverlap_5a4300eece6cb523),
rel_ModelPair_a5a4124c4969f589(&rel_ModelPair_a5a4124c4969f589),
rel_OverlapLeak_703978dd669490f5(&rel_OverlapLeak_703978dd669490f5),
rel_TrainingDataWithModel_bf0078ce702b39b8(&rel_TrainingDataWithModel_bf0078ce702b39b8),
rel_ValOrTestDataWithModel_2810ba231c0c185a(&rel_ValOrTestDataWithModel_2810ba231c0c185a){
}

void Stratum_OverlapLeak_df4929de03870880::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(OverlapLeak(testModel,ctx2,trainModel,ctx1,invo,meth) :- 
   TrainingDataWithModel(trainModel,train,invo,meth,ctx1),
   ValOrTestDataWithModel(testModel,test,_,_,ctx2),
   DataOverlap(train,ctx1,test,ctx2),
   ModelPair(testModel,ctx1,trainModel,ctx2).
in file main.dl [1353:1-1359:50])_");
if(!(rel_ValOrTestDataWithModel_2810ba231c0c185a->empty()) && !(rel_DataOverlap_5a4300eece6cb523->empty()) && !(rel_TrainingDataWithModel_bf0078ce702b39b8->empty()) && !(rel_ModelPair_a5a4124c4969f589->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt,rel_DataOverlap_5a4300eece6cb523->createContext());
CREATE_OP_CONTEXT(rel_ModelPair_a5a4124c4969f589_op_ctxt,rel_ModelPair_a5a4124c4969f589->createContext());
CREATE_OP_CONTEXT(rel_OverlapLeak_703978dd669490f5_op_ctxt,rel_OverlapLeak_703978dd669490f5->createContext());
CREATE_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt,rel_TrainingDataWithModel_bf0078ce702b39b8->createContext());
CREATE_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt,rel_ValOrTestDataWithModel_2810ba231c0c185a->createContext());
for(const auto& env0 : *rel_TrainingDataWithModel_bf0078ce702b39b8) {
for(const auto& env1 : *rel_ValOrTestDataWithModel_2810ba231c0c185a) {
if( rel_ModelPair_a5a4124c4969f589->contains(Tuple<RamDomain,4>{{ramBitCast(env1[0]),ramBitCast(env0[4]),ramBitCast(env0[0]),ramBitCast(env1[4])}},READ_OP_CONTEXT(rel_ModelPair_a5a4124c4969f589_op_ctxt)) && rel_DataOverlap_5a4300eece6cb523->contains(Tuple<RamDomain,4>{{ramBitCast(env0[1]),ramBitCast(env0[4]),ramBitCast(env1[1]),ramBitCast(env1[4])}},READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt))) {
Tuple<RamDomain,6> tuple{{ramBitCast(env1[0]),ramBitCast(env1[4]),ramBitCast(env0[0]),ramBitCast(env0[4]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_OverlapLeak_703978dd669490f5->insert(tuple,READ_OP_CONTEXT(rel_OverlapLeak_703978dd669490f5_op_ctxt));
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","testModel\tctx1\ttrainModel\tctx2\tinvo\tmeth"},{"auxArity","0"},{"name","OverlapLeak"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 6, \"params\": [\"testModel\", \"ctx1\", \"trainModel\", \"ctx2\", \"invo\", \"meth\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 6, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\", \"s:Invocation\", \"s:Method\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_OverlapLeak_703978dd669490f5);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_ParamContentToRetCondEquivFlow_ba285ab7093238da {
public:
 Stratum_ParamContentToRetCondEquivFlow_ba285ab7093238da(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iiii__3_0_1_2__1111__0001::Type& rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_Invoke_d61c77705bff35b0;
t_btree_iiii__3_0_1_2__1111__0001::Type* rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d;
std::vector<std::regex> regexes;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_ParamContentToRetCondEquivFlow_ba285ab7093238da::Stratum_ParamContentToRetCondEquivFlow_ba285ab7093238da(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iiii__3_0_1_2__1111__0001::Type& rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_Invoke_d61c77705bff35b0(&rel_Invoke_d61c77705bff35b0),
rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d(&rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d),
regexes({
	std::regex("pandas[.](concat)"),
}){
}

void Stratum_ParamContentToRetCondEquivFlow_ba285ab7093238da::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(ParamContentToRetCondEquivFlow(0,1,173,meth) :- 
   Invoke(_,meth,_),
   match("pandas[.](concat)", meth).
in file main.dl [367:1-369:38])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d_op_ctxt,rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(0))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(RamSigned(173)),ramBitCast(env0[1])}};
rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d->insert(tuple,READ_OP_CONTEXT(rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d_op_ctxt));
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_ParamToParamDataFlow_c8a416a0b8aa95a7 {
public:
 Stratum_ParamToParamDataFlow_c8a416a0b8aa95a7(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iii__2_0_1__001__111::Type& rel_ParamToParamDataFlow_0bd19d43cb842556);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_Invoke_d61c77705bff35b0;
t_btree_iii__2_0_1__001__111::Type* rel_ParamToParamDataFlow_0bd19d43cb842556;
std::vector<std::regex> regexes;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_ParamToParamDataFlow_c8a416a0b8aa95a7::Stratum_ParamToParamDataFlow_c8a416a0b8aa95a7(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iii__2_0_1__001__111::Type& rel_ParamToParamDataFlow_0bd19d43cb842556):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_Invoke_d61c77705bff35b0(&rel_Invoke_d61c77705bff35b0),
rel_ParamToParamDataFlow_0bd19d43cb842556(&rel_ParamToParamDataFlow_0bd19d43cb842556),
regexes({
	std::regex(".*[.](append|add)"),
	std::regex(".*[.](insert)"),
	std::regex(".*(Unknown|Unbound|Any|ndarray)[.](put)"),
	std::regex("numpy[.](copyto|fill_diagonal)"),
	std::regex("numpy[.](place|put|put_along_axis|putmask)"),
}){
}

void Stratum_ParamToParamDataFlow_c8a416a0b8aa95a7::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(ParamToParamDataFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match(".*[.](append|add)", meth).
in file main.dl [203:1-206:38])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamDataFlow_0bd19d43cb842556_op_ctxt,rel_ParamToParamDataFlow_0bd19d43cb842556->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(0))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToParamDataFlow_0bd19d43cb842556->insert(tuple,READ_OP_CONTEXT(rel_ParamToParamDataFlow_0bd19d43cb842556_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToParamDataFlow(0,2,meth) :- 
   Invoke(_,meth,_),
   match(".*[.](insert)", meth).
in file main.dl [208:1-211:34])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamDataFlow_0bd19d43cb842556_op_ctxt,rel_ParamToParamDataFlow_0bd19d43cb842556->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(1))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(2)),ramBitCast(env0[1])}};
rel_ParamToParamDataFlow_0bd19d43cb842556->insert(tuple,READ_OP_CONTEXT(rel_ParamToParamDataFlow_0bd19d43cb842556_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToParamDataFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match(".*(Unknown|Unbound|Any|ndarray)[.](put)", meth).
in file main.dl [213:1-216:60])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamDataFlow_0bd19d43cb842556_op_ctxt,rel_ParamToParamDataFlow_0bd19d43cb842556->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(2))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToParamDataFlow_0bd19d43cb842556->insert(tuple,READ_OP_CONTEXT(rel_ParamToParamDataFlow_0bd19d43cb842556_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToParamDataFlow(1,2,meth) :- 
   Invoke(_,meth,_),
   match("numpy[.](copyto|fill_diagonal)", meth).
in file main.dl [218:1-221:51])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamDataFlow_0bd19d43cb842556_op_ctxt,rel_ParamToParamDataFlow_0bd19d43cb842556->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(3))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(1)),ramBitCast(RamSigned(2)),ramBitCast(env0[1])}};
rel_ParamToParamDataFlow_0bd19d43cb842556->insert(tuple,READ_OP_CONTEXT(rel_ParamToParamDataFlow_0bd19d43cb842556_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToParamDataFlow(1,3,meth) :- 
   Invoke(_,meth,_),
   match("numpy[.](place|put|put_along_axis|putmask)", meth).
in file main.dl [223:1-226:63])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamDataFlow_0bd19d43cb842556_op_ctxt,rel_ParamToParamDataFlow_0bd19d43cb842556->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(4))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(1)),ramBitCast(RamSigned(3)),ramBitCast(env0[1])}};
rel_ParamToParamDataFlow_0bd19d43cb842556->insert(tuple,READ_OP_CONTEXT(rel_ParamToParamDataFlow_0bd19d43cb842556_op_ctxt));
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_ParamToParamFlow_d08afc6c1a6bb6c9 {
public:
 Stratum_ParamToParamFlow_d08afc6c1a6bb6c9(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iii__2_0_1__001__111::Type& rel_ParamToParamFlow_62719282a92885f3);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_Invoke_d61c77705bff35b0;
t_btree_iii__2_0_1__001__111::Type* rel_ParamToParamFlow_62719282a92885f3;
std::vector<std::regex> regexes;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_ParamToParamFlow_d08afc6c1a6bb6c9::Stratum_ParamToParamFlow_d08afc6c1a6bb6c9(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iii__2_0_1__001__111::Type& rel_ParamToParamFlow_62719282a92885f3):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_Invoke_d61c77705bff35b0(&rel_Invoke_d61c77705bff35b0),
rel_ParamToParamFlow_62719282a92885f3(&rel_ParamToParamFlow_62719282a92885f3),
regexes({
	std::regex(".*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries|GroupBy)[.](fillna)"),
	std::regex(".*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries|GroupBy)[.](clip)"),
	std::regex(".*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries|GroupBy)[.](mask|where|replace)"),
	std::regex(".*[.](append|add)"),
	std::regex(".*[.](insert)"),
	std::regex(".*(Unknown|Unbound|Any|ndarray)[.](put)"),
	std::regex("numpy[.](copyto|fill_diagonal)"),
	std::regex("numpy[.](place|put|put_along_axis|putmask)"),
}){
}

void Stratum_ParamToParamFlow_d08afc6c1a6bb6c9::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(ParamToParamFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match(".*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries|GroupBy)[.](fillna)", meth).
in file main.dl [190:1-192:94])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamFlow_62719282a92885f3_op_ctxt,rel_ParamToParamFlow_62719282a92885f3->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(0))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToParamFlow_62719282a92885f3->insert(tuple,READ_OP_CONTEXT(rel_ParamToParamFlow_62719282a92885f3_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToParamFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match(".*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries|GroupBy)[.](clip)", meth).
in file main.dl [194:1-197:92])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamFlow_62719282a92885f3_op_ctxt,rel_ParamToParamFlow_62719282a92885f3->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(1))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToParamFlow_62719282a92885f3->insert(tuple,READ_OP_CONTEXT(rel_ParamToParamFlow_62719282a92885f3_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToParamFlow(0,2,meth) :- 
   Invoke(_,meth,_),
   match(".*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries|GroupBy)[.](clip)", meth).
in file main.dl [194:1-197:92])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamFlow_62719282a92885f3_op_ctxt,rel_ParamToParamFlow_62719282a92885f3->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(1))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(2)),ramBitCast(env0[1])}};
rel_ParamToParamFlow_62719282a92885f3->insert(tuple,READ_OP_CONTEXT(rel_ParamToParamFlow_62719282a92885f3_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToParamFlow(0,2,meth) :- 
   Invoke(_,meth,_),
   match(".*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries|GroupBy)[.](mask|where|replace)", meth).
in file main.dl [199:1-201:106])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamFlow_62719282a92885f3_op_ctxt,rel_ParamToParamFlow_62719282a92885f3->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(2))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(2)),ramBitCast(env0[1])}};
rel_ParamToParamFlow_62719282a92885f3->insert(tuple,READ_OP_CONTEXT(rel_ParamToParamFlow_62719282a92885f3_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToParamFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match(".*[.](append|add)", meth).
in file main.dl [203:1-206:38])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamFlow_62719282a92885f3_op_ctxt,rel_ParamToParamFlow_62719282a92885f3->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(3))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToParamFlow_62719282a92885f3->insert(tuple,READ_OP_CONTEXT(rel_ParamToParamFlow_62719282a92885f3_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToParamFlow(0,2,meth) :- 
   Invoke(_,meth,_),
   match(".*[.](insert)", meth).
in file main.dl [208:1-211:34])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamFlow_62719282a92885f3_op_ctxt,rel_ParamToParamFlow_62719282a92885f3->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(4))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(2)),ramBitCast(env0[1])}};
rel_ParamToParamFlow_62719282a92885f3->insert(tuple,READ_OP_CONTEXT(rel_ParamToParamFlow_62719282a92885f3_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToParamFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match(".*(Unknown|Unbound|Any|ndarray)[.](put)", meth).
in file main.dl [213:1-216:60])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamFlow_62719282a92885f3_op_ctxt,rel_ParamToParamFlow_62719282a92885f3->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(5))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToParamFlow_62719282a92885f3->insert(tuple,READ_OP_CONTEXT(rel_ParamToParamFlow_62719282a92885f3_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToParamFlow(1,2,meth) :- 
   Invoke(_,meth,_),
   match("numpy[.](copyto|fill_diagonal)", meth).
in file main.dl [218:1-221:51])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamFlow_62719282a92885f3_op_ctxt,rel_ParamToParamFlow_62719282a92885f3->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(6))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(1)),ramBitCast(RamSigned(2)),ramBitCast(env0[1])}};
rel_ParamToParamFlow_62719282a92885f3->insert(tuple,READ_OP_CONTEXT(rel_ParamToParamFlow_62719282a92885f3_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToParamFlow(1,3,meth) :- 
   Invoke(_,meth,_),
   match("numpy[.](place|put|put_along_axis|putmask)", meth).
in file main.dl [223:1-226:63])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamFlow_62719282a92885f3_op_ctxt,rel_ParamToParamFlow_62719282a92885f3->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(7))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(1)),ramBitCast(RamSigned(3)),ramBitCast(env0[1])}};
rel_ParamToParamFlow_62719282a92885f3->insert(tuple,READ_OP_CONTEXT(rel_ParamToParamFlow_62719282a92885f3_op_ctxt));
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_ParamToParamTaintSourceMethod_d024751586697ad1 {
public:
 Stratum_ParamToParamTaintSourceMethod_d024751586697ad1(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iiii__2_0_1_3__1111__0010::Type& rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_Invoke_d61c77705bff35b0;
t_btree_iiii__2_0_1_3__1111__0010::Type* rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed;
std::vector<std::regex> regexes;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_ParamToParamTaintSourceMethod_d024751586697ad1::Stratum_ParamToParamTaintSourceMethod_d024751586697ad1(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iiii__2_0_1_3__1111__0010::Type& rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_Invoke_d61c77705bff35b0(&rel_Invoke_d61c77705bff35b0),
rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed(&rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed),
regexes({
	std::regex("(KBinsDiscretizer|PowerTransformer|QuantileTransformer|MaxAbsScaler|StandardScaler|MinMaxScaler|RobustScaler)[.]fit_transform"),
	std::regex("(KBinsDiscretizer|PowerTransformer|QuantileTransformer|MaxAbsScaler|StandardScaler|MinMaxScaler|RobustScaler)[.]fit"),
	std::regex("(Imputer|SimpleImputer|IterativeImputer|KNNImputer)[.]fit_transform"),
	std::regex("(Imputer|SimpleImputer|IterativeImputer|KNNImputer)[.]fit"),
	std::regex("(GenericUnivariateSelect|SelectPercentile|SelectKBest|SelectFpr|SelectFdr|SelectFromModel|SelectFwe|SequentialFeatureSelector|RFE|RFECV|VarianceThreshold)[.]fit_transform"),
	std::regex("(GenericUnivariateSelect|SelectPercentile|SelectKBest|SelectFpr|SelectFdr|SelectFromModel|SelectFwe|SequentialFeatureSelector|RFE|RFECV|VarianceThreshold)[.]fit"),
	std::regex("(AffinityPropagation|AgglomerativeClustering|Birch|DBSCAN|FeatureAgglomeration|KMeans|MiniBatchKMeans|MeanShift|OPTICS|SpectralClustering|SpectralBiclustering|SpectralCoclustering)[.](fit|fit_predict)"),
	std::regex("(CountVectorizer|HashingVectorizer|TfidfTransformer|TfidfVectorizer|PCA)[.]fit_transform"),
	std::regex("(CountVectorizer|HashingVectorizer|TfidfTransformer|TfidfVectorizer|PCA)[.]fit"),
	std::regex(".*Tokenizer[.]fit_on_(sequences|texts)"),
}){
}

void Stratum_ParamToParamTaintSourceMethod_d024751586697ad1::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(ParamToParamTaintSourceMethod(0,1,meth,"rowset") :- 
   Invoke(_,meth,_),
   match("(KBinsDiscretizer|PowerTransformer|QuantileTransformer|MaxAbsScaler|StandardScaler|MinMaxScaler|RobustScaler)[.]fit_transform", meth).
in file main.dl [484:1-487:146])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed_op_ctxt,rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(0))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(30))}};
rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->insert(tuple,READ_OP_CONTEXT(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToParamTaintSourceMethod(0,1,meth,"rowset") :- 
   Invoke(_,meth,_),
   match("(KBinsDiscretizer|PowerTransformer|QuantileTransformer|MaxAbsScaler|StandardScaler|MinMaxScaler|RobustScaler)[.]fit", meth).
in file main.dl [489:1-492:136])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed_op_ctxt,rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(1))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(30))}};
rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->insert(tuple,READ_OP_CONTEXT(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToParamTaintSourceMethod(0,1,meth,"rowset") :- 
   Invoke(_,meth,_),
   match("(Imputer|SimpleImputer|IterativeImputer|KNNImputer)[.]fit_transform", meth).
in file main.dl [495:1-498:88])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed_op_ctxt,rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(2))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(30))}};
rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->insert(tuple,READ_OP_CONTEXT(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToParamTaintSourceMethod(0,1,meth,"rowset") :- 
   Invoke(_,meth,_),
   match("(Imputer|SimpleImputer|IterativeImputer|KNNImputer)[.]fit", meth).
in file main.dl [500:1-503:78])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed_op_ctxt,rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(3))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(30))}};
rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->insert(tuple,READ_OP_CONTEXT(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToParamTaintSourceMethod(0,1,meth,"rowset") :- 
   Invoke(_,meth,_),
   match("(GenericUnivariateSelect|SelectPercentile|SelectKBest|SelectFpr|SelectFdr|SelectFromModel|SelectFwe|SequentialFeatureSelector|RFE|RFECV|VarianceThreshold)[.]fit_transform", meth).
in file main.dl [506:1-509:191])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed_op_ctxt,rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(4))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(30))}};
rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->insert(tuple,READ_OP_CONTEXT(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToParamTaintSourceMethod(0,1,meth,"rowset") :- 
   Invoke(_,meth,_),
   match("(GenericUnivariateSelect|SelectPercentile|SelectKBest|SelectFpr|SelectFdr|SelectFromModel|SelectFwe|SequentialFeatureSelector|RFE|RFECV|VarianceThreshold)[.]fit", meth).
in file main.dl [511:1-514:181])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed_op_ctxt,rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(5))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(30))}};
rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->insert(tuple,READ_OP_CONTEXT(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToParamTaintSourceMethod(0,1,meth,"rowset") :- 
   Invoke(_,meth,_),
   match("(AffinityPropagation|AgglomerativeClustering|Birch|DBSCAN|FeatureAgglomeration|KMeans|MiniBatchKMeans|MeanShift|OPTICS|SpectralClustering|SpectralBiclustering|SpectralCoclustering)[.](fit|fit_predict)", meth).
in file main.dl [517:1-520:221])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed_op_ctxt,rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(6))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(30))}};
rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->insert(tuple,READ_OP_CONTEXT(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToParamTaintSourceMethod(0,1,meth,"rowset") :- 
   Invoke(_,meth,_),
   match("(CountVectorizer|HashingVectorizer|TfidfTransformer|TfidfVectorizer|PCA)[.]fit_transform", meth).
in file main.dl [523:1-526:109])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed_op_ctxt,rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(7))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(30))}};
rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->insert(tuple,READ_OP_CONTEXT(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToParamTaintSourceMethod(0,1,meth,"rowset") :- 
   Invoke(_,meth,_),
   match("(CountVectorizer|HashingVectorizer|TfidfTransformer|TfidfVectorizer|PCA)[.]fit", meth).
in file main.dl [528:1-531:99])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed_op_ctxt,rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(8))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(30))}};
rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->insert(tuple,READ_OP_CONTEXT(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToParamTaintSourceMethod(0,1,meth,"rowset") :- 
   Invoke(_,meth,_),
   match(".*Tokenizer[.]fit_on_(sequences|texts)", meth).
in file main.dl [551:1-554:59])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed_op_ctxt,rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(9))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(30))}};
rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->insert(tuple,READ_OP_CONTEXT(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed_op_ctxt));
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_ParamToRetCondEquivFlow_f6fc95c901f46405 {
public:
 Stratum_ParamToRetCondEquivFlow_f6fc95c901f46405(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iiii__3_0_1_2__1111__0001::Type& rel_ParamToRetCondEquivFlow_219c5a0dd6644473);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_Invoke_d61c77705bff35b0;
t_btree_iiii__3_0_1_2__1111__0001::Type* rel_ParamToRetCondEquivFlow_219c5a0dd6644473;
std::vector<std::regex> regexes;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_ParamToRetCondEquivFlow_f6fc95c901f46405::Stratum_ParamToRetCondEquivFlow_f6fc95c901f46405(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iiii__3_0_1_2__1111__0001::Type& rel_ParamToRetCondEquivFlow_219c5a0dd6644473):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_Invoke_d61c77705bff35b0(&rel_Invoke_d61c77705bff35b0),
rel_ParamToRetCondEquivFlow_219c5a0dd6644473(&rel_ParamToRetCondEquivFlow_219c5a0dd6644473),
regexes({
	std::regex(".*(Series|DataFrame)[.](drop)"),
}){
}

void Stratum_ParamToRetCondEquivFlow_f6fc95c901f46405::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(ParamToRetCondEquivFlow(0,0,173,meth) :- 
   Invoke(_,meth,_),
   match(".*(Series|DataFrame)[.](drop)", meth).
in file main.dl [362:1-364:50])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetCondEquivFlow_219c5a0dd6644473_op_ctxt,rel_ParamToRetCondEquivFlow_219c5a0dd6644473->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(0))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0)),ramBitCast(RamSigned(173)),ramBitCast(env0[1])}};
rel_ParamToRetCondEquivFlow_219c5a0dd6644473->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetCondEquivFlow_219c5a0dd6644473_op_ctxt));
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_ParamToRetCondTaintSourceMethod_21764bb54cde2a1f {
public:
 Stratum_ParamToRetCondTaintSourceMethod_21764bb54cde2a1f(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__3_0_1_2_4__11111__00010::Type& rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiiii__3_0_1_2_4__11111__00010::Type* rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_ParamToRetCondTaintSourceMethod_21764bb54cde2a1f::Stratum_ParamToRetCondTaintSourceMethod_21764bb54cde2a1f(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__3_0_1_2_4__11111__00010::Type& rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843(&rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843){
}

void Stratum_ParamToRetCondTaintSourceMethod_21764bb54cde2a1f::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(ParamToRetCondTaintSourceMethod(0,1,4027,"DataFrameMapper.fit_transform","rowset").
in file main.dl [537:1-537:88])_");
[&](){
CREATE_OP_CONTEXT(rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843_op_ctxt,rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843->createContext());
Tuple<RamDomain,5> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(RamSigned(4027)),ramBitCast(RamSigned(31)),ramBitCast(RamSigned(30))}};
rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843_op_ctxt));
}
();signalHandler->setMsg(R"_(ParamToRetCondTaintSourceMethod(0,1,4027,"Pipeline.fit_transform","rowset").
in file main.dl [538:1-538:81])_");
[&](){
CREATE_OP_CONTEXT(rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843_op_ctxt,rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843->createContext());
Tuple<RamDomain,5> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(RamSigned(4027)),ramBitCast(RamSigned(32)),ramBitCast(RamSigned(30))}};
rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843_op_ctxt));
}
();}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_ParamToRetDataFlow_d613a94f90c1d634 {
public:
 Stratum_ParamToRetDataFlow_d613a94f90c1d634(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iii__2_0_1__001__111::Type& rel_ParamToRetDataFlow_4802f16da470059f);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_Invoke_d61c77705bff35b0;
t_btree_iii__2_0_1__001__111::Type* rel_ParamToRetDataFlow_4802f16da470059f;
std::vector<std::regex> regexes;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_ParamToRetDataFlow_d613a94f90c1d634::Stratum_ParamToRetDataFlow_d613a94f90c1d634(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iii__2_0_1__001__111::Type& rel_ParamToRetDataFlow_4802f16da470059f):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_Invoke_d61c77705bff35b0(&rel_Invoke_d61c77705bff35b0),
rel_ParamToRetDataFlow_4802f16da470059f(&rel_ParamToRetDataFlow_4802f16da470059f),
regexes({
	std::regex(".*[.](reshape)"),
	std::regex("numpy[.](prod|sum|nanprod|nansum|cumprod|cumsum|nancumprod|nancumsum|diff|ediff1d|gradient|trapz|amax|nanmax|amin|nanmin|convolve)"),
	std::regex("numpy[.](pad)"),
	std::regex("numpy[.](extract)"),
	std::regex("numpy[.](dot|vdot|inner|outer|matmul|tensordot|kron)"),
	std::regex("numpy[.]linalg[.](cholesky|qr|svd|inv|pinv|tensorinv)"),
	std::regex("numpy[.](reshape|ravel|moveaxis|rollaxis|swapaxes|transpose|atleast_1d|atleast_2d|atleast_3d|broadcast|broadcast_to|broadcast_arrays|expand_dims|squeeze|asscalar|concatenate|stack|block|vstack|hstack|dstack|column_stack|row_stack|split|array_split|dsplit|hsplit|vsplit|tile|repeat|delete|insert|append|resize|trim_zeros|unique|flip|fliplr|flipud|roll|rot90)"),
	std::regex("numpy[.](intersect1d|setdiff1d|setxor1d|union1d)"),
	std::regex("numpy[.](take|take_along_axis|diag|diagonal)"),
	std::regex("numpy[.](choose|compress|select)"),
	std::regex(".*(Unknown|Unbound|Any|ndarray)[.](reshape|transpose|swapaxes|flattern|ravel|squeeze|take|repeat|choose|compress|diagonal)"),
	std::regex(".*[.](fit_resample|fit_sample)"),
	std::regex(".*train_test_split"),
	std::regex("pandas[.](merge|merge_ordered|merge_asof)"),
	std::regex("pandas[.](melt|pivot|pivot_table|concat|unique|wide_to_long)"),
	std::regex(".*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries)[.](align)"),
	std::regex(".*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries)[.](append|compare|update|join|merge)"),
	std::regex(".*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries)[.](r)?(add|sub|mul|div|truediv|floordiv|mod|pow|dot)"),
	std::regex(".*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries)[.](lt|gt|le|ge|ne|eq)"),
	std::regex(".*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries|Groupby)[.](combine|combine_first|groupby|expanding|ewm|pct_change|unique|head|last|reindex|reindex_like|sample|take|tail|truncate|filter|reorder_levels|swaplevel|swapaxes|stack|unstack|explode|ravel|repeat|squeeze|asfreq|asof|resample|at_time|between_time|items|iteritems|iterrows|itertuples|lookup|xs|query|melt|pipe|drop|dropna|drop_duplicates|droplevel|duplicated|agg|aggregate)"),
	std::regex(".*Series[.]str[.](extractall)"),
	std::regex(".*ImageDataGenerator[.](flow|flow_from_dataframe)"),
	std::regex(".*[.](get_splits)"),
	std::regex(".*[.](random_split)"),
}){
}

void Stratum_ParamToRetDataFlow_d613a94f90c1d634::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,0,meth) :- 
   Invoke(_,meth,_),
   match(".*[.](reshape)", meth).
in file main.dl [240:1-242:35])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(0))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match("numpy[.](prod|sum|nanprod|nansum|cumprod|cumsum|nancumprod|nancumsum|diff|ediff1d|gradient|trapz|amax|nanmax|amin|nanmin|convolve)", meth).
in file main.dl [265:1-267:151])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(1))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match("numpy[.](pad)", meth).
in file main.dl [269:1-271:34])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(2))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,2,meth) :- 
   Invoke(_,meth,_),
   match("numpy[.](extract)", meth).
in file main.dl [272:1-274:38])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(3))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(2)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match("numpy[.](dot|vdot|inner|outer|matmul|tensordot|kron)", meth).
in file main.dl [277:1-280:73])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(4))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,2,meth) :- 
   Invoke(_,meth,_),
   match("numpy[.](dot|vdot|inner|outer|matmul|tensordot|kron)", meth).
in file main.dl [277:1-280:73])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(4))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(2)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match("numpy[.]linalg[.](cholesky|qr|svd|inv|pinv|tensorinv)", meth).
in file main.dl [282:1-284:74])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(5))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match("numpy[.](reshape|ravel|moveaxis|rollaxis|swapaxes|transpose|atleast_1d|atleast_2d|atleast_3d|broadcast|broadcast_to|broadcast_arrays|expand_dims|squeeze|asscalar|concatenate|stack|block|vstack|hstack|dstack|column_stack|row_stack|split|array_split|dsplit|hsplit|vsplit|tile|repeat|delete|insert|append|resize|trim_zeros|unique|flip|fliplr|flipud|roll|rot90)", meth).
in file main.dl [287:1-289:378])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(6))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match("numpy[.](intersect1d|setdiff1d|setxor1d|union1d)", meth).
in file main.dl [292:1-295:69])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(7))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,2,meth) :- 
   Invoke(_,meth,_),
   match("numpy[.](intersect1d|setdiff1d|setxor1d|union1d)", meth).
in file main.dl [292:1-295:69])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(7))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(2)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match("numpy[.](take|take_along_axis|diag|diagonal)", meth).
in file main.dl [298:1-300:65])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(8))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,2,meth) :- 
   Invoke(_,meth,_),
   match("numpy[.](choose|compress|select)", meth).
in file main.dl [301:1-303:53])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(9))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(2)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,0,meth) :- 
   Invoke(_,meth,_),
   match(".*(Unknown|Unbound|Any|ndarray)[.](reshape|transpose|swapaxes|flattern|ravel|squeeze|take|repeat|choose|compress|diagonal)", meth).
in file main.dl [310:1-312:143])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(10))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match(".*[.](fit_resample|fit_sample)", meth).
in file main.dl [321:1-323:51])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(11))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match(".*train_test_split", meth).
in file main.dl [328:1-333:39])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(12))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(1,1,meth) :- 
   Invoke(_,meth,_),
   match(".*train_test_split", meth).
in file main.dl [328:1-333:39])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(12))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(1)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(2,2,meth) :- 
   Invoke(_,meth,_),
   match(".*train_test_split", meth).
in file main.dl [328:1-333:39])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(12))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(2)),ramBitCast(RamSigned(2)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(3,2,meth) :- 
   Invoke(_,meth,_),
   match(".*train_test_split", meth).
in file main.dl [328:1-333:39])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(12))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(3)),ramBitCast(RamSigned(2)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match("pandas[.](merge|merge_ordered|merge_asof)", meth).
in file main.dl [374:1-377:62])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(13))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,2,meth) :- 
   Invoke(_,meth,_),
   match("pandas[.](merge|merge_ordered|merge_asof)", meth).
in file main.dl [374:1-377:62])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(13))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(2)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match("pandas[.](melt|pivot|pivot_table|concat|unique|wide_to_long)", meth).
in file main.dl [379:1-381:81])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(14))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,0,meth) :- 
   Invoke(_,meth,_),
   match(".*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries)[.](align)", meth).
in file main.dl [383:1-386:85])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(15))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(1,1,meth) :- 
   Invoke(_,meth,_),
   match(".*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries)[.](align)", meth).
in file main.dl [383:1-386:85])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(15))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(1)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,0,meth) :- 
   Invoke(_,meth,_),
   match(".*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries)[.](append|compare|update|join|merge)", meth).
in file main.dl [388:1-391:112])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(16))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match(".*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries)[.](append|compare|update|join|merge)", meth).
in file main.dl [388:1-391:112])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(16))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,0,meth) :- 
   Invoke(_,meth,_),
   match(".*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries)[.](r)?(add|sub|mul|div|truediv|floordiv|mod|pow|dot)", meth).
in file main.dl [393:1-395:128])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(17))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,0,meth) :- 
   Invoke(_,meth,_),
   match(".*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries)[.](lt|gt|le|ge|ne|eq)", meth).
in file main.dl [397:1-399:97])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(18))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,0,meth) :- 
   Invoke(_,meth,_),
   match(".*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries|Groupby)[.](combine|combine_first|groupby|expanding|ewm|pct_change|unique|head|last|reindex|reindex_like|sample|take|tail|truncate|filter|reorder_levels|swaplevel|swapaxes|stack|unstack|explode|ravel|repeat|squeeze|asfreq|asof|resample|at_time|between_time|items|iteritems|iterrows|itertuples|lookup|xs|query|melt|pipe|drop|dropna|drop_duplicates|droplevel|duplicated|agg|aggregate)", meth).
in file main.dl [401:1-403:457])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(19))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,0,meth) :- 
   Invoke(_,meth,_),
   match(".*Series[.]str[.](extractall)", meth).
in file main.dl [405:1-407:50])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(20))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match(".*ImageDataGenerator[.](flow|flow_from_dataframe)", meth).
in file main.dl [420:1-422:70])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(21))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,0,meth) :- 
   Invoke(_,meth,_),
   match(".*[.](get_splits)", meth).
in file main.dl [437:1-440:38])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(22))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(1,0,meth) :- 
   Invoke(_,meth,_),
   match(".*[.](get_splits)", meth).
in file main.dl [437:1-440:38])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(22))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(1)),ramBitCast(RamSigned(0)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match(".*[.](random_split)", meth).
in file main.dl [441:1-444:40])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(23))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetDataFlow(1,1,meth) :- 
   Invoke(_,meth,_),
   match(".*[.](random_split)", meth).
in file main.dl [441:1-444:40])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt,rel_ParamToRetDataFlow_4802f16da470059f->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(23))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(1)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetDataFlow_4802f16da470059f->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetDataFlow_4802f16da470059f_op_ctxt));
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_ParamToRetEquivFlow_001aaeddbf783cbc {
public:
 Stratum_ParamToRetEquivFlow_001aaeddbf783cbc(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iii__2_0_1__001__111::Type& rel_ParamToRetEquivFlow_cf4bedb68bbe1170);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_Invoke_d61c77705bff35b0;
t_btree_iii__2_0_1__001__111::Type* rel_ParamToRetEquivFlow_cf4bedb68bbe1170;
std::vector<std::regex> regexes;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_ParamToRetEquivFlow_001aaeddbf783cbc::Stratum_ParamToRetEquivFlow_001aaeddbf783cbc(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iii__2_0_1__001__111::Type& rel_ParamToRetEquivFlow_cf4bedb68bbe1170):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_Invoke_d61c77705bff35b0(&rel_Invoke_d61c77705bff35b0),
rel_ParamToRetEquivFlow_cf4bedb68bbe1170(&rel_ParamToRetEquivFlow_cf4bedb68bbe1170),
regexes({
	std::regex(".*csr_matrix"),
	std::regex(".*[.](astype|copy|view|toarray|tocsr|todense|to_numpy|to_period|to_timestamp|to_list|to_xarray)"),
	std::regex("numpy[.](array|asarray|asanyarray|asmatrix|asfarray|asfortranarray|ascontiguousarray|asarray_chkfinite|require|sort|lexsort|msort|sort_complex|partition)"),
	std::regex("numpy[.](where)"),
	std::regex("numpy[.](sin|cos|tan|arcsin|arccos|arctan|hypot|arctan2|degrees|radians|unwrap|deg2rad|rad2deg|sinh|cosh|tanh|arcsinh|arccosh|arctanh|around|round_|rint|fix|floor|ceil|trunc|cross|exp|expm1|exp2|log|log10|log2|log1p|logaddexp|logaddexp2|i0|sinc|signbit|copysign|frexp|ldexp|nextafter|spacing|lcm|gcd|add|reciprocal|positive|negative|multiply|divide|power|subtract|true_divide|floor_divide|float_power|fmod|mod|modf|remainder|divmod|angle|real|imag|conj|conjugate|maximum|fmax|minimum|fmin|clip|sqrt|cbrt|square|absolute|abs|fabs|sign|heaviside|nan_to_num|real_if_close|interp)"),
	std::regex("numpy[.](hypot|arctan2|cross|nextafter|lcm|gcd|add|multiply|divide|power|subtract|true_divide|floor_divide|float_power|fmod|mod|remainder|divmod|maximum|fmax|minimum|fmin|heaviside)"),
	std::regex(".*(Unknown|Unbound|Any|ndarray)[.](sort|partition|clip|conj|round)"),
	std::regex(".*[.](transform|fit_transform)"),
	std::regex(".*(add_dummy_feature|binarize|maxabs_scale|minmax_scale|normalize|quantile_transform|robust_scale|scale|power_transform)"),
	std::regex("pandas[.](Series|DataFrame|get_dummies|cut|qcut|factorize|isna|isnull|notna|notnull|to_numeric|to_datetime|to_timedelta)"),
	std::regex(".*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries|GroupBy)[.](copy|fillna|replace|map|apply|applymap|convert_dtypes|round|abs|between|clip|cummax|cummin|cumprod|cumsum|diff|factorize|rank|rename|rename_axis|reset_index|set_axis|where|mask|add_prefix|add_suffix|backfill|bfill|ffill|pad|interpolate|sort_values|sort_index|view|shift|tshift|slice_shift|tz_convert|tz_localize|select_dtypes|insert|pop|get|transpose|assign|rolling)"),
	std::regex(".*(Series|DataFrame|FrameOrSeries|GroupBy)[.](transform)"),
	std::regex(".*Series[.]str[.](capitalize|casefold|lower|upper|title|swapcase|cat|center|count|decode|encode|extract|join|len|ljust|lstrip|normalize|pad|partition|removeprefix|removesuffix|repeat|replace|rjust|rpartition|rstrip|slice|slice_replace|split|rsplit|strip|translate|wrap|zfill|get_dummies)"),
	std::regex(".*Series[.]cat[.](rename_categories|reorder_categories|add_categories|remove_categories|remove_unused_categories|set_categories|as_ordered|as_unordered)"),
	std::regex(".*Series[.]sparse[.](from_coo|to_coo)"),
	std::regex(".*(Tokenizer)[.](sequences_to_texts|texts_to_matrix|texts_to_sequences)"),
	std::regex(".*(hashing_trick|one_hot|text_to_word_sequence|pad_sequences)"),
	std::regex(".*(apply_affine_transform|apply_brightness_shift|apply_channel_shift|array_to_img|img_to_array|random_brightness|random_channel_shift|random_rotation|random_shear|random_shift|random_zoom|smart_resize)"),
	std::regex("torch[.](from_numpy)"),
	std::regex(".*(DataLoader)"),
	std::regex("(Tensor|Unknown|Any)[.](bfloat16|bool|byte|char|double|float|half|int|long|short|to)"),
	std::regex(".*(maxabs_scale|minmax_scale|quantile_transform|robust_scale|scale|power_transform)"),
}){
}

void Stratum_ParamToRetEquivFlow_001aaeddbf783cbc::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(ParamToRetEquivFlow(0,2,"patsy.dmatrix").
in file main.dl [230:1-230:44])_");
[&](){
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(2)),ramBitCast(RamSigned(33))}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
();signalHandler->setMsg(R"_(ParamToRetEquivFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match(".*csr_matrix", meth).
in file main.dl [232:1-234:33])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(0))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetEquivFlow(0,0,meth) :- 
   Invoke(_,meth,_),
   match(".*[.](astype|copy|view|toarray|tocsr|todense|to_numpy|to_period|to_timestamp|to_list|to_xarray)", meth).
in file main.dl [236:1-238:116])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(1))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0)),ramBitCast(env0[1])}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetEquivFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match("numpy[.](array|asarray|asanyarray|asmatrix|asfarray|asfortranarray|ascontiguousarray|asarray_chkfinite|require|sort|lexsort|msort|sort_complex|partition)", meth).
in file main.dl [245:1-247:174])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(2))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetEquivFlow(0,2,meth) :- 
   Invoke(_,meth,_),
   match("numpy[.](where)", meth).
in file main.dl [249:1-251:36])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(3))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(2)),ramBitCast(env0[1])}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetEquivFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match("numpy[.](sin|cos|tan|arcsin|arccos|arctan|hypot|arctan2|degrees|radians|unwrap|deg2rad|rad2deg|sinh|cosh|tanh|arcsinh|arccosh|arctanh|around|round_|rint|fix|floor|ceil|trunc|cross|exp|expm1|exp2|log|log10|log2|log1p|logaddexp|logaddexp2|i0|sinc|signbit|copysign|frexp|ldexp|nextafter|spacing|lcm|gcd|add|reciprocal|positive|negative|multiply|divide|power|subtract|true_divide|floor_divide|float_power|fmod|mod|modf|remainder|divmod|angle|real|imag|conj|conjugate|maximum|fmax|minimum|fmin|clip|sqrt|cbrt|square|absolute|abs|fabs|sign|heaviside|nan_to_num|real_if_close|interp)", meth).
in file main.dl [254:1-256:597])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(4))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetEquivFlow(0,2,meth) :- 
   Invoke(_,meth,_),
   match("numpy[.](hypot|arctan2|cross|nextafter|lcm|gcd|add|multiply|divide|power|subtract|true_divide|floor_divide|float_power|fmod|mod|remainder|divmod|maximum|fmax|minimum|fmin|heaviside)", meth).
in file main.dl [258:1-260:202])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(5))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(2)),ramBitCast(env0[1])}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetEquivFlow(1,1,"numpy.frexp").
in file main.dl [262:1-262:42])_");
[&](){
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(1)),ramBitCast(RamSigned(1)),ramBitCast(RamSigned(34))}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
();signalHandler->setMsg(R"_(ParamToRetEquivFlow(1,1,"numpy.modf").
in file main.dl [263:1-263:41])_");
[&](){
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(1)),ramBitCast(RamSigned(1)),ramBitCast(RamSigned(35))}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
();signalHandler->setMsg(R"_(ParamToRetEquivFlow(0,0,meth) :- 
   Invoke(_,meth,_),
   match(".*(Unknown|Unbound|Any|ndarray)[.](sort|partition|clip|conj|round)", meth).
in file main.dl [306:1-308:87])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(6))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0)),ramBitCast(env0[1])}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetEquivFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match(".*[.](transform|fit_transform)", meth).
in file main.dl [318:1-320:51])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(7))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetEquivFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match(".*(add_dummy_feature|binarize|maxabs_scale|minmax_scale|normalize|quantile_transform|robust_scale|scale|power_transform)", meth).
in file main.dl [325:1-327:141])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(8))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetEquivFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match("pandas[.](Series|DataFrame|get_dummies|cut|qcut|factorize|isna|isnull|notna|notnull|to_numeric|to_datetime|to_timedelta)", meth).
in file main.dl [339:1-341:141])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(9))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetEquivFlow(0,0,meth) :- 
   Invoke(_,meth,_),
   match(".*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries|GroupBy)[.](copy|fillna|replace|map|apply|applymap|convert_dtypes|round|abs|between|clip|cummax|cummin|cumprod|cumsum|diff|factorize|rank|rename|rename_axis|reset_index|set_axis|where|mask|add_prefix|add_suffix|backfill|bfill|ffill|pad|interpolate|sort_values|sort_index|view|shift|tshift|slice_shift|tz_convert|tz_localize|select_dtypes|insert|pop|get|transpose|assign|rolling)", meth).
in file main.dl [343:1-345:453])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(10))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0)),ramBitCast(env0[1])}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetEquivFlow(0,0,meth) :- 
   Invoke(_,meth,_),
   match(".*(Series|DataFrame|FrameOrSeries|GroupBy)[.](transform)", meth).
in file main.dl [347:1-349:77])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(11))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0)),ramBitCast(env0[1])}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetEquivFlow(0,0,meth) :- 
   Invoke(_,meth,_),
   match(".*Series[.]str[.](capitalize|casefold|lower|upper|title|swapcase|cat|center|count|decode|encode|extract|join|len|ljust|lstrip|normalize|pad|partition|removeprefix|removesuffix|repeat|replace|rjust|rpartition|rstrip|slice|slice_replace|split|rsplit|strip|translate|wrap|zfill|get_dummies)", meth).
in file main.dl [351:1-353:308])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(12))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0)),ramBitCast(env0[1])}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetEquivFlow(0,1,"pandas.Series.str.cat").
in file main.dl [354:1-354:52])_");
[&](){
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(RamSigned(36))}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
();signalHandler->setMsg(R"_(ParamToRetEquivFlow(0,0,meth) :- 
   Invoke(_,meth,_),
   match(".*Series[.]cat[.](rename_categories|reorder_categories|add_categories|remove_categories|remove_unused_categories|set_categories|as_ordered|as_unordered)", meth).
in file main.dl [355:1-357:173])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(13))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0)),ramBitCast(env0[1])}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetEquivFlow(0,0,meth) :- 
   Invoke(_,meth,_),
   match(".*Series[.]sparse[.](from_coo|to_coo)", meth).
in file main.dl [358:1-360:58])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(14))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0)),ramBitCast(env0[1])}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetEquivFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match(".*(Tokenizer)[.](sequences_to_texts|texts_to_matrix|texts_to_sequences)", meth).
in file main.dl [411:1-413:92])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(15))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetEquivFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match(".*(hashing_trick|one_hot|text_to_word_sequence|pad_sequences)", meth).
in file main.dl [414:1-416:82])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(16))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetEquivFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match(".*(apply_affine_transform|apply_brightness_shift|apply_channel_shift|array_to_img|img_to_array|random_brightness|random_channel_shift|random_rotation|random_shear|random_shift|random_zoom|smart_resize)", meth).
in file main.dl [417:1-419:222])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(17))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetEquivFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match("torch[.](from_numpy)", meth).
in file main.dl [427:1-429:41])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(18))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetEquivFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match(".*(DataLoader)", meth).
in file main.dl [430:1-432:35])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(19))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetEquivFlow(0,0,meth) :- 
   Invoke(_,meth,_),
   match("(Tensor|Unknown|Any)[.](bfloat16|bool|byte|char|double|float|half|int|long|short|to)", meth).
in file main.dl [433:1-435:105])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(20))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0)),ramBitCast(env0[1])}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetEquivFlow(0,1,meth) :- 
   Invoke(_,meth,_),
   match(".*(maxabs_scale|minmax_scale|quantile_transform|robust_scale|scale|power_transform)", meth).
in file main.dl [479:1-481:104])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt,rel_ParamToRetEquivFlow_cf4bedb68bbe1170->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(21))) {
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1])}};
rel_ParamToRetEquivFlow_cf4bedb68bbe1170->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetEquivFlow_cf4bedb68bbe1170_op_ctxt));
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_ParamToRetTaintSourceMethod_a231dab6de744f6e {
public:
 Stratum_ParamToRetTaintSourceMethod_a231dab6de744f6e(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iiii__2_0_1_3__1111__0010::Type& rel_ParamToRetTaintSourceMethod_54896442c7cf3fde);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_Invoke_d61c77705bff35b0;
t_btree_iiii__2_0_1_3__1111__0010::Type* rel_ParamToRetTaintSourceMethod_54896442c7cf3fde;
std::vector<std::regex> regexes;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_ParamToRetTaintSourceMethod_a231dab6de744f6e::Stratum_ParamToRetTaintSourceMethod_a231dab6de744f6e(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iiii__2_0_1_3__1111__0010::Type& rel_ParamToRetTaintSourceMethod_54896442c7cf3fde):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_Invoke_d61c77705bff35b0(&rel_Invoke_d61c77705bff35b0),
rel_ParamToRetTaintSourceMethod_54896442c7cf3fde(&rel_ParamToRetTaintSourceMethod_54896442c7cf3fde),
regexes({
	std::regex("numpy[.](ptp|percentile|nanpercentile|quantile|nanquantile|median|average|mean|std|var|nanmedian|nanmean|nanstd|nanvar|corrcoef|correlate|cov|histogram|histogram2d|histogramdd|bincount|histogram_bin_edges|digitize|amax|max|nanmax|amin|min|nanmin|count_nonzero|trace)"),
	std::regex("numpy[.]linalg[.](eig|eigh|eigvals|eigvalsh|norm|cond|det|matrix_rank|slogdet)"),
	std::regex(".*(Unknown|Unbound|Any|ndarray)[.](max|min|ptp|trace|sum|cumsum|mean|var|std|prod|cumprod)"),
	std::regex(".*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries)[.](groupby|autocorr|corr|count|cov|mode|mean|median|max|min|nlargest|nsmallest|std|skew|var|sum|prod|describe|agg|aggregate|cummax|cummin|cumprod|cumsum|idxmax|idxmin|diff|pct_change|quantile|rank|sem|kurtosis|unique|nunique|backfill|bfill|ffill|pad|interpolate)"),
	std::regex("(KBinsDiscretizer|PowerTransformer|QuantileTransformer|MaxAbsScaler|StandardScaler|MinMaxScaler|RobustScaler)[.]fit_transform"),
	std::regex("(KBinsDiscretizer|PowerTransformer|QuantileTransformer|MaxAbsScaler|StandardScaler|MinMaxScaler|RobustScaler)[.]fit"),
	std::regex("(Imputer|SimpleImputer|IterativeImputer|KNNImputer)[.]fit_transform"),
	std::regex("(Imputer|SimpleImputer|IterativeImputer|KNNImputer)[.]fit"),
	std::regex("(GenericUnivariateSelect|SelectPercentile|SelectKBest|SelectFpr|SelectFdr|SelectFromModel|SelectFwe|SequentialFeatureSelector|RFE|RFECV|VarianceThreshold)[.]fit_transform"),
	std::regex("(GenericUnivariateSelect|SelectPercentile|SelectKBest|SelectFpr|SelectFdr|SelectFromModel|SelectFwe|SequentialFeatureSelector|RFE|RFECV|VarianceThreshold)[.]fit"),
	std::regex("(AffinityPropagation|AgglomerativeClustering|Birch|DBSCAN|FeatureAgglomeration|KMeans|MiniBatchKMeans|MeanShift|OPTICS|SpectralClustering|SpectralBiclustering|SpectralCoclustering)[.](fit|fit_predict)"),
	std::regex("(CountVectorizer|HashingVectorizer|TfidfTransformer|TfidfVectorizer|PCA)[.]fit_transform"),
	std::regex("(CountVectorizer|HashingVectorizer|TfidfTransformer|TfidfVectorizer|PCA)[.]fit"),
	std::regex("(RandomOverSampler|SMOTE|SMOTENC|SMOTEN|ADASYN|BorderlineSMOTE|KMeansSMOTE|SVMSMOTE|SMOTEENN|SMOTETomek)[.](fit_resample|fit_sample)"),
	std::regex(".*ImageDataGenerator[.](flow|flow_from_dataframe)"),
	std::regex(".*Tokenizer[.]fit_on_(sequences|texts)"),
}){
}

void Stratum_ParamToRetTaintSourceMethod_a231dab6de744f6e::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(ParamToRetTaintSourceMethod(0,1,meth,"rowset") :- 
   Invoke(_,meth,_),
   match("numpy[.](ptp|percentile|nanpercentile|quantile|nanquantile|median|average|mean|std|var|nanmedian|nanmean|nanstd|nanvar|corrcoef|correlate|cov|histogram|histogram2d|histogramdd|bincount|histogram_bin_edges|digitize|amax|max|nanmax|amin|min|nanmin|count_nonzero|trace)", meth).
in file main.dl [458:1-460:287])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt,rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(0))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(30))}};
rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetTaintSourceMethod(0,1,meth,"rowset") :- 
   Invoke(_,meth,_),
   match("numpy[.]linalg[.](eig|eigh|eigvals|eigvalsh|norm|cond|det|matrix_rank|slogdet)", meth).
in file main.dl [461:1-463:99])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt,rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(1))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(30))}};
rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetTaintSourceMethod(0,1,meth,"rowset") :- 
   Invoke(_,meth,_),
   match(".*(Unknown|Unbound|Any|ndarray)[.](max|min|ptp|trace|sum|cumsum|mean|var|std|prod|cumprod)", meth).
in file main.dl [464:1-466:111])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt,rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(2))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(30))}};
rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetTaintSourceMethod(0,1,"pandas.cut","rowset").
in file main.dl [470:1-470:59])_");
[&](){
CREATE_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt,rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->createContext());
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(RamSigned(37)),ramBitCast(RamSigned(30))}};
rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt));
}
();signalHandler->setMsg(R"_(ParamToRetTaintSourceMethod(0,1,"pandas.qcut","rowset").
in file main.dl [471:1-471:60])_");
[&](){
CREATE_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt,rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->createContext());
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(RamSigned(38)),ramBitCast(RamSigned(30))}};
rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt));
}
();signalHandler->setMsg(R"_(ParamToRetTaintSourceMethod(0,0,meth,"rowset") :- 
   Invoke(_,meth,_),
   match(".*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries)[.](groupby|autocorr|corr|count|cov|mode|mean|median|max|min|nlargest|nsmallest|std|skew|var|sum|prod|describe|agg|aggregate|cummax|cummin|cumprod|cumsum|idxmax|idxmin|diff|pct_change|quantile|rank|sem|kurtosis|unique|nunique|backfill|bfill|ffill|pad|interpolate)", meth).
in file main.dl [472:1-474:338])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt,rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(3))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0)),ramBitCast(env0[1]),ramBitCast(RamSigned(30))}};
rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetTaintSourceMethod(0,0,".*[.]DataFrame.groupby","rowset").
in file main.dl [475:1-475:71])_");
[&](){
CREATE_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt,rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->createContext());
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(0)),ramBitCast(RamSigned(39)),ramBitCast(RamSigned(30))}};
rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt));
}
();signalHandler->setMsg(R"_(ParamToRetTaintSourceMethod(0,1,"sklearn.preprocessing.scale","rowset").
in file main.dl [476:1-476:76])_");
[&](){
CREATE_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt,rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->createContext());
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(RamSigned(40)),ramBitCast(RamSigned(30))}};
rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt));
}
();signalHandler->setMsg(R"_(ParamToRetTaintSourceMethod(0,1,meth,"rowset") :- 
   Invoke(_,meth,_),
   match("(KBinsDiscretizer|PowerTransformer|QuantileTransformer|MaxAbsScaler|StandardScaler|MinMaxScaler|RobustScaler)[.]fit_transform", meth).
in file main.dl [484:1-487:146])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt,rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(4))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(30))}};
rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetTaintSourceMethod(0,1,meth,"rowset") :- 
   Invoke(_,meth,_),
   match("(KBinsDiscretizer|PowerTransformer|QuantileTransformer|MaxAbsScaler|StandardScaler|MinMaxScaler|RobustScaler)[.]fit", meth).
in file main.dl [489:1-492:136])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt,rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(5))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(30))}};
rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetTaintSourceMethod(0,1,meth,"rowset") :- 
   Invoke(_,meth,_),
   match("(Imputer|SimpleImputer|IterativeImputer|KNNImputer)[.]fit_transform", meth).
in file main.dl [495:1-498:88])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt,rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(6))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(30))}};
rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetTaintSourceMethod(0,1,meth,"rowset") :- 
   Invoke(_,meth,_),
   match("(Imputer|SimpleImputer|IterativeImputer|KNNImputer)[.]fit", meth).
in file main.dl [500:1-503:78])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt,rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(7))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(30))}};
rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetTaintSourceMethod(0,1,meth,"rowset") :- 
   Invoke(_,meth,_),
   match("(GenericUnivariateSelect|SelectPercentile|SelectKBest|SelectFpr|SelectFdr|SelectFromModel|SelectFwe|SequentialFeatureSelector|RFE|RFECV|VarianceThreshold)[.]fit_transform", meth).
in file main.dl [506:1-509:191])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt,rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(8))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(30))}};
rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetTaintSourceMethod(0,1,meth,"rowset") :- 
   Invoke(_,meth,_),
   match("(GenericUnivariateSelect|SelectPercentile|SelectKBest|SelectFpr|SelectFdr|SelectFromModel|SelectFwe|SequentialFeatureSelector|RFE|RFECV|VarianceThreshold)[.]fit", meth).
in file main.dl [511:1-514:181])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt,rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(9))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(30))}};
rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetTaintSourceMethod(0,1,meth,"rowset") :- 
   Invoke(_,meth,_),
   match("(AffinityPropagation|AgglomerativeClustering|Birch|DBSCAN|FeatureAgglomeration|KMeans|MiniBatchKMeans|MeanShift|OPTICS|SpectralClustering|SpectralBiclustering|SpectralCoclustering)[.](fit|fit_predict)", meth).
in file main.dl [517:1-520:221])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt,rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(10))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(30))}};
rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetTaintSourceMethod(0,1,meth,"rowset") :- 
   Invoke(_,meth,_),
   match("(CountVectorizer|HashingVectorizer|TfidfTransformer|TfidfVectorizer|PCA)[.]fit_transform", meth).
in file main.dl [523:1-526:109])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt,rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(11))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(30))}};
rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetTaintSourceMethod(0,1,meth,"rowset") :- 
   Invoke(_,meth,_),
   match("(CountVectorizer|HashingVectorizer|TfidfTransformer|TfidfVectorizer|PCA)[.]fit", meth).
in file main.dl [528:1-531:99])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt,rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(12))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(30))}};
rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetTaintSourceMethod(0,1,meth,"dup") :- 
   Invoke(_,meth,_),
   match("(RandomOverSampler|SMOTE|SMOTENC|SMOTEN|ADASYN|BorderlineSMOTE|KMeansSMOTE|SVMSMOTE|SMOTEENN|SMOTETomek)[.](fit_resample|fit_sample)", meth).
in file main.dl [542:1-544:153])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt,rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(13))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(2))}};
rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetTaintSourceMethod(0,1,meth,"dup") :- 
   Invoke(_,meth,_),
   match(".*ImageDataGenerator[.](flow|flow_from_dataframe)", meth).
in file main.dl [547:1-549:70])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt,rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(14))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(2))}};
rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ParamToRetTaintSourceMethod(0,1,meth,"rowset") :- 
   Invoke(_,meth,_),
   match(".*Tokenizer[.]fit_on_(sequences|texts)", meth).
in file main.dl [551:1-554:59])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt,rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(15))) {
Tuple<RamDomain,4> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1)),ramBitCast(env0[1]),ramBitCast(RamSigned(30))}};
rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->insert(tuple,READ_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt));
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_PreProcessingLeak_be24f9862f2fdea0 {
public:
 Stratum_PreProcessingLeak_be24f9862f2fdea0(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_DataOverlap_5a4300eece6cb523,t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type& rel_FlowFromExtended_7fd58681b534e204,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPair_a5a4124c4969f589,t_btree_iiii__0_1_2_3__1111::Type& rel_PreProcessingLeak_3d7ccc563a957981,t_btree_iiii__0_1_2_3__1111::Type& rel_ReduceEdge_70a6ab3f2a478ff1,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__0_1_2_3__1111::Type* rel_DataOverlap_5a4300eece6cb523;
t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type* rel_FlowFromExtended_7fd58681b534e204;
t_btree_iiii__0_1_2_3__1111::Type* rel_ModelPair_a5a4124c4969f589;
t_btree_iiii__0_1_2_3__1111::Type* rel_PreProcessingLeak_3d7ccc563a957981;
t_btree_iiii__0_1_2_3__1111::Type* rel_ReduceEdge_70a6ab3f2a478ff1;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_TrainingDataWithModel_bf0078ce702b39b8;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_ValOrTestDataWithModel_2810ba231c0c185a;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_PreProcessingLeak_be24f9862f2fdea0::Stratum_PreProcessingLeak_be24f9862f2fdea0(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_DataOverlap_5a4300eece6cb523,t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type& rel_FlowFromExtended_7fd58681b534e204,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPair_a5a4124c4969f589,t_btree_iiii__0_1_2_3__1111::Type& rel_PreProcessingLeak_3d7ccc563a957981,t_btree_iiii__0_1_2_3__1111::Type& rel_ReduceEdge_70a6ab3f2a478ff1,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_DataOverlap_5a4300eece6cb523(&rel_DataOverlap_5a4300eece6cb523),
rel_FlowFromExtended_7fd58681b534e204(&rel_FlowFromExtended_7fd58681b534e204),
rel_ModelPair_a5a4124c4969f589(&rel_ModelPair_a5a4124c4969f589),
rel_PreProcessingLeak_3d7ccc563a957981(&rel_PreProcessingLeak_3d7ccc563a957981),
rel_ReduceEdge_70a6ab3f2a478ff1(&rel_ReduceEdge_70a6ab3f2a478ff1),
rel_TrainingDataWithModel_bf0078ce702b39b8(&rel_TrainingDataWithModel_bf0078ce702b39b8),
rel_ValOrTestDataWithModel_2810ba231c0c185a(&rel_ValOrTestDataWithModel_2810ba231c0c185a){
}

void Stratum_PreProcessingLeak_be24f9862f2fdea0::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(PreProcessingLeak(src,invo,meth,ctx2) :- 
   TrainingDataWithModel(trainModel,train,invo,meth,ctx2),
   ValOrTestDataWithModel(testModel,test,_,_,ctx1),
   ModelPair(testModel,ctx1,trainModel,ctx2),
   !DataOverlap(test,ctx1,train,ctx2),
   ReduceEdge(reduced_from_src,r_ctx,src,src_ctx),
   FlowFromExtended(train,ctx2,reduced_from_src,r_ctx,_),
   DataOverlap(test,ctx1,src,src_ctx).
in file main.dl [1324:1-1332:43])_");
if(!(rel_ValOrTestDataWithModel_2810ba231c0c185a->empty()) && !(rel_DataOverlap_5a4300eece6cb523->empty()) && !(rel_ModelPair_a5a4124c4969f589->empty()) && !(rel_ReduceEdge_70a6ab3f2a478ff1->empty()) && !(rel_TrainingDataWithModel_bf0078ce702b39b8->empty()) && !(rel_FlowFromExtended_7fd58681b534e204->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt,rel_DataOverlap_5a4300eece6cb523->createContext());
CREATE_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt,rel_FlowFromExtended_7fd58681b534e204->createContext());
CREATE_OP_CONTEXT(rel_ModelPair_a5a4124c4969f589_op_ctxt,rel_ModelPair_a5a4124c4969f589->createContext());
CREATE_OP_CONTEXT(rel_PreProcessingLeak_3d7ccc563a957981_op_ctxt,rel_PreProcessingLeak_3d7ccc563a957981->createContext());
CREATE_OP_CONTEXT(rel_ReduceEdge_70a6ab3f2a478ff1_op_ctxt,rel_ReduceEdge_70a6ab3f2a478ff1->createContext());
CREATE_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt,rel_TrainingDataWithModel_bf0078ce702b39b8->createContext());
CREATE_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt,rel_ValOrTestDataWithModel_2810ba231c0c185a->createContext());
for(const auto& env0 : *rel_TrainingDataWithModel_bf0078ce702b39b8) {
for(const auto& env1 : *rel_ValOrTestDataWithModel_2810ba231c0c185a) {
if( rel_ModelPair_a5a4124c4969f589->contains(Tuple<RamDomain,4>{{ramBitCast(env1[0]),ramBitCast(env1[4]),ramBitCast(env0[0]),ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_ModelPair_a5a4124c4969f589_op_ctxt)) && !(rel_DataOverlap_5a4300eece6cb523->contains(Tuple<RamDomain,4>{{ramBitCast(env1[1]),ramBitCast(env1[4]),ramBitCast(env0[1]),ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt)))) {
for(const auto& env2 : *rel_ReduceEdge_70a6ab3f2a478ff1) {
if( !rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_11110(Tuple<RamDomain,5>{{ramBitCast(env0[1]), ramBitCast(env0[4]), ramBitCast(env2[0]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env0[1]), ramBitCast(env0[4]), ramBitCast(env2[0]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt)).empty() && rel_DataOverlap_5a4300eece6cb523->contains(Tuple<RamDomain,4>{{ramBitCast(env1[1]),ramBitCast(env1[4]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env2[2]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_PreProcessingLeak_3d7ccc563a957981->insert(tuple,READ_OP_CONTEXT(rel_PreProcessingLeak_3d7ccc563a957981_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(PreProcessingLeak(src,invo,meth,ctx2) :- 
   TrainingDataWithModel(trainModel,train,invo,meth,ctx2),
   ValOrTestDataWithModel(testModel,test,_,_,ctx1),
   ModelPair(testModel,ctx1,trainModel,ctx2),
   !DataOverlap(test,ctx1,train,ctx2),
   ReduceEdge(reduced_from_src,r_ctx,src,src_ctx),
   FlowFromExtended(test,ctx1,reduced_from_src,r_ctx,_),
   DataOverlap(test,ctx1,src,src_ctx).
in file main.dl [1324:1-1332:43])_");
if(!(rel_ValOrTestDataWithModel_2810ba231c0c185a->empty()) && !(rel_DataOverlap_5a4300eece6cb523->empty()) && !(rel_ModelPair_a5a4124c4969f589->empty()) && !(rel_ReduceEdge_70a6ab3f2a478ff1->empty()) && !(rel_TrainingDataWithModel_bf0078ce702b39b8->empty()) && !(rel_FlowFromExtended_7fd58681b534e204->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt,rel_DataOverlap_5a4300eece6cb523->createContext());
CREATE_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt,rel_FlowFromExtended_7fd58681b534e204->createContext());
CREATE_OP_CONTEXT(rel_ModelPair_a5a4124c4969f589_op_ctxt,rel_ModelPair_a5a4124c4969f589->createContext());
CREATE_OP_CONTEXT(rel_PreProcessingLeak_3d7ccc563a957981_op_ctxt,rel_PreProcessingLeak_3d7ccc563a957981->createContext());
CREATE_OP_CONTEXT(rel_ReduceEdge_70a6ab3f2a478ff1_op_ctxt,rel_ReduceEdge_70a6ab3f2a478ff1->createContext());
CREATE_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt,rel_TrainingDataWithModel_bf0078ce702b39b8->createContext());
CREATE_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt,rel_ValOrTestDataWithModel_2810ba231c0c185a->createContext());
for(const auto& env0 : *rel_TrainingDataWithModel_bf0078ce702b39b8) {
for(const auto& env1 : *rel_ValOrTestDataWithModel_2810ba231c0c185a) {
if( rel_ModelPair_a5a4124c4969f589->contains(Tuple<RamDomain,4>{{ramBitCast(env1[0]),ramBitCast(env1[4]),ramBitCast(env0[0]),ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_ModelPair_a5a4124c4969f589_op_ctxt)) && !(rel_DataOverlap_5a4300eece6cb523->contains(Tuple<RamDomain,4>{{ramBitCast(env1[1]),ramBitCast(env1[4]),ramBitCast(env0[1]),ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt)))) {
for(const auto& env2 : *rel_ReduceEdge_70a6ab3f2a478ff1) {
if( !rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_11110(Tuple<RamDomain,5>{{ramBitCast(env1[1]), ramBitCast(env1[4]), ramBitCast(env2[0]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env1[1]), ramBitCast(env1[4]), ramBitCast(env2[0]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt)).empty() && rel_DataOverlap_5a4300eece6cb523->contains(Tuple<RamDomain,4>{{ramBitCast(env1[1]),ramBitCast(env1[4]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt))) {
Tuple<RamDomain,4> tuple{{ramBitCast(env2[2]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_PreProcessingLeak_3d7ccc563a957981->insert(tuple,READ_OP_CONTEXT(rel_PreProcessingLeak_3d7ccc563a957981_op_ctxt));
}
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","var\tinvo\tmeth\tctx"},{"auxArity","0"},{"name","PreProcessingLeak"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"var\", \"invo\", \"meth\", \"ctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_PreProcessingLeak_3d7ccc563a957981);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_PureMethod_0532b29c40eb21b8 {
public:
 Stratum_PureMethod_0532b29c40eb21b8(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_i__0__1::Type& rel_PureMethod_ac3eca18d3064a10);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_i__0__1::Type* rel_PureMethod_ac3eca18d3064a10;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_PureMethod_0532b29c40eb21b8::Stratum_PureMethod_0532b29c40eb21b8(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_i__0__1::Type& rel_PureMethod_ac3eca18d3064a10):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_PureMethod_ac3eca18d3064a10(&rel_PureMethod_ac3eca18d3064a10){
}

void Stratum_PureMethod_0532b29c40eb21b8::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(PureMethod("len").
in file main.dl [104:1-105:18])_");
[&](){
CREATE_OP_CONTEXT(rel_PureMethod_ac3eca18d3064a10_op_ctxt,rel_PureMethod_ac3eca18d3064a10->createContext());
Tuple<RamDomain,1> tuple{{ramBitCast(RamSigned(41))}};
rel_PureMethod_ac3eca18d3064a10->insert(tuple,READ_OP_CONTEXT(rel_PureMethod_ac3eca18d3064a10_op_ctxt));
}
();}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_Reachable_aa5a75ede6acb41c {
public:
 Stratum_Reachable_aa5a75ede6acb41c(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__0_1__11__10::Type& rel_delta_Reachable_f8722fb0e233b409,t_btree_ii__0_1__11__10::Type& rel_new_Reachable_0bd56444429534ad,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_ii__0_1__11__10::Type& rel_Reachable_60cce6ab70e369f7);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_ii__0_1__11__10::Type* rel_delta_Reachable_f8722fb0e233b409;
t_btree_ii__0_1__11__10::Type* rel_new_Reachable_0bd56444429534ad;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_Invoke_d61c77705bff35b0;
t_btree_ii__0_1__11__10::Type* rel_Reachable_60cce6ab70e369f7;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_Reachable_aa5a75ede6acb41c::Stratum_Reachable_aa5a75ede6acb41c(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__0_1__11__10::Type& rel_delta_Reachable_f8722fb0e233b409,t_btree_ii__0_1__11__10::Type& rel_new_Reachable_0bd56444429534ad,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_ii__0_1__11__10::Type& rel_Reachable_60cce6ab70e369f7):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_delta_Reachable_f8722fb0e233b409(&rel_delta_Reachable_f8722fb0e233b409),
rel_new_Reachable_0bd56444429534ad(&rel_new_Reachable_0bd56444429534ad),
rel_Invoke_d61c77705bff35b0(&rel_Invoke_d61c77705bff35b0),
rel_Reachable_60cce6ab70e369f7(&rel_Reachable_60cce6ab70e369f7){
}

void Stratum_Reachable_aa5a75ede6acb41c::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(Reachable("",["",""]).
in file main.dl [668:1-668:25])_");
[&](){
CREATE_OP_CONTEXT(rel_Reachable_60cce6ab70e369f7_op_ctxt,rel_Reachable_60cce6ab70e369f7->createContext());
Tuple<RamDomain,2> tuple{{ramBitCast(RamSigned(42)),ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(RamSigned(42))),ramBitCast(ramBitCast(RamSigned(42)))}}
))}};
rel_Reachable_60cce6ab70e369f7->insert(tuple,READ_OP_CONTEXT(rel_Reachable_60cce6ab70e369f7_op_ctxt));
}
();[&](){
CREATE_OP_CONTEXT(rel_delta_Reachable_f8722fb0e233b409_op_ctxt,rel_delta_Reachable_f8722fb0e233b409->createContext());
CREATE_OP_CONTEXT(rel_Reachable_60cce6ab70e369f7_op_ctxt,rel_Reachable_60cce6ab70e369f7->createContext());
for(const auto& env0 : *rel_Reachable_60cce6ab70e369f7) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_delta_Reachable_f8722fb0e233b409->insert(tuple,READ_OP_CONTEXT(rel_delta_Reachable_f8722fb0e233b409_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(Reachable(toMeth,[invo2,invo]) :- 
   Invoke(invo,toMeth,inMeth),
   Reachable(inMeth,[invo1,invo2]).
in file main.dl [661:1-666:31])_");
if(!(rel_Invoke_d61c77705bff35b0->empty()) && !(rel_delta_Reachable_f8722fb0e233b409->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_Reachable_f8722fb0e233b409_op_ctxt,rel_delta_Reachable_f8722fb0e233b409->createContext());
CREATE_OP_CONTEXT(rel_new_Reachable_0bd56444429534ad_op_ctxt,rel_new_Reachable_0bd56444429534ad->createContext());
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_Reachable_60cce6ab70e369f7_op_ctxt,rel_Reachable_60cce6ab70e369f7->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
auto range = rel_delta_Reachable_f8722fb0e233b409->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_Reachable_f8722fb0e233b409_op_ctxt));
for(const auto& env1 : range) {
RamDomain const ref = env1[1];
if (ref == 0) continue;
const RamDomain *env2 = recordTable.unpack(ref,2);
{
if( !(rel_Reachable_60cce6ab70e369f7->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(env2[1])),ramBitCast(ramBitCast(env0[0]))}}
))}},READ_OP_CONTEXT(rel_Reachable_60cce6ab70e369f7_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(pack(recordTable,Tuple<RamDomain,2>{{ramBitCast(ramBitCast(env2[1])),ramBitCast(ramBitCast(env0[0]))}}
))}};
rel_new_Reachable_0bd56444429534ad->insert(tuple,READ_OP_CONTEXT(rel_new_Reachable_0bd56444429534ad_op_ctxt));
}
}
}
}
}
();}
if(rel_new_Reachable_0bd56444429534ad->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_new_Reachable_0bd56444429534ad_op_ctxt,rel_new_Reachable_0bd56444429534ad->createContext());
CREATE_OP_CONTEXT(rel_Reachable_60cce6ab70e369f7_op_ctxt,rel_Reachable_60cce6ab70e369f7->createContext());
for(const auto& env0 : *rel_new_Reachable_0bd56444429534ad) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_Reachable_60cce6ab70e369f7->insert(tuple,READ_OP_CONTEXT(rel_Reachable_60cce6ab70e369f7_op_ctxt));
}
}
();std::swap(rel_delta_Reachable_f8722fb0e233b409, rel_new_Reachable_0bd56444429534ad);
rel_new_Reachable_0bd56444429534ad->purge();
iter++;
}
iter = 0;
rel_delta_Reachable_f8722fb0e233b409->purge();
rel_new_Reachable_0bd56444429534ad->purge();
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_ReduceEdge_f1a7dd9509d9f03b {
public:
 Stratum_ReduceEdge_f1a7dd9509d9f03b(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_ReduceEdge_70a6ab3f2a478ff1,t_btree_iiiiiii__6_0_1_2_3_4_5__1111111__0000001::Type& rel_TaintStartsTarget_b45151d0d1a25a24);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__0_1_2_3__1111::Type* rel_ReduceEdge_70a6ab3f2a478ff1;
t_btree_iiiiiii__6_0_1_2_3_4_5__1111111__0000001::Type* rel_TaintStartsTarget_b45151d0d1a25a24;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_ReduceEdge_f1a7dd9509d9f03b::Stratum_ReduceEdge_f1a7dd9509d9f03b(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_ReduceEdge_70a6ab3f2a478ff1,t_btree_iiiiiii__6_0_1_2_3_4_5__1111111__0000001::Type& rel_TaintStartsTarget_b45151d0d1a25a24):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_ReduceEdge_70a6ab3f2a478ff1(&rel_ReduceEdge_70a6ab3f2a478ff1),
rel_TaintStartsTarget_b45151d0d1a25a24(&rel_TaintStartsTarget_b45151d0d1a25a24){
}

void Stratum_ReduceEdge_f1a7dd9509d9f03b::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(ReduceEdge(to,toCtx,from,fromCtx) :- 
   TaintStartsTarget(to,toCtx,from,fromCtx,_,_,"rowset").
in file main.dl [1321:1-1322:65])_");
if(!(rel_TaintStartsTarget_b45151d0d1a25a24->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ReduceEdge_70a6ab3f2a478ff1_op_ctxt,rel_ReduceEdge_70a6ab3f2a478ff1->createContext());
CREATE_OP_CONTEXT(rel_TaintStartsTarget_b45151d0d1a25a24_op_ctxt,rel_TaintStartsTarget_b45151d0d1a25a24->createContext());
auto range = rel_TaintStartsTarget_b45151d0d1a25a24->lowerUpperRange_0000001(Tuple<RamDomain,7>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(RamSigned(30))}},Tuple<RamDomain,7>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(RamSigned(30))}},READ_OP_CONTEXT(rel_TaintStartsTarget_b45151d0d1a25a24_op_ctxt));
for(const auto& env0 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3])}};
rel_ReduceEdge_70a6ab3f2a478ff1->insert(tuple,READ_OP_CONTEXT(rel_ReduceEdge_70a6ab3f2a478ff1_op_ctxt));
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_RetTaintSourceMethod_d4c95fce5f03ce4f {
public:
 Stratum_RetTaintSourceMethod_d4c95fce5f03ce4f(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1_0_2__010__111::Type& rel_RetTaintSourceMethod_b3e3f5b46f4b2c24);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__1_0_2__010__111::Type* rel_RetTaintSourceMethod_b3e3f5b46f4b2c24;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_RetTaintSourceMethod_d4c95fce5f03ce4f::Stratum_RetTaintSourceMethod_d4c95fce5f03ce4f(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1_0_2__010__111::Type& rel_RetTaintSourceMethod_b3e3f5b46f4b2c24):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_RetTaintSourceMethod_b3e3f5b46f4b2c24(&rel_RetTaintSourceMethod_b3e3f5b46f4b2c24){
}

void Stratum_RetTaintSourceMethod_d4c95fce5f03ce4f::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(RetTaintSourceMethod(0,"sklearn.preprocessing.Imputer","pipeline").
in file main.dl [534:1-534:70])_");
[&](){
CREATE_OP_CONTEXT(rel_RetTaintSourceMethod_b3e3f5b46f4b2c24_op_ctxt,rel_RetTaintSourceMethod_b3e3f5b46f4b2c24->createContext());
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(43)),ramBitCast(RamSigned(44))}};
rel_RetTaintSourceMethod_b3e3f5b46f4b2c24->insert(tuple,READ_OP_CONTEXT(rel_RetTaintSourceMethod_b3e3f5b46f4b2c24_op_ctxt));
}
();signalHandler->setMsg(R"_(RetTaintSourceMethod(0,"sklearn.preprocessing.MinMaxScaler","pipeline").
in file main.dl [535:1-535:75])_");
[&](){
CREATE_OP_CONTEXT(rel_RetTaintSourceMethod_b3e3f5b46f4b2c24_op_ctxt,rel_RetTaintSourceMethod_b3e3f5b46f4b2c24->createContext());
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(0)),ramBitCast(RamSigned(45)),ramBitCast(RamSigned(44))}};
rel_RetTaintSourceMethod_b3e3f5b46f4b2c24->insert(tuple,READ_OP_CONTEXT(rel_RetTaintSourceMethod_b3e3f5b46f4b2c24_op_ctxt));
}
();}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_ScoredData_ae748f7cf0ed193c {
public:
 Stratum_ScoredData_ae748f7cf0ed193c(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iii__0_1_2__100__111::Type& rel_ScoredData_e3b4e0bebca3bce4);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_Invoke_d61c77705bff35b0;
t_btree_iii__0_1_2__100__111::Type* rel_ScoredData_e3b4e0bebca3bce4;
std::vector<std::regex> regexes;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_ScoredData_ae748f7cf0ed193c::Stratum_ScoredData_ae748f7cf0ed193c(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iii__0_1_2__100__111::Type& rel_ScoredData_e3b4e0bebca3bce4):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_Invoke_d61c77705bff35b0(&rel_Invoke_d61c77705bff35b0),
rel_ScoredData_e3b4e0bebca3bce4(&rel_ScoredData_e3b4e0bebca3bce4),
regexes({
	std::regex(".*[.](score|evaluate|auc|calinski_harabasz_score|davies_bouldin_score|silhouette_score|silhouette_samples)"),
	std::regex(".*[.](plot_confusion_matrix|plot_det_curve|plot_precision_recall_curve|plot_roc_curve)"),
}){
}

void Stratum_ScoredData_ae748f7cf0ed193c::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(ScoredData(meth,0,1) :- 
   Invoke(_,meth,_),
   match(".*[.](score|evaluate|auc|calinski_harabasz_score|davies_bouldin_score|silhouette_score|silhouette_samples)", meth).
in file main.dl [586:1-588:127])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ScoredData_e3b4e0bebca3bce4_op_ctxt,rel_ScoredData_e3b4e0bebca3bce4->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(0))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1))}};
rel_ScoredData_e3b4e0bebca3bce4->insert(tuple,READ_OP_CONTEXT(rel_ScoredData_e3b4e0bebca3bce4_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ScoredData(meth,1,2) :- 
   Invoke(_,meth,_),
   match(".*[.](plot_confusion_matrix|plot_det_curve|plot_precision_recall_curve|plot_roc_curve)", meth).
in file main.dl [589:1-591:107])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ScoredData_e3b4e0bebca3bce4_op_ctxt,rel_ScoredData_e3b4e0bebca3bce4->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(1))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(RamSigned(1)),ramBitCast(RamSigned(2))}};
rel_ScoredData_e3b4e0bebca3bce4->insert(tuple,READ_OP_CONTEXT(rel_ScoredData_e3b4e0bebca3bce4_op_ctxt));
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_ScoredDataWithModel_30dbd13a5da1c436 {
public:
 Stratum_ScoredDataWithModel_30dbd13a5da1c436(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualParam_b7a735170493e717,t_btree_iii__1_0_2__010__110__111::Type& rel_ActualReturn_8bc9db09e057aa22,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type& rel_FlowFromExtended_7fd58681b534e204,t_btree_iii__0_1_2__100__111::Type& rel_ScoredData_e3b4e0bebca3bce4,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_ScoredDataWithModel_55bb6aafc5a52e34,t_btree_ii__0_1__11::Type& rel_ScoredResult_cd9b66baec883a81,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__1__0_1_2__010__100__110__111::Type* rel_ActualParam_b7a735170493e717;
t_btree_iii__1_0_2__010__110__111::Type* rel_ActualReturn_8bc9db09e057aa22;
t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type* rel_CallGraphEdge_333c9d69fed5eee7;
t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type* rel_FlowFromExtended_7fd58681b534e204;
t_btree_iii__0_1_2__100__111::Type* rel_ScoredData_e3b4e0bebca3bce4;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel_ScoredDataWithModel_55bb6aafc5a52e34;
t_btree_ii__0_1__11::Type* rel_ScoredResult_cd9b66baec883a81;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_ValOrTestDataWithModel_2810ba231c0c185a;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_ScoredDataWithModel_30dbd13a5da1c436::Stratum_ScoredDataWithModel_30dbd13a5da1c436(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualParam_b7a735170493e717,t_btree_iii__1_0_2__010__110__111::Type& rel_ActualReturn_8bc9db09e057aa22,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type& rel_FlowFromExtended_7fd58681b534e204,t_btree_iii__0_1_2__100__111::Type& rel_ScoredData_e3b4e0bebca3bce4,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_ScoredDataWithModel_55bb6aafc5a52e34,t_btree_ii__0_1__11::Type& rel_ScoredResult_cd9b66baec883a81,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_ActualParam_b7a735170493e717(&rel_ActualParam_b7a735170493e717),
rel_ActualReturn_8bc9db09e057aa22(&rel_ActualReturn_8bc9db09e057aa22),
rel_CallGraphEdge_333c9d69fed5eee7(&rel_CallGraphEdge_333c9d69fed5eee7),
rel_FlowFromExtended_7fd58681b534e204(&rel_FlowFromExtended_7fd58681b534e204),
rel_ScoredData_e3b4e0bebca3bce4(&rel_ScoredData_e3b4e0bebca3bce4),
rel_ScoredDataWithModel_55bb6aafc5a52e34(&rel_ScoredDataWithModel_55bb6aafc5a52e34),
rel_ScoredResult_cd9b66baec883a81(&rel_ScoredResult_cd9b66baec883a81),
rel_ValOrTestDataWithModel_2810ba231c0c185a(&rel_ValOrTestDataWithModel_2810ba231c0c185a){
}

void Stratum_ScoredDataWithModel_30dbd13a5da1c436::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(ScoredDataWithModel(model,test,invo,meth,ctx) :- 
   ValOrTestDataWithModel(model,test,invo,meth,ctx),
   ScoredData(meth,model_idx,idx),
   ActualParam(idx,invo,test),
   ActualParam(model_idx,invo,model).
in file main.dl [1183:1-1187:41])_");
if(!(rel_ValOrTestDataWithModel_2810ba231c0c185a->empty()) && !(rel_ScoredData_e3b4e0bebca3bce4->empty()) && !(rel_ActualParam_b7a735170493e717->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_ScoredData_e3b4e0bebca3bce4_op_ctxt,rel_ScoredData_e3b4e0bebca3bce4->createContext());
CREATE_OP_CONTEXT(rel_ScoredDataWithModel_55bb6aafc5a52e34_op_ctxt,rel_ScoredDataWithModel_55bb6aafc5a52e34->createContext());
CREATE_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt,rel_ValOrTestDataWithModel_2810ba231c0c185a->createContext());
for(const auto& env0 : *rel_ValOrTestDataWithModel_2810ba231c0c185a) {
auto range = rel_ScoredData_e3b4e0bebca3bce4->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ScoredData_e3b4e0bebca3bce4_op_ctxt));
for(const auto& env1 : range) {
if( rel_ActualParam_b7a735170493e717->contains(Tuple<RamDomain,3>{{ramBitCast(env1[1]),ramBitCast(env0[2]),ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt)) && rel_ActualParam_b7a735170493e717->contains(Tuple<RamDomain,3>{{ramBitCast(env1[2]),ramBitCast(env0[2]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_ScoredDataWithModel_55bb6aafc5a52e34->insert(tuple,READ_OP_CONTEXT(rel_ScoredDataWithModel_55bb6aafc5a52e34_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(ScoredDataWithModel(model,test,invo,meth,ctx1) :- 
   ValOrTestDataWithModel(model,test,invo,meth,ctx1),
   ActualReturn(ret_idx,invo,ret),
   ret_idx = 0,
   FlowFromExtended(res,ctx2,ret,ctx1,_),
   ScoredResult(meth2,res_idx),
   CallGraphEdge(invo2,ctx2,meth2,_),
   CallGraphEdge(invo,ctx1,meth,_),
   ActualParam(res_idx,invo2,res).
in file main.dl [1189:1-1197:38])_");
if(!(rel_ActualParam_b7a735170493e717->empty()) && !(rel_ValOrTestDataWithModel_2810ba231c0c185a->empty()) && !(rel_ScoredResult_cd9b66baec883a81->empty()) && !(rel_FlowFromExtended_7fd58681b534e204->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_ActualReturn_8bc9db09e057aa22->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt,rel_ActualReturn_8bc9db09e057aa22->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt,rel_FlowFromExtended_7fd58681b534e204->createContext());
CREATE_OP_CONTEXT(rel_ScoredDataWithModel_55bb6aafc5a52e34_op_ctxt,rel_ScoredDataWithModel_55bb6aafc5a52e34->createContext());
CREATE_OP_CONTEXT(rel_ScoredResult_cd9b66baec883a81_op_ctxt,rel_ScoredResult_cd9b66baec883a81->createContext());
CREATE_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt,rel_ValOrTestDataWithModel_2810ba231c0c185a->createContext());
for(const auto& env0 : *rel_ValOrTestDataWithModel_2810ba231c0c185a) {
if( !rel_CallGraphEdge_333c9d69fed5eee7->lowerUpperRange_1110(Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env0[4]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast(env0[4]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt)).empty()) {
auto range = rel_ActualReturn_8bc9db09e057aa22->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(RamSigned(0)), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(0)), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_00110(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[2]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[2]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt));
for(const auto& env2 : range) {
for(const auto& env3 : *rel_ScoredResult_cd9b66baec883a81) {
auto range = rel_CallGraphEdge_333c9d69fed5eee7->lowerUpperRange_0110(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast(env3[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[1]), ramBitCast(env3[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt));
for(const auto& env4 : range) {
if( rel_ActualParam_b7a735170493e717->contains(Tuple<RamDomain,3>{{ramBitCast(env3[1]),ramBitCast(env4[0]),ramBitCast(env2[0])}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_ScoredDataWithModel_55bb6aafc5a52e34->insert(tuple,READ_OP_CONTEXT(rel_ScoredDataWithModel_55bb6aafc5a52e34_op_ctxt));
break;
}
}
}
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","model\ttest\tinvo\tmeth\tctx"},{"auxArity","0"},{"name","ScoredDataWithModel"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"model\", \"test\", \"invo\", \"meth\", \"ctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_ScoredDataWithModel_55bb6aafc5a52e34);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_ScoredData_e3b4e0bebca3bce4->purge();
if (pruneImdtRels) rel_ScoredResult_cd9b66baec883a81->purge();
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_ScoredResult_8edef05b044117b3 {
public:
 Stratum_ScoredResult_8edef05b044117b3(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_ii__0_1__11::Type& rel_ScoredResult_cd9b66baec883a81);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_Invoke_d61c77705bff35b0;
t_btree_ii__0_1__11::Type* rel_ScoredResult_cd9b66baec883a81;
std::vector<std::regex> regexes;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_ScoredResult_8edef05b044117b3::Stratum_ScoredResult_8edef05b044117b3(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_ii__0_1__11::Type& rel_ScoredResult_cd9b66baec883a81):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_Invoke_d61c77705bff35b0(&rel_Invoke_d61c77705bff35b0),
rel_ScoredResult_cd9b66baec883a81(&rel_ScoredResult_cd9b66baec883a81),
regexes({
	std::regex(".*(accuracy_score|average_precision_score|balanced_accuracy_score|brier_score_loss|classification_report|cohen_kappa_score|confusion_matrix|dcg_score|det_curve|f1_score|fbeta_score|hamming_loss|hinge_loss|jaccard_score|log_loss|matthews_corrcoef|multilabel_confusion_matrix|ndcg_score|precision_recall_curve|precision_recall_fscore_support|precision_score|recall_score|roc_auc_score|roc_curve|top_k_accuracy_score|zero_one_loss|explained_variance_score|max_error|mean_absolute_error|mean_squared_error|mean_squared_log_error|median_absolute_error|mean_absolute_percentage_error|r2_score|mean_poisson_deviance|mean_gamma_deviance|mean_tweedie_deviance|d2_tweedie_score|mean_pinball_loss|coverage_error|label_ranking_average_precision_score|label_ranking_loss|adjusted_mutual_info_score|adjusted_rand_score|completeness_score|contingency_matrix|pair_confusion_matrix|fowlkes_mallows_score|homogeneity_completeness_v_measure|homogeneity_score|mutual_info_score|normalized_mutual_info_score|rand_score|v_measure_score)"),
}){
}

void Stratum_ScoredResult_8edef05b044117b3::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(ScoredResult(meth,2) :- 
   Invoke(_,meth,_),
   match(".*(accuracy_score|average_precision_score|balanced_accuracy_score|brier_score_loss|classification_report|cohen_kappa_score|confusion_matrix|dcg_score|det_curve|f1_score|fbeta_score|hamming_loss|hinge_loss|jaccard_score|log_loss|matthews_corrcoef|multilabel_confusion_matrix|ndcg_score|precision_recall_curve|precision_recall_fscore_support|precision_score|recall_score|roc_auc_score|roc_curve|top_k_accuracy_score|zero_one_loss|explained_variance_score|max_error|mean_absolute_error|mean_squared_error|mean_squared_log_error|median_absolute_error|mean_absolute_percentage_error|r2_score|mean_poisson_deviance|mean_gamma_deviance|mean_tweedie_deviance|d2_tweedie_score|mean_pinball_loss|coverage_error|label_ranking_average_precision_score|label_ranking_loss|adjusted_mutual_info_score|adjusted_rand_score|completeness_score|contingency_matrix|pair_confusion_matrix|fowlkes_mallows_score|homogeneity_completeness_v_measure|homogeneity_score|mutual_info_score|normalized_mutual_info_score|rand_score|v_measure_score)", meth).
in file main.dl [592:1-594:1035])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ScoredResult_cd9b66baec883a81_op_ctxt,rel_ScoredResult_cd9b66baec883a81->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(0))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(RamSigned(2))}};
rel_ScoredResult_cd9b66baec883a81->insert(tuple,READ_OP_CONTEXT(rel_ScoredResult_cd9b66baec883a81_op_ctxt));
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_SliceIndex_24b3a3e5e18c9e5b {
public:
 Stratum_SliceIndex_24b3a3e5e18c9e5b(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_LoadSlice_e590a0ee3f45cac8,t_btree_iiii__0_1_2_3__1110__1111::Type& rel_SliceIndex_7426c9b7afc02920,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_StoreSlice_2d8a31bc728a3bbd,t_btree_iiiiii__0_1_2_3_4_5__110000__111111::Type& rel_StoreSliceSSA_f26b3c4e2aecada2);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel_LoadSlice_e590a0ee3f45cac8;
t_btree_iiii__0_1_2_3__1110__1111::Type* rel_SliceIndex_7426c9b7afc02920;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel_StoreSlice_2d8a31bc728a3bbd;
t_btree_iiiiii__0_1_2_3_4_5__110000__111111::Type* rel_StoreSliceSSA_f26b3c4e2aecada2;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_SliceIndex_24b3a3e5e18c9e5b::Stratum_SliceIndex_24b3a3e5e18c9e5b(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_LoadSlice_e590a0ee3f45cac8,t_btree_iiii__0_1_2_3__1110__1111::Type& rel_SliceIndex_7426c9b7afc02920,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_StoreSlice_2d8a31bc728a3bbd,t_btree_iiiiii__0_1_2_3_4_5__110000__111111::Type& rel_StoreSliceSSA_f26b3c4e2aecada2):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_LoadSlice_e590a0ee3f45cac8(&rel_LoadSlice_e590a0ee3f45cac8),
rel_SliceIndex_7426c9b7afc02920(&rel_SliceIndex_7426c9b7afc02920),
rel_StoreSlice_2d8a31bc728a3bbd(&rel_StoreSlice_2d8a31bc728a3bbd),
rel_StoreSliceSSA_f26b3c4e2aecada2(&rel_StoreSliceSSA_f26b3c4e2aecada2){
}

void Stratum_SliceIndex_24b3a3e5e18c9e5b::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(SliceIndex(st,ed,step,cat(cat(cat(cat(cat(cat(st,"::: "),ed),"::: "),"::: "),step),"::: ")) :- 
   LoadSlice(_,_,st,ed,step).
in file main.dl [785:1-787:92])_");
if(!(rel_LoadSlice_e590a0ee3f45cac8->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_LoadSlice_e590a0ee3f45cac8_op_ctxt,rel_LoadSlice_e590a0ee3f45cac8->createContext());
CREATE_OP_CONTEXT(rel_SliceIndex_7426c9b7afc02920_op_ctxt,rel_SliceIndex_7426c9b7afc02920->createContext());
for(const auto& env0 : *rel_LoadSlice_e590a0ee3f45cac8) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(symTable.encode(symTable.decode(symTable.encode(symTable.decode(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env0[2]) + symTable.decode(RamSigned(46)))) + symTable.decode(env0[3]))) + symTable.decode(RamSigned(46)))) + symTable.decode(RamSigned(46)))) + symTable.decode(env0[4]))) + symTable.decode(RamSigned(46))))}};
rel_SliceIndex_7426c9b7afc02920->insert(tuple,READ_OP_CONTEXT(rel_SliceIndex_7426c9b7afc02920_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(SliceIndex(st,ed,step,cat(cat(cat(cat(cat(cat(st,"::: "),ed),"::: "),"::: "),step),"::: ")) :- 
   StoreSlice(_,st,ed,step,_).
in file main.dl [788:1-790:92])_");
if(!(rel_StoreSlice_2d8a31bc728a3bbd->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_SliceIndex_7426c9b7afc02920_op_ctxt,rel_SliceIndex_7426c9b7afc02920->createContext());
CREATE_OP_CONTEXT(rel_StoreSlice_2d8a31bc728a3bbd_op_ctxt,rel_StoreSlice_2d8a31bc728a3bbd->createContext());
for(const auto& env0 : *rel_StoreSlice_2d8a31bc728a3bbd) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(symTable.encode(symTable.decode(symTable.encode(symTable.decode(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env0[1]) + symTable.decode(RamSigned(46)))) + symTable.decode(env0[2]))) + symTable.decode(RamSigned(46)))) + symTable.decode(RamSigned(46)))) + symTable.decode(env0[3]))) + symTable.decode(RamSigned(46))))}};
rel_SliceIndex_7426c9b7afc02920->insert(tuple,READ_OP_CONTEXT(rel_SliceIndex_7426c9b7afc02920_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(SliceIndex(st,ed,step,cat(cat(cat(cat(cat(cat(st,"::: "),ed),"::: "),"::: "),step),"::: ")) :- 
   StoreSliceSSA(_,_,st,ed,step,_).
in file main.dl [788:1-790:92])_");
if(!(rel_StoreSliceSSA_f26b3c4e2aecada2->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_SliceIndex_7426c9b7afc02920_op_ctxt,rel_SliceIndex_7426c9b7afc02920->createContext());
CREATE_OP_CONTEXT(rel_StoreSliceSSA_f26b3c4e2aecada2_op_ctxt,rel_StoreSliceSSA_f26b3c4e2aecada2->createContext());
for(const auto& env0 : *rel_StoreSliceSSA_f26b3c4e2aecada2) {
Tuple<RamDomain,4> tuple{{ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4]),ramBitCast(symTable.encode(symTable.decode(symTable.encode(symTable.decode(symTable.encode(symTable.decode(symTable.encode(symTable.decode(symTable.encode(symTable.decode(symTable.encode(symTable.decode(env0[2]) + symTable.decode(RamSigned(46)))) + symTable.decode(env0[3]))) + symTable.decode(RamSigned(46)))) + symTable.decode(RamSigned(46)))) + symTable.decode(env0[4]))) + symTable.decode(RamSigned(46))))}};
rel_SliceIndex_7426c9b7afc02920->insert(tuple,READ_OP_CONTEXT(rel_SliceIndex_7426c9b7afc02920_op_ctxt));
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_StoreField_c5a07b83c99b3483 {
public:
 Stratum_StoreField_c5a07b83c99b3483(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__0_1_2__111::Type& rel_StoreField_7d8d16151c0ea49b);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__0_1_2__111::Type* rel_StoreField_7d8d16151c0ea49b;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_StoreField_c5a07b83c99b3483::Stratum_StoreField_c5a07b83c99b3483(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__0_1_2__111::Type& rel_StoreField_7d8d16151c0ea49b):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_StoreField_7d8d16151c0ea49b(&rel_StoreField_7d8d16151c0ea49b){
}

void Stratum_StoreField_c5a07b83c99b3483::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","base\tf\tfrom"},{"auxArity","0"},{"fact-dir","."},{"name","StoreField"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"base\", \"f\", \"from\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Var\", \"s:Field\", \"s:Var\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_StoreField_7d8d16151c0ea49b);
} catch (std::exception& e) {std::cerr << "Error loading StoreField data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_StoreFieldSSA_dc40eef5598f9119 {
public:
 Stratum_StoreFieldSSA_dc40eef5598f9119(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_StoreFieldSSA_051b143b9d011002);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__0_1_2_3__1111__1100::Type* rel_StoreFieldSSA_051b143b9d011002;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_StoreFieldSSA_dc40eef5598f9119::Stratum_StoreFieldSSA_dc40eef5598f9119(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_StoreFieldSSA_051b143b9d011002):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_StoreFieldSSA_051b143b9d011002(&rel_StoreFieldSSA_051b143b9d011002){
}

void Stratum_StoreFieldSSA_dc40eef5598f9119::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","new_base\tbase\tf\tfrom"},{"auxArity","0"},{"fact-dir","."},{"name","StoreFieldSSA"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"new_base\", \"base\", \"f\", \"from\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Var\", \"s:Var\", \"s:Field\", \"s:Var\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_StoreFieldSSA_051b143b9d011002);
} catch (std::exception& e) {std::cerr << "Error loading StoreFieldSSA data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_StoreIndex_6595ade9ca345fbb {
public:
 Stratum_StoreIndex_6595ade9ca345fbb(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__0_1_2__110__111::Type& rel_StoreIndex_bab2c0876dfa7ece);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__0_1_2__110__111::Type* rel_StoreIndex_bab2c0876dfa7ece;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_StoreIndex_6595ade9ca345fbb::Stratum_StoreIndex_6595ade9ca345fbb(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__0_1_2__110__111::Type& rel_StoreIndex_bab2c0876dfa7ece):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_StoreIndex_bab2c0876dfa7ece(&rel_StoreIndex_bab2c0876dfa7ece){
}

void Stratum_StoreIndex_6595ade9ca345fbb::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","base\ti\tfrom"},{"auxArity","0"},{"fact-dir","."},{"name","StoreIndex"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"base\", \"i\", \"from\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Var\", \"s:Index\", \"s:Var\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_StoreIndex_bab2c0876dfa7ece);
} catch (std::exception& e) {std::cerr << "Error loading StoreIndex data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_StoreIndexSSA_f5d4c907f3ae8d5e {
public:
 Stratum_StoreIndexSSA_f5d4c907f3ae8d5e(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_StoreIndexSSA_431249b1dfe65e85);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__0_1_2_3__1111__1100::Type* rel_StoreIndexSSA_431249b1dfe65e85;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_StoreIndexSSA_f5d4c907f3ae8d5e::Stratum_StoreIndexSSA_f5d4c907f3ae8d5e(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_StoreIndexSSA_431249b1dfe65e85):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_StoreIndexSSA_431249b1dfe65e85(&rel_StoreIndexSSA_431249b1dfe65e85){
}

void Stratum_StoreIndexSSA_f5d4c907f3ae8d5e::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","new_base\tbase\ti\tfrom"},{"auxArity","0"},{"fact-dir","."},{"name","StoreIndexSSA"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"new_base\", \"base\", \"i\", \"from\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Var\", \"s:Var\", \"s:Index\", \"s:Var\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_StoreIndexSSA_431249b1dfe65e85);
} catch (std::exception& e) {std::cerr << "Error loading StoreIndexSSA data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_StoreSlice_f195a4641303040e {
public:
 Stratum_StoreSlice_f195a4641303040e(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_StoreSlice_2d8a31bc728a3bbd);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel_StoreSlice_2d8a31bc728a3bbd;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_StoreSlice_f195a4641303040e::Stratum_StoreSlice_f195a4641303040e(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_StoreSlice_2d8a31bc728a3bbd):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_StoreSlice_2d8a31bc728a3bbd(&rel_StoreSlice_2d8a31bc728a3bbd){
}

void Stratum_StoreSlice_f195a4641303040e::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","base\tst\ted\tstep\tfrom"},{"auxArity","0"},{"fact-dir","."},{"name","StoreSlice"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"base\", \"st\", \"ed\", \"step\", \"from\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"s:Var\", \"s:Var\", \"s:Var\", \"s:Var\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_StoreSlice_2d8a31bc728a3bbd);
} catch (std::exception& e) {std::cerr << "Error loading StoreSlice data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_StoreSliceSSA_24cbb8c9e3929aa4 {
public:
 Stratum_StoreSliceSSA_24cbb8c9e3929aa4(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiiii__0_1_2_3_4_5__110000__111111::Type& rel_StoreSliceSSA_f26b3c4e2aecada2);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiiiii__0_1_2_3_4_5__110000__111111::Type* rel_StoreSliceSSA_f26b3c4e2aecada2;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_StoreSliceSSA_24cbb8c9e3929aa4::Stratum_StoreSliceSSA_24cbb8c9e3929aa4(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiiii__0_1_2_3_4_5__110000__111111::Type& rel_StoreSliceSSA_f26b3c4e2aecada2):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_StoreSliceSSA_f26b3c4e2aecada2(&rel_StoreSliceSSA_f26b3c4e2aecada2){
}

void Stratum_StoreSliceSSA_24cbb8c9e3929aa4::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","new_base\tbase\tst\ted\tstep\tfrom"},{"auxArity","0"},{"fact-dir","."},{"name","StoreSliceSSA"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 6, \"params\": [\"new_base\", \"base\", \"st\", \"ed\", \"step\", \"from\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 6, \"types\": [\"s:Var\", \"s:Var\", \"s:Var\", \"s:Var\", \"s:Var\", \"s:Var\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_StoreSliceSSA_f26b3c4e2aecada2);
} catch (std::exception& e) {std::cerr << "Error loading StoreSliceSSA data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_SubType_b28a5b65669b4e17 {
public:
 Stratum_SubType_b28a5b65669b4e17(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__0_1__11::Type& rel_SubType_1b987a9db6ba7d57);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_ii__0_1__11::Type* rel_SubType_1b987a9db6ba7d57;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_SubType_b28a5b65669b4e17::Stratum_SubType_b28a5b65669b4e17(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__0_1__11::Type& rel_SubType_1b987a9db6ba7d57):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_SubType_1b987a9db6ba7d57(&rel_SubType_1b987a9db6ba7d57){
}

void Stratum_SubType_b28a5b65669b4e17::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","subtype\ttype"},{"auxArity","0"},{"fact-dir","."},{"name","SubType"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"subtype\", \"type\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Type\", \"s:Type\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_SubType_1b987a9db6ba7d57);
} catch (std::exception& e) {std::cerr << "Error loading SubType data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_TaintCondition_c759f2ebe96a5883 {
public:
 Stratum_TaintCondition_c759f2ebe96a5883(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__0_1_2__100__111::Type& rel_TaintCondition_7b1ddf0c7226422d);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__0_1_2__100__111::Type* rel_TaintCondition_7b1ddf0c7226422d;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_TaintCondition_c759f2ebe96a5883::Stratum_TaintCondition_c759f2ebe96a5883(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__0_1_2__100__111::Type& rel_TaintCondition_7b1ddf0c7226422d):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_TaintCondition_7b1ddf0c7226422d(&rel_TaintCondition_7b1ddf0c7226422d){
}

void Stratum_TaintCondition_c759f2ebe96a5883::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(TaintCondition(4027,0,"pipeline").
in file main.dl [539:1-539:37])_");
[&](){
CREATE_OP_CONTEXT(rel_TaintCondition_7b1ddf0c7226422d_op_ctxt,rel_TaintCondition_7b1ddf0c7226422d->createContext());
Tuple<RamDomain,3> tuple{{ramBitCast(RamSigned(4027)),ramBitCast(RamSigned(0)),ramBitCast(RamSigned(44))}};
rel_TaintCondition_7b1ddf0c7226422d->insert(tuple,READ_OP_CONTEXT(rel_TaintCondition_7b1ddf0c7226422d_op_ctxt));
}
();}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_TaintStarts_a1eaba1011cb0450 {
public:
 Stratum_TaintStarts_a1eaba1011cb0450(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__0_1_2__111::Type& rel_delta_TaintStarts_cc75a7e7e9407e43,t_btree_iii__0_1_2__111::Type& rel_new_TaintStarts_39ba418fa1a55080,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualParam_b7a735170493e717,t_btree_iii__1_0_2__010__110__111::Type& rel_ActualReturn_8bc9db09e057aa22,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_iiiii__0_1_2_3_4__11111__11000::Type& rel_FlowFrom_0c9cf4995aeb9ef7,t_btree_iiii__2_0_1_3__1111__0010::Type& rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed,t_btree_iiiii__3_0_1_2_4__11111__00010::Type& rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843,t_btree_iiii__2_0_1_3__1111__0010::Type& rel_ParamToRetTaintSourceMethod_54896442c7cf3fde,t_btree_iii__1_0_2__010__111::Type& rel_RetTaintSourceMethod_b3e3f5b46f4b2c24,t_btree_iii__0_1_2__100__111::Type& rel_TaintCondition_7b1ddf0c7226422d,t_btree_iii__0_1_2__111::Type& rel_TaintStarts_1fb2f244128dc60e);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__0_1_2__111::Type* rel_delta_TaintStarts_cc75a7e7e9407e43;
t_btree_iii__0_1_2__111::Type* rel_new_TaintStarts_39ba418fa1a55080;
t_btree_iii__1__0_1_2__010__100__110__111::Type* rel_ActualParam_b7a735170493e717;
t_btree_iii__1_0_2__010__110__111::Type* rel_ActualReturn_8bc9db09e057aa22;
t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type* rel_CallGraphEdge_333c9d69fed5eee7;
t_btree_iiiii__0_1_2_3_4__11111__11000::Type* rel_FlowFrom_0c9cf4995aeb9ef7;
t_btree_iiii__2_0_1_3__1111__0010::Type* rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed;
t_btree_iiiii__3_0_1_2_4__11111__00010::Type* rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843;
t_btree_iiii__2_0_1_3__1111__0010::Type* rel_ParamToRetTaintSourceMethod_54896442c7cf3fde;
t_btree_iii__1_0_2__010__111::Type* rel_RetTaintSourceMethod_b3e3f5b46f4b2c24;
t_btree_iii__0_1_2__100__111::Type* rel_TaintCondition_7b1ddf0c7226422d;
t_btree_iii__0_1_2__111::Type* rel_TaintStarts_1fb2f244128dc60e;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_TaintStarts_a1eaba1011cb0450::Stratum_TaintStarts_a1eaba1011cb0450(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__0_1_2__111::Type& rel_delta_TaintStarts_cc75a7e7e9407e43,t_btree_iii__0_1_2__111::Type& rel_new_TaintStarts_39ba418fa1a55080,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualParam_b7a735170493e717,t_btree_iii__1_0_2__010__110__111::Type& rel_ActualReturn_8bc9db09e057aa22,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_iiiii__0_1_2_3_4__11111__11000::Type& rel_FlowFrom_0c9cf4995aeb9ef7,t_btree_iiii__2_0_1_3__1111__0010::Type& rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed,t_btree_iiiii__3_0_1_2_4__11111__00010::Type& rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843,t_btree_iiii__2_0_1_3__1111__0010::Type& rel_ParamToRetTaintSourceMethod_54896442c7cf3fde,t_btree_iii__1_0_2__010__111::Type& rel_RetTaintSourceMethod_b3e3f5b46f4b2c24,t_btree_iii__0_1_2__100__111::Type& rel_TaintCondition_7b1ddf0c7226422d,t_btree_iii__0_1_2__111::Type& rel_TaintStarts_1fb2f244128dc60e):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_delta_TaintStarts_cc75a7e7e9407e43(&rel_delta_TaintStarts_cc75a7e7e9407e43),
rel_new_TaintStarts_39ba418fa1a55080(&rel_new_TaintStarts_39ba418fa1a55080),
rel_ActualParam_b7a735170493e717(&rel_ActualParam_b7a735170493e717),
rel_ActualReturn_8bc9db09e057aa22(&rel_ActualReturn_8bc9db09e057aa22),
rel_CallGraphEdge_333c9d69fed5eee7(&rel_CallGraphEdge_333c9d69fed5eee7),
rel_FlowFrom_0c9cf4995aeb9ef7(&rel_FlowFrom_0c9cf4995aeb9ef7),
rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed(&rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed),
rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843(&rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843),
rel_ParamToRetTaintSourceMethod_54896442c7cf3fde(&rel_ParamToRetTaintSourceMethod_54896442c7cf3fde),
rel_RetTaintSourceMethod_b3e3f5b46f4b2c24(&rel_RetTaintSourceMethod_b3e3f5b46f4b2c24),
rel_TaintCondition_7b1ddf0c7226422d(&rel_TaintCondition_7b1ddf0c7226422d),
rel_TaintStarts_1fb2f244128dc60e(&rel_TaintStarts_1fb2f244128dc60e){
}

void Stratum_TaintStarts_a1eaba1011cb0450::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(TaintStarts(var,callerCtx,label) :- 
   CallGraphEdge(invo,callerCtx,meth,_),
   RetTaintSourceMethod(idx,meth,label),
   ActualReturn(idx,invo,var).
in file main.dl [1303:1-1306:34])_");
if(!(rel_RetTaintSourceMethod_b3e3f5b46f4b2c24->empty()) && !(rel_ActualReturn_8bc9db09e057aa22->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt,rel_ActualReturn_8bc9db09e057aa22->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_RetTaintSourceMethod_b3e3f5b46f4b2c24_op_ctxt,rel_RetTaintSourceMethod_b3e3f5b46f4b2c24->createContext());
CREATE_OP_CONTEXT(rel_TaintStarts_1fb2f244128dc60e_op_ctxt,rel_TaintStarts_1fb2f244128dc60e->createContext());
for(const auto& env0 : *rel_CallGraphEdge_333c9d69fed5eee7) {
auto range = rel_RetTaintSourceMethod_b3e3f5b46f4b2c24->lowerUpperRange_010(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_RetTaintSourceMethod_b3e3f5b46f4b2c24_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_ActualReturn_8bc9db09e057aa22->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env2[2]),ramBitCast(env0[1]),ramBitCast(env1[2])}};
rel_TaintStarts_1fb2f244128dc60e->insert(tuple,READ_OP_CONTEXT(rel_TaintStarts_1fb2f244128dc60e_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(TaintStarts(var,callerCtx,label) :- 
   CallGraphEdge(invo,callerCtx,meth,_),
   ParamToParamTaintSourceMethod(toIdx,fromIdx,meth,label),
   ActualParam(toIdx,invo,_),
   ActualParam(fromIdx,invo,var).
in file main.dl [1308:1-1315:37])_");
if(!(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->empty()) && !(rel_ActualParam_b7a735170493e717->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed_op_ctxt,rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->createContext());
CREATE_OP_CONTEXT(rel_TaintStarts_1fb2f244128dc60e_op_ctxt,rel_TaintStarts_1fb2f244128dc60e->createContext());
for(const auto& env0 : *rel_CallGraphEdge_333c9d69fed5eee7) {
auto range = rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed_op_ctxt));
for(const auto& env1 : range) {
if( !rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt)).empty()) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env2[2]),ramBitCast(env0[1]),ramBitCast(env1[3])}};
rel_TaintStarts_1fb2f244128dc60e->insert(tuple,READ_OP_CONTEXT(rel_TaintStarts_1fb2f244128dc60e_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(TaintStarts(var,callerCtx,label) :- 
   CallGraphEdge(invo,callerCtx,meth,_),
   ParamToRetTaintSourceMethod(toIdx,fromIdx,meth,label),
   ActualReturn(toIdx,invo,_),
   ActualParam(fromIdx,invo,var).
in file main.dl [1308:1-1315:37])_");
if(!(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->empty()) && !(rel_ActualReturn_8bc9db09e057aa22->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_ActualParam_b7a735170493e717->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt,rel_ActualReturn_8bc9db09e057aa22->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt,rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->createContext());
CREATE_OP_CONTEXT(rel_TaintStarts_1fb2f244128dc60e_op_ctxt,rel_TaintStarts_1fb2f244128dc60e->createContext());
for(const auto& env0 : *rel_CallGraphEdge_333c9d69fed5eee7) {
auto range = rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt));
for(const auto& env1 : range) {
if( !rel_ActualReturn_8bc9db09e057aa22->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt)).empty()) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,3> tuple{{ramBitCast(env2[2]),ramBitCast(env0[1]),ramBitCast(env1[3])}};
rel_TaintStarts_1fb2f244128dc60e->insert(tuple,READ_OP_CONTEXT(rel_TaintStarts_1fb2f244128dc60e_op_ctxt));
}
}
}
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_delta_TaintStarts_cc75a7e7e9407e43_op_ctxt,rel_delta_TaintStarts_cc75a7e7e9407e43->createContext());
CREATE_OP_CONTEXT(rel_TaintStarts_1fb2f244128dc60e_op_ctxt,rel_TaintStarts_1fb2f244128dc60e->createContext());
for(const auto& env0 : *rel_TaintStarts_1fb2f244128dc60e) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_delta_TaintStarts_cc75a7e7e9407e43->insert(tuple,READ_OP_CONTEXT(rel_delta_TaintStarts_cc75a7e7e9407e43_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(TaintStarts(var,callerCtx,label) :- 
   CallGraphEdge(invo,callerCtx,meth,_),
   ParamToRetCondTaintSourceMethod(toIdx,fromIdx,cond_id,meth,label),
   TaintCondition(cond_id,srcIdx,srcTaintType),
   ActualParam(srcIdx,invo,src),
   FlowFrom(src,callerCtx,src_start,src_start_ctx,_),
   TaintStarts(src_start,src_start_ctx,srcTaintType),
   ActualReturn(toIdx,invo,_),
   ActualParam(fromIdx,invo,var).
in file main.dl [1308:1-1315:37])_");
if(!(rel_ActualReturn_8bc9db09e057aa22->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_delta_TaintStarts_cc75a7e7e9407e43->empty()) && !(rel_TaintCondition_7b1ddf0c7226422d->empty()) && !(rel_FlowFrom_0c9cf4995aeb9ef7->empty()) && !(rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843->empty()) && !(rel_ActualParam_b7a735170493e717->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_TaintStarts_cc75a7e7e9407e43_op_ctxt,rel_delta_TaintStarts_cc75a7e7e9407e43->createContext());
CREATE_OP_CONTEXT(rel_new_TaintStarts_39ba418fa1a55080_op_ctxt,rel_new_TaintStarts_39ba418fa1a55080->createContext());
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt,rel_ActualReturn_8bc9db09e057aa22->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_FlowFrom_0c9cf4995aeb9ef7_op_ctxt,rel_FlowFrom_0c9cf4995aeb9ef7->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843_op_ctxt,rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843->createContext());
CREATE_OP_CONTEXT(rel_TaintCondition_7b1ddf0c7226422d_op_ctxt,rel_TaintCondition_7b1ddf0c7226422d->createContext());
CREATE_OP_CONTEXT(rel_TaintStarts_1fb2f244128dc60e_op_ctxt,rel_TaintStarts_1fb2f244128dc60e->createContext());
for(const auto& env0 : *rel_CallGraphEdge_333c9d69fed5eee7) {
auto range = rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843->lowerUpperRange_00010(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843_op_ctxt));
for(const auto& env1 : range) {
if( !rel_ActualReturn_8bc9db09e057aa22->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt)).empty()) {
auto range = rel_TaintCondition_7b1ddf0c7226422d->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_TaintCondition_7b1ddf0c7226422d_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env2[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env2[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_FlowFrom_0c9cf4995aeb9ef7->lowerUpperRange_11000(Tuple<RamDomain,5>{{ramBitCast(env3[2]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env3[2]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FlowFrom_0c9cf4995aeb9ef7_op_ctxt));
for(const auto& env4 : range) {
if( rel_delta_TaintStarts_cc75a7e7e9407e43->contains(Tuple<RamDomain,3>{{ramBitCast(env4[2]),ramBitCast(env4[3]),ramBitCast(env2[2])}},READ_OP_CONTEXT(rel_delta_TaintStarts_cc75a7e7e9407e43_op_ctxt))) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env5 : range) {
if( !(rel_TaintStarts_1fb2f244128dc60e->contains(Tuple<RamDomain,3>{{ramBitCast(env5[2]),ramBitCast(env0[1]),ramBitCast(env1[4])}},READ_OP_CONTEXT(rel_TaintStarts_1fb2f244128dc60e_op_ctxt)))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env5[2]),ramBitCast(env0[1]),ramBitCast(env1[4])}};
rel_new_TaintStarts_39ba418fa1a55080->insert(tuple,READ_OP_CONTEXT(rel_new_TaintStarts_39ba418fa1a55080_op_ctxt));
}
}
break;
}
}
}
}
}
}
}
}
();}
if(rel_new_TaintStarts_39ba418fa1a55080->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_new_TaintStarts_39ba418fa1a55080_op_ctxt,rel_new_TaintStarts_39ba418fa1a55080->createContext());
CREATE_OP_CONTEXT(rel_TaintStarts_1fb2f244128dc60e_op_ctxt,rel_TaintStarts_1fb2f244128dc60e->createContext());
for(const auto& env0 : *rel_new_TaintStarts_39ba418fa1a55080) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2])}};
rel_TaintStarts_1fb2f244128dc60e->insert(tuple,READ_OP_CONTEXT(rel_TaintStarts_1fb2f244128dc60e_op_ctxt));
}
}
();std::swap(rel_delta_TaintStarts_cc75a7e7e9407e43, rel_new_TaintStarts_39ba418fa1a55080);
rel_new_TaintStarts_39ba418fa1a55080->purge();
iter++;
}
iter = 0;
rel_delta_TaintStarts_cc75a7e7e9407e43->purge();
rel_new_TaintStarts_39ba418fa1a55080->purge();
if (pruneImdtRels) rel_RetTaintSourceMethod_b3e3f5b46f4b2c24->purge();
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_TaintStartsTarget_7553c6b8b6948b93 {
public:
 Stratum_TaintStartsTarget_7553c6b8b6948b93(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualParam_b7a735170493e717,t_btree_iii__1_0_2__010__110__111::Type& rel_ActualReturn_8bc9db09e057aa22,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_iiiii__0_1_2_3_4__11111__11000::Type& rel_FlowFrom_0c9cf4995aeb9ef7,t_btree_iiii__2_0_1_3__1111__0010::Type& rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed,t_btree_iiiii__3_0_1_2_4__11111__00010::Type& rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843,t_btree_iiii__2_0_1_3__1111__0010::Type& rel_ParamToRetTaintSourceMethod_54896442c7cf3fde,t_btree_iii__0_1_2__100__111::Type& rel_TaintCondition_7b1ddf0c7226422d,t_btree_iii__0_1_2__111::Type& rel_TaintStarts_1fb2f244128dc60e,t_btree_iiiiiii__6_0_1_2_3_4_5__1111111__0000001::Type& rel_TaintStartsTarget_b45151d0d1a25a24);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__1__0_1_2__010__100__110__111::Type* rel_ActualParam_b7a735170493e717;
t_btree_iii__1_0_2__010__110__111::Type* rel_ActualReturn_8bc9db09e057aa22;
t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type* rel_CallGraphEdge_333c9d69fed5eee7;
t_btree_iiiii__0_1_2_3_4__11111__11000::Type* rel_FlowFrom_0c9cf4995aeb9ef7;
t_btree_iiii__2_0_1_3__1111__0010::Type* rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed;
t_btree_iiiii__3_0_1_2_4__11111__00010::Type* rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843;
t_btree_iiii__2_0_1_3__1111__0010::Type* rel_ParamToRetTaintSourceMethod_54896442c7cf3fde;
t_btree_iii__0_1_2__100__111::Type* rel_TaintCondition_7b1ddf0c7226422d;
t_btree_iii__0_1_2__111::Type* rel_TaintStarts_1fb2f244128dc60e;
t_btree_iiiiiii__6_0_1_2_3_4_5__1111111__0000001::Type* rel_TaintStartsTarget_b45151d0d1a25a24;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_TaintStartsTarget_7553c6b8b6948b93::Stratum_TaintStartsTarget_7553c6b8b6948b93(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualParam_b7a735170493e717,t_btree_iii__1_0_2__010__110__111::Type& rel_ActualReturn_8bc9db09e057aa22,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_iiiii__0_1_2_3_4__11111__11000::Type& rel_FlowFrom_0c9cf4995aeb9ef7,t_btree_iiii__2_0_1_3__1111__0010::Type& rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed,t_btree_iiiii__3_0_1_2_4__11111__00010::Type& rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843,t_btree_iiii__2_0_1_3__1111__0010::Type& rel_ParamToRetTaintSourceMethod_54896442c7cf3fde,t_btree_iii__0_1_2__100__111::Type& rel_TaintCondition_7b1ddf0c7226422d,t_btree_iii__0_1_2__111::Type& rel_TaintStarts_1fb2f244128dc60e,t_btree_iiiiiii__6_0_1_2_3_4_5__1111111__0000001::Type& rel_TaintStartsTarget_b45151d0d1a25a24):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_ActualParam_b7a735170493e717(&rel_ActualParam_b7a735170493e717),
rel_ActualReturn_8bc9db09e057aa22(&rel_ActualReturn_8bc9db09e057aa22),
rel_CallGraphEdge_333c9d69fed5eee7(&rel_CallGraphEdge_333c9d69fed5eee7),
rel_FlowFrom_0c9cf4995aeb9ef7(&rel_FlowFrom_0c9cf4995aeb9ef7),
rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed(&rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed),
rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843(&rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843),
rel_ParamToRetTaintSourceMethod_54896442c7cf3fde(&rel_ParamToRetTaintSourceMethod_54896442c7cf3fde),
rel_TaintCondition_7b1ddf0c7226422d(&rel_TaintCondition_7b1ddf0c7226422d),
rel_TaintStarts_1fb2f244128dc60e(&rel_TaintStarts_1fb2f244128dc60e),
rel_TaintStartsTarget_b45151d0d1a25a24(&rel_TaintStartsTarget_b45151d0d1a25a24){
}

void Stratum_TaintStartsTarget_7553c6b8b6948b93::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(TaintStartsTarget(target,callerCtx,var,callerCtx,invo,meth,label) :- 
   CallGraphEdge(invo,callerCtx,meth,_),
   ParamToParamTaintSourceMethod(toIdx,fromIdx,meth,label),
   ActualParam(toIdx,invo,target),
   ActualParam(fromIdx,invo,var).
in file main.dl [1308:1-1315:37])_");
if(!(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->empty()) && !(rel_ActualParam_b7a735170493e717->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed_op_ctxt,rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->createContext());
CREATE_OP_CONTEXT(rel_TaintStartsTarget_b45151d0d1a25a24_op_ctxt,rel_TaintStartsTarget_b45151d0d1a25a24->createContext());
for(const auto& env0 : *rel_CallGraphEdge_333c9d69fed5eee7) {
auto range = rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,7> tuple{{ramBitCast(env2[2]),ramBitCast(env0[1]),ramBitCast(env3[2]),ramBitCast(env0[1]),ramBitCast(env0[0]),ramBitCast(env0[2]),ramBitCast(env1[3])}};
rel_TaintStartsTarget_b45151d0d1a25a24->insert(tuple,READ_OP_CONTEXT(rel_TaintStartsTarget_b45151d0d1a25a24_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(TaintStartsTarget(target,callerCtx,var,callerCtx,invo,meth,label) :- 
   CallGraphEdge(invo,callerCtx,meth,_),
   ParamToRetTaintSourceMethod(toIdx,fromIdx,meth,label),
   ActualReturn(toIdx,invo,target),
   ActualParam(fromIdx,invo,var).
in file main.dl [1308:1-1315:37])_");
if(!(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->empty()) && !(rel_ActualReturn_8bc9db09e057aa22->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_ActualParam_b7a735170493e717->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt,rel_ActualReturn_8bc9db09e057aa22->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt,rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->createContext());
CREATE_OP_CONTEXT(rel_TaintStartsTarget_b45151d0d1a25a24_op_ctxt,rel_TaintStartsTarget_b45151d0d1a25a24->createContext());
for(const auto& env0 : *rel_CallGraphEdge_333c9d69fed5eee7) {
auto range = rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ParamToRetTaintSourceMethod_54896442c7cf3fde_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_ActualReturn_8bc9db09e057aa22->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,7> tuple{{ramBitCast(env2[2]),ramBitCast(env0[1]),ramBitCast(env3[2]),ramBitCast(env0[1]),ramBitCast(env0[0]),ramBitCast(env0[2]),ramBitCast(env1[3])}};
rel_TaintStartsTarget_b45151d0d1a25a24->insert(tuple,READ_OP_CONTEXT(rel_TaintStartsTarget_b45151d0d1a25a24_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(TaintStartsTarget(target,callerCtx,var,callerCtx,invo,meth,label) :- 
   CallGraphEdge(invo,callerCtx,meth,_),
   ParamToRetCondTaintSourceMethod(toIdx,fromIdx,cond_id,meth,label),
   TaintCondition(cond_id,srcIdx,srcTaintType),
   ActualParam(srcIdx,invo,src),
   FlowFrom(src,callerCtx,src_start,src_start_ctx,_),
   TaintStarts(src_start,src_start_ctx,srcTaintType),
   ActualReturn(toIdx,invo,target),
   ActualParam(fromIdx,invo,var).
in file main.dl [1308:1-1315:37])_");
if(!(rel_ActualReturn_8bc9db09e057aa22->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_TaintStarts_1fb2f244128dc60e->empty()) && !(rel_TaintCondition_7b1ddf0c7226422d->empty()) && !(rel_FlowFrom_0c9cf4995aeb9ef7->empty()) && !(rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843->empty()) && !(rel_ActualParam_b7a735170493e717->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt,rel_ActualReturn_8bc9db09e057aa22->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_FlowFrom_0c9cf4995aeb9ef7_op_ctxt,rel_FlowFrom_0c9cf4995aeb9ef7->createContext());
CREATE_OP_CONTEXT(rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843_op_ctxt,rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843->createContext());
CREATE_OP_CONTEXT(rel_TaintCondition_7b1ddf0c7226422d_op_ctxt,rel_TaintCondition_7b1ddf0c7226422d->createContext());
CREATE_OP_CONTEXT(rel_TaintStarts_1fb2f244128dc60e_op_ctxt,rel_TaintStarts_1fb2f244128dc60e->createContext());
CREATE_OP_CONTEXT(rel_TaintStartsTarget_b45151d0d1a25a24_op_ctxt,rel_TaintStartsTarget_b45151d0d1a25a24->createContext());
for(const auto& env0 : *rel_CallGraphEdge_333c9d69fed5eee7) {
auto range = rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843->lowerUpperRange_00010(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_TaintCondition_7b1ddf0c7226422d->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_TaintCondition_7b1ddf0c7226422d_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env2[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env2[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_FlowFrom_0c9cf4995aeb9ef7->lowerUpperRange_11000(Tuple<RamDomain,5>{{ramBitCast(env3[2]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env3[2]), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FlowFrom_0c9cf4995aeb9ef7_op_ctxt));
for(const auto& env4 : range) {
if( rel_TaintStarts_1fb2f244128dc60e->contains(Tuple<RamDomain,3>{{ramBitCast(env4[2]),ramBitCast(env4[3]),ramBitCast(env2[2])}},READ_OP_CONTEXT(rel_TaintStarts_1fb2f244128dc60e_op_ctxt))) {
auto range = rel_ActualReturn_8bc9db09e057aa22->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[0]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt));
for(const auto& env5 : range) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env6 : range) {
Tuple<RamDomain,7> tuple{{ramBitCast(env5[2]),ramBitCast(env0[1]),ramBitCast(env6[2]),ramBitCast(env0[1]),ramBitCast(env0[0]),ramBitCast(env0[2]),ramBitCast(env1[4])}};
rel_TaintStartsTarget_b45151d0d1a25a24->insert(tuple,READ_OP_CONTEXT(rel_TaintStartsTarget_b45151d0d1a25a24_op_ctxt));
}
}
break;
}
}
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\ttoCtx\tfrom\tfromCtx\tinvo\tmeth\tlabel"},{"auxArity","0"},{"name","TaintStartsTarget"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 7, \"params\": [\"to\", \"toCtx\", \"from\", \"fromCtx\", \"invo\", \"meth\", \"label\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 7, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\", \"s:Invocation\", \"s:Method\", \"s:symbol\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_TaintStartsTarget_b45151d0d1a25a24);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed->purge();
if (pruneImdtRels) rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843->purge();
if (pruneImdtRels) rel_ParamToRetTaintSourceMethod_54896442c7cf3fde->purge();
if (pruneImdtRels) rel_TaintCondition_7b1ddf0c7226422d->purge();
if (pruneImdtRels) rel_TaintStarts_1fb2f244128dc60e->purge();
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_Telemetry_FinalPreProcessingLeak_ce561854b736213d {
public:
 Stratum_Telemetry_FinalPreProcessingLeak_ce561854b736213d(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_NoTestData_38fc47759ae30ee9,t_btree_iiiiiiiiiiii__0_1_2_3_4_5_6_7_8_9_10_11__111111111111::Type& rel_Telemetry_FinalPreProcessingLeak_3e7f0db68d270037,t_btree_iiiiiiiiiiii__0_1_2_3_4_5_6_7_8_9_10_11__111111111111::Type& rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TestDataWithModel_2269d730f5799893,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel_NoTestData_38fc47759ae30ee9;
t_btree_iiiiiiiiiiii__0_1_2_3_4_5_6_7_8_9_10_11__111111111111::Type* rel_Telemetry_FinalPreProcessingLeak_3e7f0db68d270037;
t_btree_iiiiiiiiiiii__0_1_2_3_4_5_6_7_8_9_10_11__111111111111::Type* rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_TestDataWithModel_2269d730f5799893;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_ValOrTestDataWithModel_2810ba231c0c185a;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_Telemetry_FinalPreProcessingLeak_ce561854b736213d::Stratum_Telemetry_FinalPreProcessingLeak_ce561854b736213d(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_NoTestData_38fc47759ae30ee9,t_btree_iiiiiiiiiiii__0_1_2_3_4_5_6_7_8_9_10_11__111111111111::Type& rel_Telemetry_FinalPreProcessingLeak_3e7f0db68d270037,t_btree_iiiiiiiiiiii__0_1_2_3_4_5_6_7_8_9_10_11__111111111111::Type& rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TestDataWithModel_2269d730f5799893,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_NoTestData_38fc47759ae30ee9(&rel_NoTestData_38fc47759ae30ee9),
rel_Telemetry_FinalPreProcessingLeak_3e7f0db68d270037(&rel_Telemetry_FinalPreProcessingLeak_3e7f0db68d270037),
rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185(&rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185),
rel_TestDataWithModel_2269d730f5799893(&rel_TestDataWithModel_2269d730f5799893),
rel_ValOrTestDataWithModel_2810ba231c0c185a(&rel_ValOrTestDataWithModel_2810ba231c0c185a){
}

void Stratum_Telemetry_FinalPreProcessingLeak_ce561854b736213d::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(Telemetry_FinalPreProcessingLeak(trainModel,train,invo,meth,ctx2,testModel,test,invo2,meth2,ctx1,reduced_from_src,src) :- 
   Telemetry_PreProcessingLeak(trainModel,train,invo,meth,ctx2,testModel,test,invo2,meth2,ctx1,reduced_from_src,src),
   TestDataWithModel(testModel,test,invo2,meth2,ctx1).
in file main.dl [1335:1-1337:60])_");
if(!(rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185->empty()) && !(rel_TestDataWithModel_2269d730f5799893->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Telemetry_FinalPreProcessingLeak_3e7f0db68d270037_op_ctxt,rel_Telemetry_FinalPreProcessingLeak_3e7f0db68d270037->createContext());
CREATE_OP_CONTEXT(rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185_op_ctxt,rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185->createContext());
CREATE_OP_CONTEXT(rel_TestDataWithModel_2269d730f5799893_op_ctxt,rel_TestDataWithModel_2269d730f5799893->createContext());
for(const auto& env0 : *rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185) {
if( rel_TestDataWithModel_2269d730f5799893->contains(Tuple<RamDomain,5>{{ramBitCast(env0[5]),ramBitCast(env0[6]),ramBitCast(env0[7]),ramBitCast(env0[8]),ramBitCast(env0[9])}},READ_OP_CONTEXT(rel_TestDataWithModel_2269d730f5799893_op_ctxt))) {
Tuple<RamDomain,12> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4]),ramBitCast(env0[5]),ramBitCast(env0[6]),ramBitCast(env0[7]),ramBitCast(env0[8]),ramBitCast(env0[9]),ramBitCast(env0[10]),ramBitCast(env0[11])}};
rel_Telemetry_FinalPreProcessingLeak_3e7f0db68d270037->insert(tuple,READ_OP_CONTEXT(rel_Telemetry_FinalPreProcessingLeak_3e7f0db68d270037_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(Telemetry_FinalPreProcessingLeak(trainModel,train,invo,meth,ctx2,testModel,test,invo2,meth2,ctx1,reduced_from_src,src) :- 
   Telemetry_PreProcessingLeak(trainModel,train,invo,meth,ctx2,testModel,test,invo2,meth2,ctx1,reduced_from_src,src),
   ValOrTestDataWithModel(testModel,test,invo2,meth2,ctx1),
   NoTestData(trainModel,train,invo,meth,ctx2).
in file main.dl [1339:1-1342:53])_");
if(!(rel_ValOrTestDataWithModel_2810ba231c0c185a->empty()) && !(rel_NoTestData_38fc47759ae30ee9->empty()) && !(rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_NoTestData_38fc47759ae30ee9_op_ctxt,rel_NoTestData_38fc47759ae30ee9->createContext());
CREATE_OP_CONTEXT(rel_Telemetry_FinalPreProcessingLeak_3e7f0db68d270037_op_ctxt,rel_Telemetry_FinalPreProcessingLeak_3e7f0db68d270037->createContext());
CREATE_OP_CONTEXT(rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185_op_ctxt,rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185->createContext());
CREATE_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt,rel_ValOrTestDataWithModel_2810ba231c0c185a->createContext());
for(const auto& env0 : *rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185) {
if( rel_NoTestData_38fc47759ae30ee9->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_NoTestData_38fc47759ae30ee9_op_ctxt)) && rel_ValOrTestDataWithModel_2810ba231c0c185a->contains(Tuple<RamDomain,5>{{ramBitCast(env0[5]),ramBitCast(env0[6]),ramBitCast(env0[7]),ramBitCast(env0[8]),ramBitCast(env0[9])}},READ_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt))) {
Tuple<RamDomain,12> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4]),ramBitCast(env0[5]),ramBitCast(env0[6]),ramBitCast(env0[7]),ramBitCast(env0[8]),ramBitCast(env0[9]),ramBitCast(env0[10]),ramBitCast(env0[11])}};
rel_Telemetry_FinalPreProcessingLeak_3e7f0db68d270037->insert(tuple,READ_OP_CONTEXT(rel_Telemetry_FinalPreProcessingLeak_3e7f0db68d270037_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","trainModel\ttrain\ttrainInvo\ttrainMeth\tctx1\ttestModel\ttest\ttestInvo\ttestMeth\tctx2\tdes\tsrc"},{"auxArity","0"},{"name","Telemetry_FinalPreProcessingLeak"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 12, \"params\": [\"trainModel\", \"train\", \"trainInvo\", \"trainMeth\", \"ctx1\", \"testModel\", \"test\", \"testInvo\", \"testMeth\", \"ctx2\", \"des\", \"src\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 12, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\", \"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\", \"s:Var\", \"s:Var\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_Telemetry_FinalPreProcessingLeak_3e7f0db68d270037);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_Telemetry_ModelPair_2aeee8c5e53eeaca {
public:
 Stratum_Telemetry_ModelPair_2aeee8c5e53eeaca(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPairCandidate_9322881dca01d8da,t_btree_iiiiiiiiii__0_1_2_3_4_5_6_7_8_9__1111111111::Type& rel_Telemetry_ModelPair_f363adad3d285f6e,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a,t_btree_iiiiiiii__0_1_3_5_6_2_4_7__11010110__11111111::Type& rel__agg_subclause1_6b72bc2ad4593b7d);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__0_1_2_3__1111::Type* rel_ModelPairCandidate_9322881dca01d8da;
t_btree_iiiiiiiiii__0_1_2_3_4_5_6_7_8_9__1111111111::Type* rel_Telemetry_ModelPair_f363adad3d285f6e;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_TrainingDataWithModel_bf0078ce702b39b8;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_ValOrTestDataWithModel_2810ba231c0c185a;
t_btree_iiiiiiii__0_1_3_5_6_2_4_7__11010110__11111111::Type* rel__agg_subclause1_6b72bc2ad4593b7d;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_Telemetry_ModelPair_2aeee8c5e53eeaca::Stratum_Telemetry_ModelPair_2aeee8c5e53eeaca(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPairCandidate_9322881dca01d8da,t_btree_iiiiiiiiii__0_1_2_3_4_5_6_7_8_9__1111111111::Type& rel_Telemetry_ModelPair_f363adad3d285f6e,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a,t_btree_iiiiiiii__0_1_3_5_6_2_4_7__11010110__11111111::Type& rel__agg_subclause1_6b72bc2ad4593b7d):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_ModelPairCandidate_9322881dca01d8da(&rel_ModelPairCandidate_9322881dca01d8da),
rel_Telemetry_ModelPair_f363adad3d285f6e(&rel_Telemetry_ModelPair_f363adad3d285f6e),
rel_TrainingDataWithModel_bf0078ce702b39b8(&rel_TrainingDataWithModel_bf0078ce702b39b8),
rel_ValOrTestDataWithModel_2810ba231c0c185a(&rel_ValOrTestDataWithModel_2810ba231c0c185a),
rel__agg_subclause1_6b72bc2ad4593b7d(&rel__agg_subclause1_6b72bc2ad4593b7d){
}

void Stratum_Telemetry_ModelPair_2aeee8c5e53eeaca::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(Telemetry_ModelPair(trainModel,train,invo2,meth2,ctx2,testModel,test,invo1,meth1,ctx1) :- 
   ModelPairCandidate(testModel,ctx1,trainModel,ctx2),
   ValOrTestDataWithModel(testModel,test,invo1,meth1,ctx1),
   TrainingDataWithModel(trainModel,train,invo2,meth2,ctx2),
   0 = count : { __agg_subclause1(ctx1,ctx2,+underscore_592,invo2,+underscore_593,testModel,trainModel,+underscore_594) }.
in file main.dl [1278:1-1284:12])_");
if(!(rel_ValOrTestDataWithModel_2810ba231c0c185a->empty()) && !(rel_TrainingDataWithModel_bf0078ce702b39b8->empty()) && !(rel_ModelPairCandidate_9322881dca01d8da->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ModelPairCandidate_9322881dca01d8da_op_ctxt,rel_ModelPairCandidate_9322881dca01d8da->createContext());
CREATE_OP_CONTEXT(rel_Telemetry_ModelPair_f363adad3d285f6e_op_ctxt,rel_Telemetry_ModelPair_f363adad3d285f6e->createContext());
CREATE_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt,rel_TrainingDataWithModel_bf0078ce702b39b8->createContext());
CREATE_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt,rel_ValOrTestDataWithModel_2810ba231c0c185a->createContext());
CREATE_OP_CONTEXT(rel__agg_subclause1_6b72bc2ad4593b7d_op_ctxt,rel__agg_subclause1_6b72bc2ad4593b7d->createContext());
for(const auto& env0 : *rel_ModelPairCandidate_9322881dca01d8da) {
auto range = rel_ValOrTestDataWithModel_2810ba231c0c185a->lowerUpperRange_10001(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_TrainingDataWithModel_bf0078ce702b39b8->lowerUpperRange_10001(Tuple<RamDomain,5>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[3])}},Tuple<RamDomain,5>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,1> env3;
bool shouldRunNested = true;
RamSigned res0 = 0;
auto range = rel__agg_subclause1_6b72bc2ad4593b7d->lowerUpperRange_11010110(Tuple<RamDomain,8>{{ramBitCast(env0[1]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env2[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,8>{{ramBitCast(env0[1]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env2[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel__agg_subclause1_6b72bc2ad4593b7d_op_ctxt));
for(const auto& env3 : range) {
if( true) {
shouldRunNested = true;
++res0
;}
}
env3[0] = ramBitCast(res0);
if (shouldRunNested) {
if( (ramBitCast<RamDomain>(RamSigned(0)) == ramBitCast<RamDomain>(env3[0]))) {
Tuple<RamDomain,10> tuple{{ramBitCast(env0[2]),ramBitCast(env2[1]),ramBitCast(env2[2]),ramBitCast(env2[3]),ramBitCast(env0[3]),ramBitCast(env0[0]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env0[1])}};
rel_Telemetry_ModelPair_f363adad3d285f6e->insert(tuple,READ_OP_CONTEXT(rel_Telemetry_ModelPair_f363adad3d285f6e_op_ctxt));
}
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","testModel\ttest\tinvo\tmeth\tctx1\ttrainModel\ttrain\tinvo2\tmeth2\tctx2"},{"auxArity","0"},{"name","Telemetry_ModelPair"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 10, \"params\": [\"testModel\", \"test\", \"invo\", \"meth\", \"ctx1\", \"trainModel\", \"train\", \"invo2\", \"meth2\", \"ctx2\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 10, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\", \"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_Telemetry_ModelPair_f363adad3d285f6e);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel__agg_subclause1_6b72bc2ad4593b7d->purge();
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_Telemetry_MultiUseTestLeak_84017fb29a9015b4 {
public:
 Stratum_Telemetry_MultiUseTestLeak_84017fb29a9015b4(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_DataOverlap_5a4300eece6cb523,t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type& rel_FlowFromExtended_7fd58681b534e204,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_ScoredDataWithModel_55bb6aafc5a52e34,t_btree_iiiiiiiiii__0_1_2_3_4_5_6_7_8_9__1111111111::Type& rel_Telemetry_MultiUseTestLeak_f37504d03b612c98);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__0_1_2_3__1111::Type* rel_DataOverlap_5a4300eece6cb523;
t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type* rel_FlowFromExtended_7fd58681b534e204;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel_ScoredDataWithModel_55bb6aafc5a52e34;
t_btree_iiiiiiiiii__0_1_2_3_4_5_6_7_8_9__1111111111::Type* rel_Telemetry_MultiUseTestLeak_f37504d03b612c98;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_Telemetry_MultiUseTestLeak_84017fb29a9015b4::Stratum_Telemetry_MultiUseTestLeak_84017fb29a9015b4(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_DataOverlap_5a4300eece6cb523,t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type& rel_FlowFromExtended_7fd58681b534e204,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_ScoredDataWithModel_55bb6aafc5a52e34,t_btree_iiiiiiiiii__0_1_2_3_4_5_6_7_8_9__1111111111::Type& rel_Telemetry_MultiUseTestLeak_f37504d03b612c98):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_DataOverlap_5a4300eece6cb523(&rel_DataOverlap_5a4300eece6cb523),
rel_FlowFromExtended_7fd58681b534e204(&rel_FlowFromExtended_7fd58681b534e204),
rel_ScoredDataWithModel_55bb6aafc5a52e34(&rel_ScoredDataWithModel_55bb6aafc5a52e34),
rel_Telemetry_MultiUseTestLeak_f37504d03b612c98(&rel_Telemetry_MultiUseTestLeak_f37504d03b612c98){
}

void Stratum_Telemetry_MultiUseTestLeak_84017fb29a9015b4::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(Telemetry_MultiUseTestLeak(testModel,test,invo,meth,ctx1,testModel2,test2,invo2,meth2,ctx2) :- 
   ScoredDataWithModel(testModel,test,invo,meth,ctx1),
   ScoredDataWithModel(testModel2,test2,invo2,meth2,ctx2),
   DataOverlap(test,ctx1,test2,ctx2),
   !FlowFromExtended(testModel,ctx1,testModel2,ctx2,_),
   !FlowFromExtended(testModel2,ctx2,testModel,ctx1,_).
in file main.dl [1415:1-1422:61])_");
if(!(rel_DataOverlap_5a4300eece6cb523->empty()) && !(rel_ScoredDataWithModel_55bb6aafc5a52e34->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt,rel_DataOverlap_5a4300eece6cb523->createContext());
CREATE_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt,rel_FlowFromExtended_7fd58681b534e204->createContext());
CREATE_OP_CONTEXT(rel_ScoredDataWithModel_55bb6aafc5a52e34_op_ctxt,rel_ScoredDataWithModel_55bb6aafc5a52e34->createContext());
CREATE_OP_CONTEXT(rel_Telemetry_MultiUseTestLeak_f37504d03b612c98_op_ctxt,rel_Telemetry_MultiUseTestLeak_f37504d03b612c98->createContext());
for(const auto& env0 : *rel_ScoredDataWithModel_55bb6aafc5a52e34) {
for(const auto& env1 : *rel_ScoredDataWithModel_55bb6aafc5a52e34) {
if( rel_DataOverlap_5a4300eece6cb523->contains(Tuple<RamDomain,4>{{ramBitCast(env0[1]),ramBitCast(env0[4]),ramBitCast(env1[1]),ramBitCast(env1[4])}},READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt)) && !(!rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_11110(Tuple<RamDomain,5>{{ramBitCast(env1[0]), ramBitCast(env1[4]), ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env1[0]), ramBitCast(env1[4]), ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt)).empty()) && !(!rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_11110(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast(env1[0]), ramBitCast(env1[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast(env1[0]), ramBitCast(env1[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt)).empty())) {
Tuple<RamDomain,10> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4]),ramBitCast(env1[0]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env1[4])}};
rel_Telemetry_MultiUseTestLeak_f37504d03b612c98->insert(tuple,READ_OP_CONTEXT(rel_Telemetry_MultiUseTestLeak_f37504d03b612c98_op_ctxt));
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","testModel\ttest\ttestInvo\ttestMeth\tctx1\ttestModel2\ttest2\ttestInvo2\ttestMeth2\tctx2"},{"auxArity","0"},{"name","Telemetry_MultiUseTestLeak"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 10, \"params\": [\"testModel\", \"test\", \"testInvo\", \"testMeth\", \"ctx1\", \"testModel2\", \"test2\", \"testInvo2\", \"testMeth2\", \"ctx2\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 10, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\", \"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_Telemetry_MultiUseTestLeak_f37504d03b612c98);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_Telemetry_OverlapLeak_206a9290ce6c9410 {
public:
 Stratum_Telemetry_OverlapLeak_206a9290ce6c9410(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_DataOverlap_5a4300eece6cb523,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPair_a5a4124c4969f589,t_btree_iiiiiiiiii__0_4_5_6_7_8_9_1_2_3__1111111111__1000111111::Type& rel_Telemetry_OverlapLeak_d0dea07db73811e8,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__0_1_2_3__1111::Type* rel_DataOverlap_5a4300eece6cb523;
t_btree_iiii__0_1_2_3__1111::Type* rel_ModelPair_a5a4124c4969f589;
t_btree_iiiiiiiiii__0_4_5_6_7_8_9_1_2_3__1111111111__1000111111::Type* rel_Telemetry_OverlapLeak_d0dea07db73811e8;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_TrainingDataWithModel_bf0078ce702b39b8;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_ValOrTestDataWithModel_2810ba231c0c185a;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_Telemetry_OverlapLeak_206a9290ce6c9410::Stratum_Telemetry_OverlapLeak_206a9290ce6c9410(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_DataOverlap_5a4300eece6cb523,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPair_a5a4124c4969f589,t_btree_iiiiiiiiii__0_4_5_6_7_8_9_1_2_3__1111111111__1000111111::Type& rel_Telemetry_OverlapLeak_d0dea07db73811e8,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_DataOverlap_5a4300eece6cb523(&rel_DataOverlap_5a4300eece6cb523),
rel_ModelPair_a5a4124c4969f589(&rel_ModelPair_a5a4124c4969f589),
rel_Telemetry_OverlapLeak_d0dea07db73811e8(&rel_Telemetry_OverlapLeak_d0dea07db73811e8),
rel_TrainingDataWithModel_bf0078ce702b39b8(&rel_TrainingDataWithModel_bf0078ce702b39b8),
rel_ValOrTestDataWithModel_2810ba231c0c185a(&rel_ValOrTestDataWithModel_2810ba231c0c185a){
}

void Stratum_Telemetry_OverlapLeak_206a9290ce6c9410::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(Telemetry_OverlapLeak(trainModel,train,invo,meth,ctx1,testModel,test,invo2,meth2,ctx2) :- 
   TrainingDataWithModel(trainModel,train,invo,meth,ctx1),
   ValOrTestDataWithModel(testModel,test,invo2,meth2,ctx2),
   DataOverlap(train,ctx1,test,ctx2),
   ModelPair(testModel,ctx1,trainModel,ctx2).
in file main.dl [1353:1-1359:50])_");
if(!(rel_ValOrTestDataWithModel_2810ba231c0c185a->empty()) && !(rel_DataOverlap_5a4300eece6cb523->empty()) && !(rel_TrainingDataWithModel_bf0078ce702b39b8->empty()) && !(rel_ModelPair_a5a4124c4969f589->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt,rel_DataOverlap_5a4300eece6cb523->createContext());
CREATE_OP_CONTEXT(rel_ModelPair_a5a4124c4969f589_op_ctxt,rel_ModelPair_a5a4124c4969f589->createContext());
CREATE_OP_CONTEXT(rel_Telemetry_OverlapLeak_d0dea07db73811e8_op_ctxt,rel_Telemetry_OverlapLeak_d0dea07db73811e8->createContext());
CREATE_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt,rel_TrainingDataWithModel_bf0078ce702b39b8->createContext());
CREATE_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt,rel_ValOrTestDataWithModel_2810ba231c0c185a->createContext());
for(const auto& env0 : *rel_TrainingDataWithModel_bf0078ce702b39b8) {
for(const auto& env1 : *rel_ValOrTestDataWithModel_2810ba231c0c185a) {
if( rel_ModelPair_a5a4124c4969f589->contains(Tuple<RamDomain,4>{{ramBitCast(env1[0]),ramBitCast(env0[4]),ramBitCast(env0[0]),ramBitCast(env1[4])}},READ_OP_CONTEXT(rel_ModelPair_a5a4124c4969f589_op_ctxt)) && rel_DataOverlap_5a4300eece6cb523->contains(Tuple<RamDomain,4>{{ramBitCast(env0[1]),ramBitCast(env0[4]),ramBitCast(env1[1]),ramBitCast(env1[4])}},READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt))) {
Tuple<RamDomain,10> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4]),ramBitCast(env1[0]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env1[4])}};
rel_Telemetry_OverlapLeak_d0dea07db73811e8->insert(tuple,READ_OP_CONTEXT(rel_Telemetry_OverlapLeak_d0dea07db73811e8_op_ctxt));
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","trainModel\ttrain\ttrainInvo\ttrainMeth\tctx1\ttestModel\ttest\ttestInvo\ttestMeth\tctx2"},{"auxArity","0"},{"name","Telemetry_OverlapLeak"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 10, \"params\": [\"trainModel\", \"train\", \"trainInvo\", \"trainMeth\", \"ctx1\", \"testModel\", \"test\", \"testInvo\", \"testMeth\", \"ctx2\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 10, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\", \"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_Telemetry_OverlapLeak_d0dea07db73811e8);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_Telemetry_PreProcessingLeak_d22f9960afcc7bb1 {
public:
 Stratum_Telemetry_PreProcessingLeak_d22f9960afcc7bb1(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_DataOverlap_5a4300eece6cb523,t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type& rel_FlowFromExtended_7fd58681b534e204,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPair_a5a4124c4969f589,t_btree_iiii__0_1_2_3__1111::Type& rel_ReduceEdge_70a6ab3f2a478ff1,t_btree_iiiiiiiiiiii__0_1_2_3_4_5_6_7_8_9_10_11__111111111111::Type& rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__0_1_2_3__1111::Type* rel_DataOverlap_5a4300eece6cb523;
t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type* rel_FlowFromExtended_7fd58681b534e204;
t_btree_iiii__0_1_2_3__1111::Type* rel_ModelPair_a5a4124c4969f589;
t_btree_iiii__0_1_2_3__1111::Type* rel_ReduceEdge_70a6ab3f2a478ff1;
t_btree_iiiiiiiiiiii__0_1_2_3_4_5_6_7_8_9_10_11__111111111111::Type* rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_TrainingDataWithModel_bf0078ce702b39b8;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_ValOrTestDataWithModel_2810ba231c0c185a;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_Telemetry_PreProcessingLeak_d22f9960afcc7bb1::Stratum_Telemetry_PreProcessingLeak_d22f9960afcc7bb1(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_DataOverlap_5a4300eece6cb523,t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type& rel_FlowFromExtended_7fd58681b534e204,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPair_a5a4124c4969f589,t_btree_iiii__0_1_2_3__1111::Type& rel_ReduceEdge_70a6ab3f2a478ff1,t_btree_iiiiiiiiiiii__0_1_2_3_4_5_6_7_8_9_10_11__111111111111::Type& rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_DataOverlap_5a4300eece6cb523(&rel_DataOverlap_5a4300eece6cb523),
rel_FlowFromExtended_7fd58681b534e204(&rel_FlowFromExtended_7fd58681b534e204),
rel_ModelPair_a5a4124c4969f589(&rel_ModelPair_a5a4124c4969f589),
rel_ReduceEdge_70a6ab3f2a478ff1(&rel_ReduceEdge_70a6ab3f2a478ff1),
rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185(&rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185),
rel_TrainingDataWithModel_bf0078ce702b39b8(&rel_TrainingDataWithModel_bf0078ce702b39b8),
rel_ValOrTestDataWithModel_2810ba231c0c185a(&rel_ValOrTestDataWithModel_2810ba231c0c185a){
}

void Stratum_Telemetry_PreProcessingLeak_d22f9960afcc7bb1::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(Telemetry_PreProcessingLeak(trainModel,train,invo,meth,ctx2,testModel,test,invo2,meth2,ctx1,reduced_from_src,src) :- 
   TrainingDataWithModel(trainModel,train,invo,meth,ctx2),
   ValOrTestDataWithModel(testModel,test,invo2,meth2,ctx1),
   ModelPair(testModel,ctx1,trainModel,ctx2),
   !DataOverlap(test,ctx1,train,ctx2),
   ReduceEdge(reduced_from_src,r_ctx,src,src_ctx),
   FlowFromExtended(train,ctx2,reduced_from_src,r_ctx,_),
   DataOverlap(test,ctx1,src,src_ctx).
in file main.dl [1324:1-1332:43])_");
if(!(rel_ValOrTestDataWithModel_2810ba231c0c185a->empty()) && !(rel_DataOverlap_5a4300eece6cb523->empty()) && !(rel_ModelPair_a5a4124c4969f589->empty()) && !(rel_ReduceEdge_70a6ab3f2a478ff1->empty()) && !(rel_TrainingDataWithModel_bf0078ce702b39b8->empty()) && !(rel_FlowFromExtended_7fd58681b534e204->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt,rel_DataOverlap_5a4300eece6cb523->createContext());
CREATE_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt,rel_FlowFromExtended_7fd58681b534e204->createContext());
CREATE_OP_CONTEXT(rel_ModelPair_a5a4124c4969f589_op_ctxt,rel_ModelPair_a5a4124c4969f589->createContext());
CREATE_OP_CONTEXT(rel_ReduceEdge_70a6ab3f2a478ff1_op_ctxt,rel_ReduceEdge_70a6ab3f2a478ff1->createContext());
CREATE_OP_CONTEXT(rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185_op_ctxt,rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185->createContext());
CREATE_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt,rel_TrainingDataWithModel_bf0078ce702b39b8->createContext());
CREATE_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt,rel_ValOrTestDataWithModel_2810ba231c0c185a->createContext());
for(const auto& env0 : *rel_TrainingDataWithModel_bf0078ce702b39b8) {
for(const auto& env1 : *rel_ValOrTestDataWithModel_2810ba231c0c185a) {
if( rel_ModelPair_a5a4124c4969f589->contains(Tuple<RamDomain,4>{{ramBitCast(env1[0]),ramBitCast(env1[4]),ramBitCast(env0[0]),ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_ModelPair_a5a4124c4969f589_op_ctxt)) && !(rel_DataOverlap_5a4300eece6cb523->contains(Tuple<RamDomain,4>{{ramBitCast(env1[1]),ramBitCast(env1[4]),ramBitCast(env0[1]),ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt)))) {
for(const auto& env2 : *rel_ReduceEdge_70a6ab3f2a478ff1) {
if( !rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_11110(Tuple<RamDomain,5>{{ramBitCast(env0[1]), ramBitCast(env0[4]), ramBitCast(env2[0]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env0[1]), ramBitCast(env0[4]), ramBitCast(env2[0]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt)).empty() && rel_DataOverlap_5a4300eece6cb523->contains(Tuple<RamDomain,4>{{ramBitCast(env1[1]),ramBitCast(env1[4]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt))) {
Tuple<RamDomain,12> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4]),ramBitCast(env1[0]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env1[4]),ramBitCast(env2[0]),ramBitCast(env2[2])}};
rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185->insert(tuple,READ_OP_CONTEXT(rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(Telemetry_PreProcessingLeak(trainModel,train,invo,meth,ctx2,testModel,test,invo2,meth2,ctx1,reduced_from_src,src) :- 
   TrainingDataWithModel(trainModel,train,invo,meth,ctx2),
   ValOrTestDataWithModel(testModel,test,invo2,meth2,ctx1),
   ModelPair(testModel,ctx1,trainModel,ctx2),
   !DataOverlap(test,ctx1,train,ctx2),
   ReduceEdge(reduced_from_src,r_ctx,src,src_ctx),
   FlowFromExtended(test,ctx1,reduced_from_src,r_ctx,_),
   DataOverlap(test,ctx1,src,src_ctx).
in file main.dl [1324:1-1332:43])_");
if(!(rel_ValOrTestDataWithModel_2810ba231c0c185a->empty()) && !(rel_DataOverlap_5a4300eece6cb523->empty()) && !(rel_ModelPair_a5a4124c4969f589->empty()) && !(rel_ReduceEdge_70a6ab3f2a478ff1->empty()) && !(rel_TrainingDataWithModel_bf0078ce702b39b8->empty()) && !(rel_FlowFromExtended_7fd58681b534e204->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt,rel_DataOverlap_5a4300eece6cb523->createContext());
CREATE_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt,rel_FlowFromExtended_7fd58681b534e204->createContext());
CREATE_OP_CONTEXT(rel_ModelPair_a5a4124c4969f589_op_ctxt,rel_ModelPair_a5a4124c4969f589->createContext());
CREATE_OP_CONTEXT(rel_ReduceEdge_70a6ab3f2a478ff1_op_ctxt,rel_ReduceEdge_70a6ab3f2a478ff1->createContext());
CREATE_OP_CONTEXT(rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185_op_ctxt,rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185->createContext());
CREATE_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt,rel_TrainingDataWithModel_bf0078ce702b39b8->createContext());
CREATE_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt,rel_ValOrTestDataWithModel_2810ba231c0c185a->createContext());
for(const auto& env0 : *rel_TrainingDataWithModel_bf0078ce702b39b8) {
for(const auto& env1 : *rel_ValOrTestDataWithModel_2810ba231c0c185a) {
if( rel_ModelPair_a5a4124c4969f589->contains(Tuple<RamDomain,4>{{ramBitCast(env1[0]),ramBitCast(env1[4]),ramBitCast(env0[0]),ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_ModelPair_a5a4124c4969f589_op_ctxt)) && !(rel_DataOverlap_5a4300eece6cb523->contains(Tuple<RamDomain,4>{{ramBitCast(env1[1]),ramBitCast(env1[4]),ramBitCast(env0[1]),ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt)))) {
for(const auto& env2 : *rel_ReduceEdge_70a6ab3f2a478ff1) {
if( !rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_11110(Tuple<RamDomain,5>{{ramBitCast(env1[1]), ramBitCast(env1[4]), ramBitCast(env2[0]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env1[1]), ramBitCast(env1[4]), ramBitCast(env2[0]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt)).empty() && rel_DataOverlap_5a4300eece6cb523->contains(Tuple<RamDomain,4>{{ramBitCast(env1[1]),ramBitCast(env1[4]),ramBitCast(env2[2]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt))) {
Tuple<RamDomain,12> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4]),ramBitCast(env1[0]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env1[4]),ramBitCast(env2[0]),ramBitCast(env2[2])}};
rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185->insert(tuple,READ_OP_CONTEXT(rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185_op_ctxt));
}
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","trainModel\ttrain\ttrainInvo\ttrainMeth\tctx1\ttestModel\ttest\ttestInvo\ttestMeth\tctx2\tdes\tsrc"},{"auxArity","0"},{"name","Telemetry_PreProcessingLeak"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 12, \"params\": [\"trainModel\", \"train\", \"trainInvo\", \"trainMeth\", \"ctx1\", \"testModel\", \"test\", \"testInvo\", \"testMeth\", \"ctx2\", \"des\", \"src\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 12, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\", \"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\", \"s:Var\", \"s:Var\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_ReduceEdge_70a6ab3f2a478ff1->purge();
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_TestData_87ae0dc102c223ab {
public:
 Stratum_TestData_87ae0dc102c223ab(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iii__0_1_2__111::Type& rel_TestData_cd6b712f9b1db6bc);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_Invoke_d61c77705bff35b0;
t_btree_iii__0_1_2__111::Type* rel_TestData_cd6b712f9b1db6bc;
std::vector<std::regex> regexes;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_TestData_87ae0dc102c223ab::Stratum_TestData_87ae0dc102c223ab(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iii__0_1_2__111::Type& rel_TestData_cd6b712f9b1db6bc):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_Invoke_d61c77705bff35b0(&rel_Invoke_d61c77705bff35b0),
rel_TestData_cd6b712f9b1db6bc(&rel_TestData_cd6b712f9b1db6bc),
regexes({
	std::regex(".*[.](predict|score|evaluate|predict_proba)"),
}){
}

void Stratum_TestData_87ae0dc102c223ab::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(TestData(meth,0,1) :- 
   Invoke(_,meth,_),
   match(".*[.](predict|score|evaluate|predict_proba)", meth).
in file main.dl [572:1-574:64])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_TestData_cd6b712f9b1db6bc_op_ctxt,rel_TestData_cd6b712f9b1db6bc->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(0))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1))}};
rel_TestData_cd6b712f9b1db6bc->insert(tuple,READ_OP_CONTEXT(rel_TestData_cd6b712f9b1db6bc_op_ctxt));
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_TestDataWithModel_36b480b8efbba72d {
public:
 Stratum_TestDataWithModel_36b480b8efbba72d(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TestDataWithModel_2269d730f5799893,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_ValDataWithModel_ef5cc7d0fb594fa5,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_TestDataWithModel_2269d730f5799893;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel_ValDataWithModel_ef5cc7d0fb594fa5;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_ValOrTestDataWithModel_2810ba231c0c185a;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_TestDataWithModel_36b480b8efbba72d::Stratum_TestDataWithModel_36b480b8efbba72d(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TestDataWithModel_2269d730f5799893,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_ValDataWithModel_ef5cc7d0fb594fa5,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_TestDataWithModel_2269d730f5799893(&rel_TestDataWithModel_2269d730f5799893),
rel_ValDataWithModel_ef5cc7d0fb594fa5(&rel_ValDataWithModel_ef5cc7d0fb594fa5),
rel_ValOrTestDataWithModel_2810ba231c0c185a(&rel_ValOrTestDataWithModel_2810ba231c0c185a){
}

void Stratum_TestDataWithModel_36b480b8efbba72d::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(TestDataWithModel(model,test,invo,meth,ctx) :- 
   ValOrTestDataWithModel(model,test,invo,meth,ctx),
   !ValDataWithModel(model,test,invo,meth,ctx).
in file main.dl [1237:1-1239:53])_");
if(!(rel_ValOrTestDataWithModel_2810ba231c0c185a->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_TestDataWithModel_2269d730f5799893_op_ctxt,rel_TestDataWithModel_2269d730f5799893->createContext());
CREATE_OP_CONTEXT(rel_ValDataWithModel_ef5cc7d0fb594fa5_op_ctxt,rel_ValDataWithModel_ef5cc7d0fb594fa5->createContext());
CREATE_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt,rel_ValOrTestDataWithModel_2810ba231c0c185a->createContext());
for(const auto& env0 : *rel_ValOrTestDataWithModel_2810ba231c0c185a) {
if( !(rel_ValDataWithModel_ef5cc7d0fb594fa5->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_ValDataWithModel_ef5cc7d0fb594fa5_op_ctxt)))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_TestDataWithModel_2269d730f5799893->insert(tuple,READ_OP_CONTEXT(rel_TestDataWithModel_2269d730f5799893_op_ctxt));
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","model\ttest\tinvo\tmeth\tctx"},{"auxArity","0"},{"name","TestDataWithModel"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"model\", \"test\", \"invo\", \"meth\", \"ctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_TestDataWithModel_2269d730f5799893);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_TorchModelWithData_afcc33b424de2b88 {
public:
 Stratum_TorchModelWithData_afcc33b424de2b88(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualParam_b7a735170493e717,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_ii__0_1__11::Type& rel_SubType_1b987a9db6ba7d57,t_btree_iiii__0_1_2_3__1111::Type& rel_TorchModelWithData_3bc4694c9032b02a,t_btree_ii__1_0__0__11__10__01::Type& rel_VarType_28c8217e193eb319);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__1__0_1_2__010__100__110__111::Type* rel_ActualParam_b7a735170493e717;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_Invoke_d61c77705bff35b0;
t_btree_ii__0_1__11::Type* rel_SubType_1b987a9db6ba7d57;
t_btree_iiii__0_1_2_3__1111::Type* rel_TorchModelWithData_3bc4694c9032b02a;
t_btree_ii__1_0__0__11__10__01::Type* rel_VarType_28c8217e193eb319;
std::vector<std::regex> regexes;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_TorchModelWithData_afcc33b424de2b88::Stratum_TorchModelWithData_afcc33b424de2b88(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualParam_b7a735170493e717,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_ii__0_1__11::Type& rel_SubType_1b987a9db6ba7d57,t_btree_iiii__0_1_2_3__1111::Type& rel_TorchModelWithData_3bc4694c9032b02a,t_btree_ii__1_0__0__11__10__01::Type& rel_VarType_28c8217e193eb319):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_ActualParam_b7a735170493e717(&rel_ActualParam_b7a735170493e717),
rel_Invoke_d61c77705bff35b0(&rel_Invoke_d61c77705bff35b0),
rel_SubType_1b987a9db6ba7d57(&rel_SubType_1b987a9db6ba7d57),
rel_TorchModelWithData_3bc4694c9032b02a(&rel_TorchModelWithData_3bc4694c9032b02a),
rel_VarType_28c8217e193eb319(&rel_VarType_28c8217e193eb319),
regexes({
	std::regex(".*[.](forward)"),
}){
}

void Stratum_TorchModelWithData_afcc33b424de2b88::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(TorchModelWithData(model,data,invo,meth) :- 
   Invoke(invo,meth,_),
   match(".*[.](forward)", meth),
   ActualParam(0,invo,model),
   ActualParam(1,invo,data).
in file main.dl [1243:1-1247:32])_");
if(!(rel_ActualParam_b7a735170493e717->empty()) && !(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_TorchModelWithData_3bc4694c9032b02a_op_ctxt,rel_TorchModelWithData_3bc4694c9032b02a->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(0))) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(RamSigned(0)), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(0)), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(RamSigned(1)), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(1)), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[2]),ramBitCast(env2[2]),ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_TorchModelWithData_3bc4694c9032b02a->insert(tuple,READ_OP_CONTEXT(rel_TorchModelWithData_3bc4694c9032b02a_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(TorchModelWithData(model,data,invo,meth) :- 
   Invoke(invo,meth,_),
   model = as(meth, Var),
   VarType(model,subtype),
   SubType(subtype,"Module"),
   ActualParam(1,invo,data).
in file main.dl [1249:1-1254:32])_");
if(!(rel_VarType_28c8217e193eb319->empty()) && !(rel_SubType_1b987a9db6ba7d57->empty()) && !(rel_Invoke_d61c77705bff35b0->empty()) && !(rel_ActualParam_b7a735170493e717->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_SubType_1b987a9db6ba7d57_op_ctxt,rel_SubType_1b987a9db6ba7d57->createContext());
CREATE_OP_CONTEXT(rel_TorchModelWithData_3bc4694c9032b02a_op_ctxt,rel_TorchModelWithData_3bc4694c9032b02a->createContext());
CREATE_OP_CONTEXT(rel_VarType_28c8217e193eb319_op_ctxt,rel_VarType_28c8217e193eb319->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
auto range = rel_VarType_28c8217e193eb319->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarType_28c8217e193eb319_op_ctxt));
for(const auto& env1 : range) {
if( rel_SubType_1b987a9db6ba7d57->contains(Tuple<RamDomain,2>{{ramBitCast(env1[1]),ramBitCast(RamSigned(47))}},READ_OP_CONTEXT(rel_SubType_1b987a9db6ba7d57_op_ctxt))) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(RamSigned(1)), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(1)), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple{{ramBitCast(env1[0]),ramBitCast(env2[2]),ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_TorchModelWithData_3bc4694c9032b02a->insert(tuple,READ_OP_CONTEXT(rel_TorchModelWithData_3bc4694c9032b02a_op_ctxt));
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","model\ttrain\tinvo\tmeth"},{"auxArity","0"},{"name","TorchModelWithData"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"model\", \"train\", \"invo\", \"meth\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_TorchModelWithData_3bc4694c9032b02a);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_SubType_1b987a9db6ba7d57->purge();
if (pruneImdtRels) rel_VarType_28c8217e193eb319->purge();
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_TrainingData_11ddc884eb156ccf {
public:
 Stratum_TrainingData_11ddc884eb156ccf(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iii__0_1_2__111::Type& rel_TrainingData_276ec139200837ac);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_Invoke_d61c77705bff35b0;
t_btree_iii__0_1_2__111::Type* rel_TrainingData_276ec139200837ac;
std::vector<std::regex> regexes;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_TrainingData_11ddc884eb156ccf::Stratum_TrainingData_11ddc884eb156ccf(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iii__0_1_2__111::Type& rel_TrainingData_276ec139200837ac):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_Invoke_d61c77705bff35b0(&rel_Invoke_d61c77705bff35b0),
rel_TrainingData_276ec139200837ac(&rel_TrainingData_276ec139200837ac),
regexes({
	std::regex(".*[.](fit|fit_generator)"),
}){
}

void Stratum_TrainingData_11ddc884eb156ccf::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(TrainingData(meth,0,1) :- 
   Invoke(_,meth,_),
   match(".*[.](fit|fit_generator)", meth).
in file main.dl [568:1-570:45])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_TrainingData_276ec139200837ac_op_ctxt,rel_TrainingData_276ec139200837ac->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(0))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1))}};
rel_TrainingData_276ec139200837ac->insert(tuple,READ_OP_CONTEXT(rel_TrainingData_276ec139200837ac_op_ctxt));
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_TrainingDataWithModel_027fac07f1e7b905 {
public:
 Stratum_TrainingDataWithModel_027fac07f1e7b905(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualParam_b7a735170493e717,t_btree_iii__1_0_2__010__110__111::Type& rel_ActualReturn_8bc9db09e057aa22,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_i__0__1::Type& rel_FilteredTrainingMethod_abcda1d07db43c94,t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type& rel_FlowFromExtended_7fd58681b534e204,t_btree_iiii__0_1_2_3__1111::Type& rel_TorchModelWithData_3bc4694c9032b02a,t_btree_iii__0_1_2__111::Type& rel_TrainingData_276ec139200837ac,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__1__0_1_2__010__100__110__111::Type* rel_ActualParam_b7a735170493e717;
t_btree_iii__1_0_2__010__110__111::Type* rel_ActualReturn_8bc9db09e057aa22;
t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type* rel_CallGraphEdge_333c9d69fed5eee7;
t_btree_i__0__1::Type* rel_FilteredTrainingMethod_abcda1d07db43c94;
t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type* rel_FlowFromExtended_7fd58681b534e204;
t_btree_iiii__0_1_2_3__1111::Type* rel_TorchModelWithData_3bc4694c9032b02a;
t_btree_iii__0_1_2__111::Type* rel_TrainingData_276ec139200837ac;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_TrainingDataWithModel_bf0078ce702b39b8;
std::vector<std::regex> regexes;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_TrainingDataWithModel_027fac07f1e7b905::Stratum_TrainingDataWithModel_027fac07f1e7b905(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualParam_b7a735170493e717,t_btree_iii__1_0_2__010__110__111::Type& rel_ActualReturn_8bc9db09e057aa22,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_i__0__1::Type& rel_FilteredTrainingMethod_abcda1d07db43c94,t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type& rel_FlowFromExtended_7fd58681b534e204,t_btree_iiii__0_1_2_3__1111::Type& rel_TorchModelWithData_3bc4694c9032b02a,t_btree_iii__0_1_2__111::Type& rel_TrainingData_276ec139200837ac,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_ActualParam_b7a735170493e717(&rel_ActualParam_b7a735170493e717),
rel_ActualReturn_8bc9db09e057aa22(&rel_ActualReturn_8bc9db09e057aa22),
rel_CallGraphEdge_333c9d69fed5eee7(&rel_CallGraphEdge_333c9d69fed5eee7),
rel_FilteredTrainingMethod_abcda1d07db43c94(&rel_FilteredTrainingMethod_abcda1d07db43c94),
rel_FlowFromExtended_7fd58681b534e204(&rel_FlowFromExtended_7fd58681b534e204),
rel_TorchModelWithData_3bc4694c9032b02a(&rel_TorchModelWithData_3bc4694c9032b02a),
rel_TrainingData_276ec139200837ac(&rel_TrainingData_276ec139200837ac),
rel_TrainingDataWithModel_bf0078ce702b39b8(&rel_TrainingDataWithModel_bf0078ce702b39b8),
regexes({
	std::regex(".*[.](backward)"),
}){
}

void Stratum_TrainingDataWithModel_027fac07f1e7b905::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(TrainingDataWithModel(model,train,invo,meth,ctx) :- 
   TrainingData(meth,model_idx,idx),
   ActualParam(idx,invo,train),
   CallGraphEdge(invo,ctx,meth,_),
   !FilteredTrainingMethod(meth),
   ActualReturn(model_idx,invo,model).
in file main.dl [1167:1-1172:42])_");
if(!(rel_ActualParam_b7a735170493e717->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_TrainingData_276ec139200837ac->empty()) && !(rel_ActualReturn_8bc9db09e057aa22->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt,rel_ActualReturn_8bc9db09e057aa22->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_FilteredTrainingMethod_abcda1d07db43c94_op_ctxt,rel_FilteredTrainingMethod_abcda1d07db43c94->createContext());
CREATE_OP_CONTEXT(rel_TrainingData_276ec139200837ac_op_ctxt,rel_TrainingData_276ec139200837ac->createContext());
CREATE_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt,rel_TrainingDataWithModel_bf0078ce702b39b8->createContext());
for(const auto& env0 : *rel_TrainingData_276ec139200837ac) {
if( !(rel_FilteredTrainingMethod_abcda1d07db43c94->contains(Tuple<RamDomain,1>{{ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_FilteredTrainingMethod_abcda1d07db43c94_op_ctxt)))) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_CallGraphEdge_333c9d69fed5eee7->lowerUpperRange_1010(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_ActualReturn_8bc9db09e057aa22->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env3[2]),ramBitCast(env1[2]),ramBitCast(env1[1]),ramBitCast(env0[0]),ramBitCast(env2[1])}};
rel_TrainingDataWithModel_bf0078ce702b39b8->insert(tuple,READ_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt));
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(TrainingDataWithModel(model,data,invo,meth,ctx) :- 
   TorchModelWithData(model,data,invo,meth),
   FlowFromExtended(loss,ctx2,data,ctx,_),
   CallGraphEdge(invo2,ctx2,meth2,_),
   match(".*[.](backward)", meth2),
   ActualParam(0,invo2,loss).
in file main.dl [1256:1-1261:33])_");
if(!(rel_FlowFromExtended_7fd58681b534e204->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_TorchModelWithData_3bc4694c9032b02a->empty()) && !(rel_ActualParam_b7a735170493e717->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt,rel_FlowFromExtended_7fd58681b534e204->createContext());
CREATE_OP_CONTEXT(rel_TorchModelWithData_3bc4694c9032b02a_op_ctxt,rel_TorchModelWithData_3bc4694c9032b02a->createContext());
CREATE_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt,rel_TrainingDataWithModel_bf0078ce702b39b8->createContext());
for(const auto& env0 : *rel_TorchModelWithData_3bc4694c9032b02a) {
auto range = rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_00100(Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_CallGraphEdge_333c9d69fed5eee7->lowerUpperRange_0100(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt));
for(const auto& env2 : range) {
if( std::regex_match(symTable.decode(env2[2]), regexes.at(0)) && rel_ActualParam_b7a735170493e717->contains(Tuple<RamDomain,3>{{ramBitCast(RamSigned(0)),ramBitCast(env2[0]),ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env1[3])}};
rel_TrainingDataWithModel_bf0078ce702b39b8->insert(tuple,READ_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt));
}
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","model\ttrain\tinvo\tmeth\tctx"},{"auxArity","0"},{"name","TrainingDataWithModel"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"model\", \"train\", \"invo\", \"meth\", \"ctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_TrainingDataWithModel_bf0078ce702b39b8);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_FilteredTrainingMethod_abcda1d07db43c94->purge();
if (pruneImdtRels) rel_TrainingData_276ec139200837ac->purge();
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_ValData_564cb9a844994214 {
public:
 Stratum_ValData_564cb9a844994214(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iii__0_1_2__111::Type& rel_ValData_515538f102ad549e);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_Invoke_d61c77705bff35b0;
t_btree_iii__0_1_2__111::Type* rel_ValData_515538f102ad549e;
std::vector<std::regex> regexes;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_ValData_564cb9a844994214::Stratum_ValData_564cb9a844994214(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__2__0_1_2__001__110__111::Type& rel_Invoke_d61c77705bff35b0,t_btree_iii__0_1_2__111::Type& rel_ValData_515538f102ad549e):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_Invoke_d61c77705bff35b0(&rel_Invoke_d61c77705bff35b0),
rel_ValData_515538f102ad549e(&rel_ValData_515538f102ad549e),
regexes({
	std::regex(".*(GridSearchCV|HalvingGridSearchCV|ParameterGrid|ParameterSampler|RandomizedSearchCV|HalvingRandomSearchCV)[.]fit"),
	std::regex(".*[.](fit)"),
	std::regex(".*[.](fit_generator)"),
}){
}

void Stratum_ValData_564cb9a844994214::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(ValData(meth,0,1) :- 
   Invoke(_,meth,_),
   match(".*(GridSearchCV|HalvingGridSearchCV|ParameterGrid|ParameterSampler|RandomizedSearchCV|HalvingRandomSearchCV)[.]fit", meth).
in file main.dl [576:1-578:135])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ValData_515538f102ad549e_op_ctxt,rel_ValData_515538f102ad549e->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(0))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(RamSigned(0)),ramBitCast(RamSigned(1))}};
rel_ValData_515538f102ad549e->insert(tuple,READ_OP_CONTEXT(rel_ValData_515538f102ad549e_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ValData(meth,0,8) :- 
   Invoke(_,meth,_),
   match(".*[.](fit)", meth).
in file main.dl [579:1-581:31])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ValData_515538f102ad549e_op_ctxt,rel_ValData_515538f102ad549e->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(1))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(RamSigned(0)),ramBitCast(RamSigned(8))}};
rel_ValData_515538f102ad549e->insert(tuple,READ_OP_CONTEXT(rel_ValData_515538f102ad549e_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(ValData(meth,0,6) :- 
   Invoke(_,meth,_),
   match(".*[.](fit_generator)", meth).
in file main.dl [582:1-584:41])_");
if(!(rel_Invoke_d61c77705bff35b0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_Invoke_d61c77705bff35b0_op_ctxt,rel_Invoke_d61c77705bff35b0->createContext());
CREATE_OP_CONTEXT(rel_ValData_515538f102ad549e_op_ctxt,rel_ValData_515538f102ad549e->createContext());
for(const auto& env0 : *rel_Invoke_d61c77705bff35b0) {
if( std::regex_match(symTable.decode(env0[1]), regexes.at(2))) {
Tuple<RamDomain,3> tuple{{ramBitCast(env0[1]),ramBitCast(RamSigned(0)),ramBitCast(RamSigned(6))}};
rel_ValData_515538f102ad549e->insert(tuple,READ_OP_CONTEXT(rel_ValData_515538f102ad549e_op_ctxt));
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_ValDataWithModel_bc9f39823254c66b {
public:
 Stratum_ValDataWithModel_bc9f39823254c66b(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_delta_ValDataWithModel_0840db341aaccef6,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_new_ValDataWithModel_9ed2fac795be70a1,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualKeyParam_c37ca7251a780d4f,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualParam_b7a735170493e717,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_iiii__0_1_2_3__1111::Type& rel_DataOverlap_5a4300eece6cb523,t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type& rel_FlowFromExtended_7fd58681b534e204,t_btree_ii__0_1__11__10::Type& rel_InvokeInLoop_c641dec75a6890e7,t_btree_iii__0_1_2__111::Type& rel_MethodIndexToKey_1e172395196e36b8,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_ScoredDataWithModel_55bb6aafc5a52e34,t_btree_iii__0_1_2__110__111::Type& rel_StoreIndex_bab2c0876dfa7ece,t_btree_iii__0_1_2__111::Type& rel_ValData_515538f102ad549e,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_ValDataWithModel_ef5cc7d0fb594fa5,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel_delta_ValDataWithModel_0840db341aaccef6;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel_new_ValDataWithModel_9ed2fac795be70a1;
t_btree_iii__1__0_1_2__010__100__110__111::Type* rel_ActualKeyParam_c37ca7251a780d4f;
t_btree_iii__1__0_1_2__010__100__110__111::Type* rel_ActualParam_b7a735170493e717;
t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type* rel_CallGraphEdge_333c9d69fed5eee7;
t_btree_iiii__0_1_2_3__1111::Type* rel_DataOverlap_5a4300eece6cb523;
t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type* rel_FlowFromExtended_7fd58681b534e204;
t_btree_ii__0_1__11__10::Type* rel_InvokeInLoop_c641dec75a6890e7;
t_btree_iii__0_1_2__111::Type* rel_MethodIndexToKey_1e172395196e36b8;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel_ScoredDataWithModel_55bb6aafc5a52e34;
t_btree_iii__0_1_2__110__111::Type* rel_StoreIndex_bab2c0876dfa7ece;
t_btree_iii__0_1_2__111::Type* rel_ValData_515538f102ad549e;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel_ValDataWithModel_ef5cc7d0fb594fa5;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_ValOrTestDataWithModel_2810ba231c0c185a;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_ValDataWithModel_bc9f39823254c66b::Stratum_ValDataWithModel_bc9f39823254c66b(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_delta_ValDataWithModel_0840db341aaccef6,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_new_ValDataWithModel_9ed2fac795be70a1,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualKeyParam_c37ca7251a780d4f,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualParam_b7a735170493e717,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_iiii__0_1_2_3__1111::Type& rel_DataOverlap_5a4300eece6cb523,t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type& rel_FlowFromExtended_7fd58681b534e204,t_btree_ii__0_1__11__10::Type& rel_InvokeInLoop_c641dec75a6890e7,t_btree_iii__0_1_2__111::Type& rel_MethodIndexToKey_1e172395196e36b8,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_ScoredDataWithModel_55bb6aafc5a52e34,t_btree_iii__0_1_2__110__111::Type& rel_StoreIndex_bab2c0876dfa7ece,t_btree_iii__0_1_2__111::Type& rel_ValData_515538f102ad549e,t_btree_iiiii__0_1_2_3_4__11111::Type& rel_ValDataWithModel_ef5cc7d0fb594fa5,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_delta_ValDataWithModel_0840db341aaccef6(&rel_delta_ValDataWithModel_0840db341aaccef6),
rel_new_ValDataWithModel_9ed2fac795be70a1(&rel_new_ValDataWithModel_9ed2fac795be70a1),
rel_ActualKeyParam_c37ca7251a780d4f(&rel_ActualKeyParam_c37ca7251a780d4f),
rel_ActualParam_b7a735170493e717(&rel_ActualParam_b7a735170493e717),
rel_CallGraphEdge_333c9d69fed5eee7(&rel_CallGraphEdge_333c9d69fed5eee7),
rel_DataOverlap_5a4300eece6cb523(&rel_DataOverlap_5a4300eece6cb523),
rel_FlowFromExtended_7fd58681b534e204(&rel_FlowFromExtended_7fd58681b534e204),
rel_InvokeInLoop_c641dec75a6890e7(&rel_InvokeInLoop_c641dec75a6890e7),
rel_MethodIndexToKey_1e172395196e36b8(&rel_MethodIndexToKey_1e172395196e36b8),
rel_ScoredDataWithModel_55bb6aafc5a52e34(&rel_ScoredDataWithModel_55bb6aafc5a52e34),
rel_StoreIndex_bab2c0876dfa7ece(&rel_StoreIndex_bab2c0876dfa7ece),
rel_ValData_515538f102ad549e(&rel_ValData_515538f102ad549e),
rel_ValDataWithModel_ef5cc7d0fb594fa5(&rel_ValDataWithModel_ef5cc7d0fb594fa5),
rel_ValOrTestDataWithModel_2810ba231c0c185a(&rel_ValOrTestDataWithModel_2810ba231c0c185a){
}

void Stratum_ValDataWithModel_bc9f39823254c66b::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(ValDataWithModel(model,val,invo,meth,ctx) :- 
   ValData(meth,model_idx,idx),
   ActualParam(idx,invo,val),
   CallGraphEdge(invo,ctx,meth,_),
   ActualParam(model_idx,invo,model).
in file main.dl [1201:1-1205:41])_");
if(!(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_ValData_515538f102ad549e->empty()) && !(rel_ActualParam_b7a735170493e717->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_ValData_515538f102ad549e_op_ctxt,rel_ValData_515538f102ad549e->createContext());
CREATE_OP_CONTEXT(rel_ValDataWithModel_ef5cc7d0fb594fa5_op_ctxt,rel_ValDataWithModel_ef5cc7d0fb594fa5->createContext());
for(const auto& env0 : *rel_ValData_515538f102ad549e) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_CallGraphEdge_333c9d69fed5eee7->lowerUpperRange_1010(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env3[2]),ramBitCast(env1[2]),ramBitCast(env1[1]),ramBitCast(env0[0]),ramBitCast(env2[1])}};
rel_ValDataWithModel_ef5cc7d0fb594fa5->insert(tuple,READ_OP_CONTEXT(rel_ValDataWithModel_ef5cc7d0fb594fa5_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ValDataWithModel(model,val,invo,meth,ctx) :- 
   ValData(meth,model_idx,idx),
   MethodIndexToKey(idx,keyword,meth),
   ActualKeyParam(keyword,invo,tup),
   keyword = "validation_data",
   StoreIndex(tup,"0",val),
   CallGraphEdge(invo,ctx,meth,_),
   ActualParam(model_idx,invo,model).
in file main.dl [1206:1-1213:41])_");
if(!(rel_MethodIndexToKey_1e172395196e36b8->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_ActualKeyParam_c37ca7251a780d4f->empty()) && !(rel_StoreIndex_bab2c0876dfa7ece->empty()) && !(rel_ValData_515538f102ad549e->empty()) && !(rel_ActualParam_b7a735170493e717->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualKeyParam_c37ca7251a780d4f_op_ctxt,rel_ActualKeyParam_c37ca7251a780d4f->createContext());
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt,rel_MethodIndexToKey_1e172395196e36b8->createContext());
CREATE_OP_CONTEXT(rel_StoreIndex_bab2c0876dfa7ece_op_ctxt,rel_StoreIndex_bab2c0876dfa7ece->createContext());
CREATE_OP_CONTEXT(rel_ValData_515538f102ad549e_op_ctxt,rel_ValData_515538f102ad549e->createContext());
CREATE_OP_CONTEXT(rel_ValDataWithModel_ef5cc7d0fb594fa5_op_ctxt,rel_ValDataWithModel_ef5cc7d0fb594fa5->createContext());
for(const auto& env0 : *rel_ValData_515538f102ad549e) {
auto range = rel_MethodIndexToKey_1e172395196e36b8->lowerUpperRange_111(Tuple<RamDomain,3>{{ramBitCast(env0[2]), ramBitCast(RamSigned(29)), ramBitCast(env0[0])}},Tuple<RamDomain,3>{{ramBitCast(env0[2]), ramBitCast(RamSigned(29)), ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_MethodIndexToKey_1e172395196e36b8_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_ActualKeyParam_c37ca7251a780d4f->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualKeyParam_c37ca7251a780d4f_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_StoreIndex_bab2c0876dfa7ece->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env2[2]), ramBitCast(RamSigned(48)), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env2[2]), ramBitCast(RamSigned(48)), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_StoreIndex_bab2c0876dfa7ece_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_CallGraphEdge_333c9d69fed5eee7->lowerUpperRange_1010(Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt));
for(const auto& env4 : range) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env2[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env5 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env5[2]),ramBitCast(env3[2]),ramBitCast(env2[1]),ramBitCast(env0[0]),ramBitCast(env4[1])}};
rel_ValDataWithModel_ef5cc7d0fb594fa5->insert(tuple,READ_OP_CONTEXT(rel_ValDataWithModel_ef5cc7d0fb594fa5_op_ctxt));
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ValDataWithModel(model,val,invo,meth,ctx) :- 
   ValOrTestDataWithModel(model,val,invo,meth,ctx),
   !FlowFromExtended(val,ctx,loop_var,_,_),
   InvokeInLoop(invo,loop_var).
in file main.dl [1215:1-1218:34])_");
if(!(rel_ValOrTestDataWithModel_2810ba231c0c185a->empty()) && !(rel_InvokeInLoop_c641dec75a6890e7->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt,rel_FlowFromExtended_7fd58681b534e204->createContext());
CREATE_OP_CONTEXT(rel_InvokeInLoop_c641dec75a6890e7_op_ctxt,rel_InvokeInLoop_c641dec75a6890e7->createContext());
CREATE_OP_CONTEXT(rel_ValDataWithModel_ef5cc7d0fb594fa5_op_ctxt,rel_ValDataWithModel_ef5cc7d0fb594fa5->createContext());
CREATE_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt,rel_ValOrTestDataWithModel_2810ba231c0c185a->createContext());
for(const auto& env0 : *rel_ValOrTestDataWithModel_2810ba231c0c185a) {
auto range = rel_InvokeInLoop_c641dec75a6890e7->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_InvokeInLoop_c641dec75a6890e7_op_ctxt));
for(const auto& env1 : range) {
if( !(!rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_11100(Tuple<RamDomain,5>{{ramBitCast(env0[1]), ramBitCast(env0[4]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env0[1]), ramBitCast(env0[4]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt)).empty())) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_ValDataWithModel_ef5cc7d0fb594fa5->insert(tuple,READ_OP_CONTEXT(rel_ValDataWithModel_ef5cc7d0fb594fa5_op_ctxt));
break;
}
}
}
}
();}
signalHandler->setMsg(R"_(ValDataWithModel(testModel,val,invo,meth,ctx1) :- 
   ScoredDataWithModel(testModel,val,invo,meth,ctx1),
   ScoredDataWithModel(testModel2,val2,_,_,ctx2),
   DataOverlap(val,ctx1,val2,ctx2),
   !FlowFromExtended(testModel,ctx1,testModel2,ctx2,_),
   !FlowFromExtended(testModel2,ctx2,testModel,ctx1,_).
in file main.dl [1220:1-1228:61])_");
if(!(rel_DataOverlap_5a4300eece6cb523->empty()) && !(rel_ScoredDataWithModel_55bb6aafc5a52e34->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt,rel_DataOverlap_5a4300eece6cb523->createContext());
CREATE_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt,rel_FlowFromExtended_7fd58681b534e204->createContext());
CREATE_OP_CONTEXT(rel_ScoredDataWithModel_55bb6aafc5a52e34_op_ctxt,rel_ScoredDataWithModel_55bb6aafc5a52e34->createContext());
CREATE_OP_CONTEXT(rel_ValDataWithModel_ef5cc7d0fb594fa5_op_ctxt,rel_ValDataWithModel_ef5cc7d0fb594fa5->createContext());
for(const auto& env0 : *rel_ScoredDataWithModel_55bb6aafc5a52e34) {
for(const auto& env1 : *rel_ScoredDataWithModel_55bb6aafc5a52e34) {
if( rel_DataOverlap_5a4300eece6cb523->contains(Tuple<RamDomain,4>{{ramBitCast(env0[1]),ramBitCast(env0[4]),ramBitCast(env1[1]),ramBitCast(env1[4])}},READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt)) && !(!rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_11110(Tuple<RamDomain,5>{{ramBitCast(env1[0]), ramBitCast(env1[4]), ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env1[0]), ramBitCast(env1[4]), ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt)).empty()) && !(!rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_11110(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast(env1[0]), ramBitCast(env1[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast(env1[0]), ramBitCast(env1[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt)).empty())) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_ValDataWithModel_ef5cc7d0fb594fa5->insert(tuple,READ_OP_CONTEXT(rel_ValDataWithModel_ef5cc7d0fb594fa5_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(ValDataWithModel(testModel2,val2,invo2,meth2,ctx2) :- 
   ScoredDataWithModel(testModel,val,_,_,ctx1),
   ScoredDataWithModel(testModel2,val2,invo2,meth2,ctx2),
   DataOverlap(val,ctx1,val2,ctx2),
   !FlowFromExtended(testModel,ctx1,testModel2,ctx2,_),
   !FlowFromExtended(testModel2,ctx2,testModel,ctx1,_).
in file main.dl [1220:1-1228:61])_");
if(!(rel_DataOverlap_5a4300eece6cb523->empty()) && !(rel_ScoredDataWithModel_55bb6aafc5a52e34->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt,rel_DataOverlap_5a4300eece6cb523->createContext());
CREATE_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt,rel_FlowFromExtended_7fd58681b534e204->createContext());
CREATE_OP_CONTEXT(rel_ScoredDataWithModel_55bb6aafc5a52e34_op_ctxt,rel_ScoredDataWithModel_55bb6aafc5a52e34->createContext());
CREATE_OP_CONTEXT(rel_ValDataWithModel_ef5cc7d0fb594fa5_op_ctxt,rel_ValDataWithModel_ef5cc7d0fb594fa5->createContext());
for(const auto& env0 : *rel_ScoredDataWithModel_55bb6aafc5a52e34) {
for(const auto& env1 : *rel_ScoredDataWithModel_55bb6aafc5a52e34) {
if( rel_DataOverlap_5a4300eece6cb523->contains(Tuple<RamDomain,4>{{ramBitCast(env0[1]),ramBitCast(env0[4]),ramBitCast(env1[1]),ramBitCast(env1[4])}},READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt)) && !(!rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_11110(Tuple<RamDomain,5>{{ramBitCast(env1[0]), ramBitCast(env1[4]), ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env1[0]), ramBitCast(env1[4]), ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt)).empty()) && !(!rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_11110(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast(env1[0]), ramBitCast(env1[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast(env1[0]), ramBitCast(env1[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt)).empty())) {
Tuple<RamDomain,5> tuple{{ramBitCast(env1[0]),ramBitCast(env1[1]),ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env1[4])}};
rel_ValDataWithModel_ef5cc7d0fb594fa5->insert(tuple,READ_OP_CONTEXT(rel_ValDataWithModel_ef5cc7d0fb594fa5_op_ctxt));
}
}
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_delta_ValDataWithModel_0840db341aaccef6_op_ctxt,rel_delta_ValDataWithModel_0840db341aaccef6->createContext());
CREATE_OP_CONTEXT(rel_ValDataWithModel_ef5cc7d0fb594fa5_op_ctxt,rel_ValDataWithModel_ef5cc7d0fb594fa5->createContext());
for(const auto& env0 : *rel_ValDataWithModel_ef5cc7d0fb594fa5) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_delta_ValDataWithModel_0840db341aaccef6->insert(tuple,READ_OP_CONTEXT(rel_delta_ValDataWithModel_0840db341aaccef6_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(ValDataWithModel(model,test,invo,meth,ctx1) :- 
   ValOrTestDataWithModel(model,test,invo,meth,ctx1),
   ValDataWithModel(testModel,val,_,_,_),
   FlowFromExtended(model,ctx1,testModel,ctx2,_),
   DataOverlap(test,ctx1,val,ctx2).
in file main.dl [1230:1-1234:40])_");
if(!(rel_delta_ValDataWithModel_0840db341aaccef6->empty()) && !(rel_FlowFromExtended_7fd58681b534e204->empty()) && !(rel_ValOrTestDataWithModel_2810ba231c0c185a->empty()) && !(rel_DataOverlap_5a4300eece6cb523->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_ValDataWithModel_0840db341aaccef6_op_ctxt,rel_delta_ValDataWithModel_0840db341aaccef6->createContext());
CREATE_OP_CONTEXT(rel_new_ValDataWithModel_9ed2fac795be70a1_op_ctxt,rel_new_ValDataWithModel_9ed2fac795be70a1->createContext());
CREATE_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt,rel_DataOverlap_5a4300eece6cb523->createContext());
CREATE_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt,rel_FlowFromExtended_7fd58681b534e204->createContext());
CREATE_OP_CONTEXT(rel_ValDataWithModel_ef5cc7d0fb594fa5_op_ctxt,rel_ValDataWithModel_ef5cc7d0fb594fa5->createContext());
CREATE_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt,rel_ValOrTestDataWithModel_2810ba231c0c185a->createContext());
for(const auto& env0 : *rel_ValOrTestDataWithModel_2810ba231c0c185a) {
if( !(rel_ValDataWithModel_ef5cc7d0fb594fa5->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_ValDataWithModel_ef5cc7d0fb594fa5_op_ctxt)))) {
for(const auto& env1 : *rel_delta_ValDataWithModel_0840db341aaccef6) {
auto range = rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_11100(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt));
for(const auto& env2 : range) {
if( rel_DataOverlap_5a4300eece6cb523->contains(Tuple<RamDomain,4>{{ramBitCast(env0[1]),ramBitCast(env0[4]),ramBitCast(env1[1]),ramBitCast(env2[3])}},READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_new_ValDataWithModel_9ed2fac795be70a1->insert(tuple,READ_OP_CONTEXT(rel_new_ValDataWithModel_9ed2fac795be70a1_op_ctxt));
break;
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ValDataWithModel(model,test,invo,meth,ctx1) :- 
   ValOrTestDataWithModel(model,test,invo,meth,ctx1),
   ValDataWithModel(testModel,val,_,_,_),
   FlowFromExtended(testModel,ctx2,model,ctx1,_),
   DataOverlap(test,ctx1,val,ctx2).
in file main.dl [1230:1-1234:40])_");
if(!(rel_delta_ValDataWithModel_0840db341aaccef6->empty()) && !(rel_FlowFromExtended_7fd58681b534e204->empty()) && !(rel_ValOrTestDataWithModel_2810ba231c0c185a->empty()) && !(rel_DataOverlap_5a4300eece6cb523->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_ValDataWithModel_0840db341aaccef6_op_ctxt,rel_delta_ValDataWithModel_0840db341aaccef6->createContext());
CREATE_OP_CONTEXT(rel_new_ValDataWithModel_9ed2fac795be70a1_op_ctxt,rel_new_ValDataWithModel_9ed2fac795be70a1->createContext());
CREATE_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt,rel_DataOverlap_5a4300eece6cb523->createContext());
CREATE_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt,rel_FlowFromExtended_7fd58681b534e204->createContext());
CREATE_OP_CONTEXT(rel_ValDataWithModel_ef5cc7d0fb594fa5_op_ctxt,rel_ValDataWithModel_ef5cc7d0fb594fa5->createContext());
CREATE_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt,rel_ValOrTestDataWithModel_2810ba231c0c185a->createContext());
for(const auto& env0 : *rel_ValOrTestDataWithModel_2810ba231c0c185a) {
if( !(rel_ValDataWithModel_ef5cc7d0fb594fa5->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}},READ_OP_CONTEXT(rel_ValDataWithModel_ef5cc7d0fb594fa5_op_ctxt)))) {
for(const auto& env1 : *rel_delta_ValDataWithModel_0840db341aaccef6) {
auto range = rel_FlowFromExtended_7fd58681b534e204->lowerUpperRange_10110(Tuple<RamDomain,5>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,5>{{ramBitCast(env1[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast(env0[4]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_FlowFromExtended_7fd58681b534e204_op_ctxt));
for(const auto& env2 : range) {
if( rel_DataOverlap_5a4300eece6cb523->contains(Tuple<RamDomain,4>{{ramBitCast(env0[1]),ramBitCast(env0[4]),ramBitCast(env1[1]),ramBitCast(env2[1])}},READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_new_ValDataWithModel_9ed2fac795be70a1->insert(tuple,READ_OP_CONTEXT(rel_new_ValDataWithModel_9ed2fac795be70a1_op_ctxt));
break;
}
}
}
}
}
}
();}
if(rel_new_ValDataWithModel_9ed2fac795be70a1->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_new_ValDataWithModel_9ed2fac795be70a1_op_ctxt,rel_new_ValDataWithModel_9ed2fac795be70a1->createContext());
CREATE_OP_CONTEXT(rel_ValDataWithModel_ef5cc7d0fb594fa5_op_ctxt,rel_ValDataWithModel_ef5cc7d0fb594fa5->createContext());
for(const auto& env0 : *rel_new_ValDataWithModel_9ed2fac795be70a1) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env0[4])}};
rel_ValDataWithModel_ef5cc7d0fb594fa5->insert(tuple,READ_OP_CONTEXT(rel_ValDataWithModel_ef5cc7d0fb594fa5_op_ctxt));
}
}
();std::swap(rel_delta_ValDataWithModel_0840db341aaccef6, rel_new_ValDataWithModel_9ed2fac795be70a1);
rel_new_ValDataWithModel_9ed2fac795be70a1->purge();
iter++;
}
iter = 0;
rel_delta_ValDataWithModel_0840db341aaccef6->purge();
rel_new_ValDataWithModel_9ed2fac795be70a1->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","model\tval\tinvo\tmeth\tctx"},{"auxArity","0"},{"name","ValDataWithModel"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"model\", \"val\", \"invo\", \"meth\", \"ctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_ValDataWithModel_ef5cc7d0fb594fa5);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_ActualKeyParam_c37ca7251a780d4f->purge();
if (pruneImdtRels) rel_InvokeInLoop_c641dec75a6890e7->purge();
if (pruneImdtRels) rel_MethodIndexToKey_1e172395196e36b8->purge();
if (pruneImdtRels) rel_StoreIndex_bab2c0876dfa7ece->purge();
if (pruneImdtRels) rel_ValData_515538f102ad549e->purge();
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_ValOrTestDataWithModel_067190884f126f04 {
public:
 Stratum_ValOrTestDataWithModel_067190884f126f04(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualParam_b7a735170493e717,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_iii__0_1_2__111::Type& rel_TestData_cd6b712f9b1db6bc,t_btree_iiii__0_1_2_3__1111::Type& rel_TorchModelWithData_3bc4694c9032b02a,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iii__1__0_1_2__010__100__110__111::Type* rel_ActualParam_b7a735170493e717;
t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type* rel_CallGraphEdge_333c9d69fed5eee7;
t_btree_iii__0_1_2__111::Type* rel_TestData_cd6b712f9b1db6bc;
t_btree_iiii__0_1_2_3__1111::Type* rel_TorchModelWithData_3bc4694c9032b02a;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_TrainingDataWithModel_bf0078ce702b39b8;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_ValOrTestDataWithModel_2810ba231c0c185a;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_ValOrTestDataWithModel_067190884f126f04::Stratum_ValOrTestDataWithModel_067190884f126f04(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualParam_b7a735170493e717,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_iii__0_1_2__111::Type& rel_TestData_cd6b712f9b1db6bc,t_btree_iiii__0_1_2_3__1111::Type& rel_TorchModelWithData_3bc4694c9032b02a,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_ActualParam_b7a735170493e717(&rel_ActualParam_b7a735170493e717),
rel_CallGraphEdge_333c9d69fed5eee7(&rel_CallGraphEdge_333c9d69fed5eee7),
rel_TestData_cd6b712f9b1db6bc(&rel_TestData_cd6b712f9b1db6bc),
rel_TorchModelWithData_3bc4694c9032b02a(&rel_TorchModelWithData_3bc4694c9032b02a),
rel_TrainingDataWithModel_bf0078ce702b39b8(&rel_TrainingDataWithModel_bf0078ce702b39b8),
rel_ValOrTestDataWithModel_2810ba231c0c185a(&rel_ValOrTestDataWithModel_2810ba231c0c185a){
}

void Stratum_ValOrTestDataWithModel_067190884f126f04::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(ValOrTestDataWithModel(model,test,invo,meth,ctx) :- 
   TestData(meth,model_idx,idx),
   ActualParam(idx,invo,test),
   CallGraphEdge(invo,ctx,meth,_),
   ActualParam(model_idx,invo,model).
in file main.dl [1175:1-1179:41])_");
if(!(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_TestData_cd6b712f9b1db6bc->empty()) && !(rel_ActualParam_b7a735170493e717->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_TestData_cd6b712f9b1db6bc_op_ctxt,rel_TestData_cd6b712f9b1db6bc->createContext());
CREATE_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt,rel_ValOrTestDataWithModel_2810ba231c0c185a->createContext());
for(const auto& env0 : *rel_TestData_cd6b712f9b1db6bc) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_100(Tuple<RamDomain,3>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_CallGraphEdge_333c9d69fed5eee7->lowerUpperRange_1010(Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(env0[1]), ramBitCast(env1[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env3[2]),ramBitCast(env1[2]),ramBitCast(env1[1]),ramBitCast(env0[0]),ramBitCast(env2[1])}};
rel_ValOrTestDataWithModel_2810ba231c0c185a->insert(tuple,READ_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt));
}
}
}
}
}
();}
signalHandler->setMsg(R"_(ValOrTestDataWithModel(model,data,invo,meth,ctx) :- 
   TorchModelWithData(model,data,invo,meth),
   CallGraphEdge(invo,ctx,meth,_),
   !TrainingDataWithModel(model,data,invo,meth,ctx).
in file main.dl [1263:1-1266:58])_");
if(!(rel_TorchModelWithData_3bc4694c9032b02a->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_TorchModelWithData_3bc4694c9032b02a_op_ctxt,rel_TorchModelWithData_3bc4694c9032b02a->createContext());
CREATE_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt,rel_TrainingDataWithModel_bf0078ce702b39b8->createContext());
CREATE_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt,rel_ValOrTestDataWithModel_2810ba231c0c185a->createContext());
for(const auto& env0 : *rel_TorchModelWithData_3bc4694c9032b02a) {
auto range = rel_CallGraphEdge_333c9d69fed5eee7->lowerUpperRange_1010(Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_TrainingDataWithModel_bf0078ce702b39b8->contains(Tuple<RamDomain,5>{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt)))) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1]),ramBitCast(env0[2]),ramBitCast(env0[3]),ramBitCast(env1[1])}};
rel_ValOrTestDataWithModel_2810ba231c0c185a->insert(tuple,READ_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt));
}
}
}
}
();}
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","model\ttest\tinvo\tmeth\tctx"},{"auxArity","0"},{"name","ValOrTestDataWithModel"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"model\", \"test\", \"invo\", \"meth\", \"ctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_ValOrTestDataWithModel_2810ba231c0c185a);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_TestData_cd6b712f9b1db6bc->purge();
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_VarEquals_05ec4eda30a25b9b {
public:
 Stratum_VarEquals_05ec4eda30a25b9b(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__0_1__11__10::Type& rel_delta_VarEquals_9c226744c7f75a0b,t_btree_ii__0_1__11__10::Type& rel_new_VarEquals_a3a3c796750fc858,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualParam_b7a735170493e717,t_btree_iii__1_0_2__010__110__111::Type& rel_ActualReturn_8bc9db09e057aa22,t_btree_ii__0_1__11::Type& rel_AssignGlobal_f60b14713e1f1ab7,t_btree_ii__0_1__11::Type& rel_AssignVar_b173aa4bb6352b3a,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_ii__1_0__11__01::Type& rel_ConstantValue_bf370ded014c6df6,t_btree_iiii__0_2_1_3__1010__1111::Type& rel_InterProcAssign_bed60ee93a02e127,t_btree_iii__2__0_1_2__001__110__111::Type& rel_LoadField_6018b2c33f454495,t_btree_iii__2__0_1_2__001__110__111::Type& rel_LoadIndex_3a07e512c7efb9bd,t_btree_i__0__1::Type& rel_PureMethod_ac3eca18d3064a10,t_btree_ii__0_1__11__10::Type& rel_VarEquals_a4540819e065ea89,t_btree_iiii__2_3_0_1__0_1__1000__1111__1100__0011::Type& rel_VarPointsTo_c1a9f897b9f324f0);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_ii__0_1__11__10::Type* rel_delta_VarEquals_9c226744c7f75a0b;
t_btree_ii__0_1__11__10::Type* rel_new_VarEquals_a3a3c796750fc858;
t_btree_iii__1__0_1_2__010__100__110__111::Type* rel_ActualParam_b7a735170493e717;
t_btree_iii__1_0_2__010__110__111::Type* rel_ActualReturn_8bc9db09e057aa22;
t_btree_ii__0_1__11::Type* rel_AssignGlobal_f60b14713e1f1ab7;
t_btree_ii__0_1__11::Type* rel_AssignVar_b173aa4bb6352b3a;
t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type* rel_CallGraphEdge_333c9d69fed5eee7;
t_btree_ii__1_0__11__01::Type* rel_ConstantValue_bf370ded014c6df6;
t_btree_iiii__0_2_1_3__1010__1111::Type* rel_InterProcAssign_bed60ee93a02e127;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_LoadField_6018b2c33f454495;
t_btree_iii__2__0_1_2__001__110__111::Type* rel_LoadIndex_3a07e512c7efb9bd;
t_btree_i__0__1::Type* rel_PureMethod_ac3eca18d3064a10;
t_btree_ii__0_1__11__10::Type* rel_VarEquals_a4540819e065ea89;
t_btree_iiii__2_3_0_1__0_1__1000__1111__1100__0011::Type* rel_VarPointsTo_c1a9f897b9f324f0;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_VarEquals_05ec4eda30a25b9b::Stratum_VarEquals_05ec4eda30a25b9b(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__0_1__11__10::Type& rel_delta_VarEquals_9c226744c7f75a0b,t_btree_ii__0_1__11__10::Type& rel_new_VarEquals_a3a3c796750fc858,t_btree_iii__1__0_1_2__010__100__110__111::Type& rel_ActualParam_b7a735170493e717,t_btree_iii__1_0_2__010__110__111::Type& rel_ActualReturn_8bc9db09e057aa22,t_btree_ii__0_1__11::Type& rel_AssignGlobal_f60b14713e1f1ab7,t_btree_ii__0_1__11::Type& rel_AssignVar_b173aa4bb6352b3a,t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type& rel_CallGraphEdge_333c9d69fed5eee7,t_btree_ii__1_0__11__01::Type& rel_ConstantValue_bf370ded014c6df6,t_btree_iiii__0_2_1_3__1010__1111::Type& rel_InterProcAssign_bed60ee93a02e127,t_btree_iii__2__0_1_2__001__110__111::Type& rel_LoadField_6018b2c33f454495,t_btree_iii__2__0_1_2__001__110__111::Type& rel_LoadIndex_3a07e512c7efb9bd,t_btree_i__0__1::Type& rel_PureMethod_ac3eca18d3064a10,t_btree_ii__0_1__11__10::Type& rel_VarEquals_a4540819e065ea89,t_btree_iiii__2_3_0_1__0_1__1000__1111__1100__0011::Type& rel_VarPointsTo_c1a9f897b9f324f0):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_delta_VarEquals_9c226744c7f75a0b(&rel_delta_VarEquals_9c226744c7f75a0b),
rel_new_VarEquals_a3a3c796750fc858(&rel_new_VarEquals_a3a3c796750fc858),
rel_ActualParam_b7a735170493e717(&rel_ActualParam_b7a735170493e717),
rel_ActualReturn_8bc9db09e057aa22(&rel_ActualReturn_8bc9db09e057aa22),
rel_AssignGlobal_f60b14713e1f1ab7(&rel_AssignGlobal_f60b14713e1f1ab7),
rel_AssignVar_b173aa4bb6352b3a(&rel_AssignVar_b173aa4bb6352b3a),
rel_CallGraphEdge_333c9d69fed5eee7(&rel_CallGraphEdge_333c9d69fed5eee7),
rel_ConstantValue_bf370ded014c6df6(&rel_ConstantValue_bf370ded014c6df6),
rel_InterProcAssign_bed60ee93a02e127(&rel_InterProcAssign_bed60ee93a02e127),
rel_LoadField_6018b2c33f454495(&rel_LoadField_6018b2c33f454495),
rel_LoadIndex_3a07e512c7efb9bd(&rel_LoadIndex_3a07e512c7efb9bd),
rel_PureMethod_ac3eca18d3064a10(&rel_PureMethod_ac3eca18d3064a10),
rel_VarEquals_a4540819e065ea89(&rel_VarEquals_a4540819e065ea89),
rel_VarPointsTo_c1a9f897b9f324f0(&rel_VarPointsTo_c1a9f897b9f324f0){
}

void Stratum_VarEquals_05ec4eda30a25b9b::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(VarEquals(var1,var2) :- 
   ConstantValue(var1,constant),
   ConstantValue(var2,constant).
in file main.dl [626:1-628:35])_");
if(!(rel_ConstantValue_bf370ded014c6df6->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ConstantValue_bf370ded014c6df6_op_ctxt,rel_ConstantValue_bf370ded014c6df6->createContext());
CREATE_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt,rel_VarEquals_a4540819e065ea89->createContext());
for(const auto& env0 : *rel_ConstantValue_bf370ded014c6df6) {
auto range = rel_ConstantValue_bf370ded014c6df6->lowerUpperRange_01(Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,2>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_ConstantValue_bf370ded014c6df6_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[0])}};
rel_VarEquals_a4540819e065ea89->insert(tuple,READ_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(VarEquals(var,var) :- 
   VarPointsTo(var,_,_,_).
in file main.dl [630:1-631:31])_");
if(!(rel_VarPointsTo_c1a9f897b9f324f0->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt,rel_VarEquals_a4540819e065ea89->createContext());
CREATE_OP_CONTEXT(rel_VarPointsTo_c1a9f897b9f324f0_op_ctxt,rel_VarPointsTo_c1a9f897b9f324f0->createContext());
for(const auto& env0 : *rel_VarPointsTo_c1a9f897b9f324f0) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[0])}};
rel_VarEquals_a4540819e065ea89->insert(tuple,READ_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(VarEquals(var1,var2) :- 
   AssignVar(var1,var2).
in file main.dl [640:1-641:88])_");
if(!(rel_AssignVar_b173aa4bb6352b3a->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_AssignVar_b173aa4bb6352b3a_op_ctxt,rel_AssignVar_b173aa4bb6352b3a->createContext());
CREATE_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt,rel_VarEquals_a4540819e065ea89->createContext());
for(const auto& env0 : *rel_AssignVar_b173aa4bb6352b3a) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_VarEquals_a4540819e065ea89->insert(tuple,READ_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(VarEquals(var1,var2) :- 
   AssignGlobal(var1,var2).
in file main.dl [640:1-641:88])_");
if(!(rel_AssignGlobal_f60b14713e1f1ab7->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_AssignGlobal_f60b14713e1f1ab7_op_ctxt,rel_AssignGlobal_f60b14713e1f1ab7->createContext());
CREATE_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt,rel_VarEquals_a4540819e065ea89->createContext());
for(const auto& env0 : *rel_AssignGlobal_f60b14713e1f1ab7) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_VarEquals_a4540819e065ea89->insert(tuple,READ_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt));
}
}
();}
signalHandler->setMsg(R"_(VarEquals(var1,var2) :- 
   InterProcAssign(var1,_,var2,_).
in file main.dl [640:1-641:88])_");
if(!(rel_InterProcAssign_bed60ee93a02e127->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_InterProcAssign_bed60ee93a02e127_op_ctxt,rel_InterProcAssign_bed60ee93a02e127->createContext());
CREATE_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt,rel_VarEquals_a4540819e065ea89->createContext());
for(const auto& env0 : *rel_InterProcAssign_bed60ee93a02e127) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[2])}};
rel_VarEquals_a4540819e065ea89->insert(tuple,READ_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt));
}
}
();}
[&](){
CREATE_OP_CONTEXT(rel_delta_VarEquals_9c226744c7f75a0b_op_ctxt,rel_delta_VarEquals_9c226744c7f75a0b->createContext());
CREATE_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt,rel_VarEquals_a4540819e065ea89->createContext());
for(const auto& env0 : *rel_VarEquals_a4540819e065ea89) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_delta_VarEquals_9c226744c7f75a0b->insert(tuple,READ_OP_CONTEXT(rel_delta_VarEquals_9c226744c7f75a0b_op_ctxt));
}
}
();iter = 0;
for(;;) {
signalHandler->setMsg(R"_(VarEquals(var1,var2) :- 
   VarEquals(var2,var1).
in file main.dl [633:1-634:27])_");
if(!(rel_delta_VarEquals_9c226744c7f75a0b->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarEquals_9c226744c7f75a0b_op_ctxt,rel_delta_VarEquals_9c226744c7f75a0b->createContext());
CREATE_OP_CONTEXT(rel_new_VarEquals_a3a3c796750fc858_op_ctxt,rel_new_VarEquals_a3a3c796750fc858->createContext());
CREATE_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt,rel_VarEquals_a4540819e065ea89->createContext());
for(const auto& env0 : *rel_delta_VarEquals_9c226744c7f75a0b) {
if( !(rel_VarEquals_a4540819e065ea89->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env0[0])}},READ_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[1]),ramBitCast(env0[0])}};
rel_new_VarEquals_a3a3c796750fc858->insert(tuple,READ_OP_CONTEXT(rel_new_VarEquals_a3a3c796750fc858_op_ctxt));
}
}
}
();}
signalHandler->setMsg(R"_(VarEquals(var1,var3) :- 
   VarEquals(var1,var2),
   VarEquals(var2,var3).
in file main.dl [636:1-638:27])_");
if(!(rel_delta_VarEquals_9c226744c7f75a0b->empty()) && !(rel_VarEquals_a4540819e065ea89->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarEquals_9c226744c7f75a0b_op_ctxt,rel_delta_VarEquals_9c226744c7f75a0b->createContext());
CREATE_OP_CONTEXT(rel_new_VarEquals_a3a3c796750fc858_op_ctxt,rel_new_VarEquals_a3a3c796750fc858->createContext());
CREATE_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt,rel_VarEquals_a4540819e065ea89->createContext());
for(const auto& env0 : *rel_delta_VarEquals_9c226744c7f75a0b) {
auto range = rel_VarEquals_a4540819e065ea89->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_VarEquals_a4540819e065ea89->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt))) && !(rel_delta_VarEquals_9c226744c7f75a0b->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_delta_VarEquals_9c226744c7f75a0b_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1])}};
rel_new_VarEquals_a3a3c796750fc858->insert(tuple,READ_OP_CONTEXT(rel_new_VarEquals_a3a3c796750fc858_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(VarEquals(var1,var3) :- 
   VarEquals(var1,var2),
   VarEquals(var2,var3).
in file main.dl [636:1-638:27])_");
if(!(rel_VarEquals_a4540819e065ea89->empty()) && !(rel_delta_VarEquals_9c226744c7f75a0b->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarEquals_9c226744c7f75a0b_op_ctxt,rel_delta_VarEquals_9c226744c7f75a0b->createContext());
CREATE_OP_CONTEXT(rel_new_VarEquals_a3a3c796750fc858_op_ctxt,rel_new_VarEquals_a3a3c796750fc858->createContext());
CREATE_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt,rel_VarEquals_a4540819e065ea89->createContext());
for(const auto& env0 : *rel_VarEquals_a4540819e065ea89) {
auto range = rel_delta_VarEquals_9c226744c7f75a0b->lowerUpperRange_10(Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,2>{{ramBitCast(env0[1]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_delta_VarEquals_9c226744c7f75a0b_op_ctxt));
for(const auto& env1 : range) {
if( !(rel_VarEquals_a4540819e065ea89->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[1])}};
rel_new_VarEquals_a3a3c796750fc858->insert(tuple,READ_OP_CONTEXT(rel_new_VarEquals_a3a3c796750fc858_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(VarEquals(var1,var2) :- 
   LoadField(var1,base1,fld),
   LoadField(var2,base2,fld),
   VarEquals(base1,base2).
in file main.dl [643:1-646:29])_");
if(!(rel_delta_VarEquals_9c226744c7f75a0b->empty()) && !(rel_LoadField_6018b2c33f454495->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarEquals_9c226744c7f75a0b_op_ctxt,rel_delta_VarEquals_9c226744c7f75a0b->createContext());
CREATE_OP_CONTEXT(rel_new_VarEquals_a3a3c796750fc858_op_ctxt,rel_new_VarEquals_a3a3c796750fc858->createContext());
CREATE_OP_CONTEXT(rel_LoadField_6018b2c33f454495_op_ctxt,rel_LoadField_6018b2c33f454495->createContext());
CREATE_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt,rel_VarEquals_a4540819e065ea89->createContext());
for(const auto& env0 : *rel_LoadField_6018b2c33f454495) {
auto range = rel_LoadField_6018b2c33f454495->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_LoadField_6018b2c33f454495_op_ctxt));
for(const auto& env1 : range) {
if( rel_delta_VarEquals_9c226744c7f75a0b->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_delta_VarEquals_9c226744c7f75a0b_op_ctxt)) && !(rel_VarEquals_a4540819e065ea89->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[0])}};
rel_new_VarEquals_a3a3c796750fc858->insert(tuple,READ_OP_CONTEXT(rel_new_VarEquals_a3a3c796750fc858_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(VarEquals(var1,var2) :- 
   LoadIndex(var1,base1,i1),
   LoadIndex(var2,base2,i2),
   VarEquals(i1,i2),
   VarEquals(base1,base2).
in file main.dl [643:1-646:29])_");
if(!(rel_delta_VarEquals_9c226744c7f75a0b->empty()) && !(rel_LoadIndex_3a07e512c7efb9bd->empty()) && !(rel_VarEquals_a4540819e065ea89->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarEquals_9c226744c7f75a0b_op_ctxt,rel_delta_VarEquals_9c226744c7f75a0b->createContext());
CREATE_OP_CONTEXT(rel_new_VarEquals_a3a3c796750fc858_op_ctxt,rel_new_VarEquals_a3a3c796750fc858->createContext());
CREATE_OP_CONTEXT(rel_LoadIndex_3a07e512c7efb9bd_op_ctxt,rel_LoadIndex_3a07e512c7efb9bd->createContext());
CREATE_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt,rel_VarEquals_a4540819e065ea89->createContext());
for(const auto& env0 : *rel_LoadIndex_3a07e512c7efb9bd) {
for(const auto& env1 : *rel_LoadIndex_3a07e512c7efb9bd) {
if( !(rel_delta_VarEquals_9c226744c7f75a0b->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_delta_VarEquals_9c226744c7f75a0b_op_ctxt))) && rel_VarEquals_a4540819e065ea89->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt)) && rel_delta_VarEquals_9c226744c7f75a0b->contains(Tuple<RamDomain,2>{{ramBitCast(env0[2]),ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_delta_VarEquals_9c226744c7f75a0b_op_ctxt)) && !(rel_VarEquals_a4540819e065ea89->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[0])}};
rel_new_VarEquals_a3a3c796750fc858->insert(tuple,READ_OP_CONTEXT(rel_new_VarEquals_a3a3c796750fc858_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(VarEquals(var1,var2) :- 
   LoadIndex(var1,base1,i1),
   LoadIndex(var2,base2,i2),
   VarEquals(i1,i2),
   VarEquals(base1,base2).
in file main.dl [643:1-646:29])_");
if(!(rel_VarEquals_a4540819e065ea89->empty()) && !(rel_LoadIndex_3a07e512c7efb9bd->empty()) && !(rel_delta_VarEquals_9c226744c7f75a0b->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarEquals_9c226744c7f75a0b_op_ctxt,rel_delta_VarEquals_9c226744c7f75a0b->createContext());
CREATE_OP_CONTEXT(rel_new_VarEquals_a3a3c796750fc858_op_ctxt,rel_new_VarEquals_a3a3c796750fc858->createContext());
CREATE_OP_CONTEXT(rel_LoadIndex_3a07e512c7efb9bd_op_ctxt,rel_LoadIndex_3a07e512c7efb9bd->createContext());
CREATE_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt,rel_VarEquals_a4540819e065ea89->createContext());
for(const auto& env0 : *rel_LoadIndex_3a07e512c7efb9bd) {
for(const auto& env1 : *rel_LoadIndex_3a07e512c7efb9bd) {
if( rel_delta_VarEquals_9c226744c7f75a0b->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_delta_VarEquals_9c226744c7f75a0b_op_ctxt)) && rel_VarEquals_a4540819e065ea89->contains(Tuple<RamDomain,2>{{ramBitCast(env0[2]),ramBitCast(env1[2])}},READ_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt)) && !(rel_VarEquals_a4540819e065ea89->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[0])}};
rel_new_VarEquals_a3a3c796750fc858->insert(tuple,READ_OP_CONTEXT(rel_new_VarEquals_a3a3c796750fc858_op_ctxt));
}
}
}
}
();}
signalHandler->setMsg(R"_(VarEquals(var1,var2) :- 
   CallGraphEdge(invo1,_,meth,_),
   ActualParam(1,invo1,param1),
   ActualReturn(0,invo1,var1),
   CallGraphEdge(invo2,_,meth,_),
   ActualParam(1,invo2,param2),
   ActualReturn(0,invo2,var2),
   PureMethod(meth),
   VarEquals(param1,param2).
in file main.dl [650:1-654:31])_");
if(!(rel_delta_VarEquals_9c226744c7f75a0b->empty()) && !(rel_CallGraphEdge_333c9d69fed5eee7->empty()) && !(rel_ActualParam_b7a735170493e717->empty()) && !(rel_PureMethod_ac3eca18d3064a10->empty()) && !(rel_ActualReturn_8bc9db09e057aa22->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarEquals_9c226744c7f75a0b_op_ctxt,rel_delta_VarEquals_9c226744c7f75a0b->createContext());
CREATE_OP_CONTEXT(rel_new_VarEquals_a3a3c796750fc858_op_ctxt,rel_new_VarEquals_a3a3c796750fc858->createContext());
CREATE_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt,rel_ActualParam_b7a735170493e717->createContext());
CREATE_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt,rel_ActualReturn_8bc9db09e057aa22->createContext());
CREATE_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt,rel_CallGraphEdge_333c9d69fed5eee7->createContext());
CREATE_OP_CONTEXT(rel_PureMethod_ac3eca18d3064a10_op_ctxt,rel_PureMethod_ac3eca18d3064a10->createContext());
CREATE_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt,rel_VarEquals_a4540819e065ea89->createContext());
for(const auto& env0 : *rel_CallGraphEdge_333c9d69fed5eee7) {
if( rel_PureMethod_ac3eca18d3064a10->contains(Tuple<RamDomain,1>{{ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_PureMethod_ac3eca18d3064a10_op_ctxt))) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(RamSigned(1)), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(1)), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_ActualReturn_8bc9db09e057aa22->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(RamSigned(0)), ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(0)), ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt));
for(const auto& env2 : range) {
auto range = rel_CallGraphEdge_333c9d69fed5eee7->lowerUpperRange_0010(Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_CallGraphEdge_333c9d69fed5eee7_op_ctxt));
for(const auto& env3 : range) {
auto range = rel_ActualParam_b7a735170493e717->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(RamSigned(1)), ramBitCast(env3[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(1)), ramBitCast(env3[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualParam_b7a735170493e717_op_ctxt));
for(const auto& env4 : range) {
if( rel_delta_VarEquals_9c226744c7f75a0b->contains(Tuple<RamDomain,2>{{ramBitCast(env1[2]),ramBitCast(env4[2])}},READ_OP_CONTEXT(rel_delta_VarEquals_9c226744c7f75a0b_op_ctxt))) {
auto range = rel_ActualReturn_8bc9db09e057aa22->lowerUpperRange_110(Tuple<RamDomain,3>{{ramBitCast(RamSigned(0)), ramBitCast(env3[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,3>{{ramBitCast(RamSigned(0)), ramBitCast(env3[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_ActualReturn_8bc9db09e057aa22_op_ctxt));
for(const auto& env5 : range) {
if( !(rel_VarEquals_a4540819e065ea89->contains(Tuple<RamDomain,2>{{ramBitCast(env2[2]),ramBitCast(env5[2])}},READ_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env2[2]),ramBitCast(env5[2])}};
rel_new_VarEquals_a3a3c796750fc858->insert(tuple,READ_OP_CONTEXT(rel_new_VarEquals_a3a3c796750fc858_op_ctxt));
}
}
break;
}
}
}
}
}
}
}
}
();}
signalHandler->setMsg(R"_(VarEquals(var1,var2) :- 
   LoadIndex(var1,base1,i2),
   LoadIndex(var2,base2,i2),
   VarEquals(base1,base2).
in file main.dl [643:1-646:29])_");
if(!(rel_delta_VarEquals_9c226744c7f75a0b->empty()) && !(rel_LoadIndex_3a07e512c7efb9bd->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_delta_VarEquals_9c226744c7f75a0b_op_ctxt,rel_delta_VarEquals_9c226744c7f75a0b->createContext());
CREATE_OP_CONTEXT(rel_new_VarEquals_a3a3c796750fc858_op_ctxt,rel_new_VarEquals_a3a3c796750fc858->createContext());
CREATE_OP_CONTEXT(rel_LoadIndex_3a07e512c7efb9bd_op_ctxt,rel_LoadIndex_3a07e512c7efb9bd->createContext());
CREATE_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt,rel_VarEquals_a4540819e065ea89->createContext());
for(const auto& env0 : *rel_LoadIndex_3a07e512c7efb9bd) {
auto range = rel_LoadIndex_3a07e512c7efb9bd->lowerUpperRange_001(Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[2])}},Tuple<RamDomain,3>{{ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[2])}},READ_OP_CONTEXT(rel_LoadIndex_3a07e512c7efb9bd_op_ctxt));
for(const auto& env1 : range) {
if( rel_delta_VarEquals_9c226744c7f75a0b->contains(Tuple<RamDomain,2>{{ramBitCast(env0[1]),ramBitCast(env1[1])}},READ_OP_CONTEXT(rel_delta_VarEquals_9c226744c7f75a0b_op_ctxt)) && !(rel_VarEquals_a4540819e065ea89->contains(Tuple<RamDomain,2>{{ramBitCast(env0[0]),ramBitCast(env1[0])}},READ_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt)))) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env1[0])}};
rel_new_VarEquals_a3a3c796750fc858->insert(tuple,READ_OP_CONTEXT(rel_new_VarEquals_a3a3c796750fc858_op_ctxt));
}
}
}
}
();}
if(rel_new_VarEquals_a3a3c796750fc858->empty()) break;
[&](){
CREATE_OP_CONTEXT(rel_new_VarEquals_a3a3c796750fc858_op_ctxt,rel_new_VarEquals_a3a3c796750fc858->createContext());
CREATE_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt,rel_VarEquals_a4540819e065ea89->createContext());
for(const auto& env0 : *rel_new_VarEquals_a3a3c796750fc858) {
Tuple<RamDomain,2> tuple{{ramBitCast(env0[0]),ramBitCast(env0[1])}};
rel_VarEquals_a4540819e065ea89->insert(tuple,READ_OP_CONTEXT(rel_VarEquals_a4540819e065ea89_op_ctxt));
}
}
();std::swap(rel_delta_VarEquals_9c226744c7f75a0b, rel_new_VarEquals_a3a3c796750fc858);
rel_new_VarEquals_a3a3c796750fc858->purge();
iter++;
}
iter = 0;
rel_delta_VarEquals_9c226744c7f75a0b->purge();
rel_new_VarEquals_a3a3c796750fc858->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","var1\tvar2"},{"auxArity","0"},{"name","VarEquals"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"var1\", \"var2\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Var\", \"s:Var\"]}}"}});
if (outputDirectory == "-"){directiveMap["IO"] = "stdout"; directiveMap["headers"] = "true";}
else if (!outputDirectory.empty()) {directiveMap["output-dir"] = outputDirectory;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_VarEquals_a4540819e065ea89);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
if (pruneImdtRels) rel_ActualParam_b7a735170493e717->purge();
if (pruneImdtRels) rel_ActualReturn_8bc9db09e057aa22->purge();
if (pruneImdtRels) rel_AssignGlobal_f60b14713e1f1ab7->purge();
if (pruneImdtRels) rel_AssignVar_b173aa4bb6352b3a->purge();
if (pruneImdtRels) rel_ConstantValue_bf370ded014c6df6->purge();
if (pruneImdtRels) rel_InterProcAssign_bed60ee93a02e127->purge();
if (pruneImdtRels) rel_LoadField_6018b2c33f454495->purge();
if (pruneImdtRels) rel_LoadIndex_3a07e512c7efb9bd->purge();
if (pruneImdtRels) rel_PureMethod_ac3eca18d3064a10->purge();
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_VarInMethod_a8536a1473632e95 {
public:
 Stratum_VarInMethod_a8536a1473632e95(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__0_1__11__10::Type& rel_VarInMethod_a7f53498a99fbbab);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_ii__0_1__11__10::Type* rel_VarInMethod_a7f53498a99fbbab;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_VarInMethod_a8536a1473632e95::Stratum_VarInMethod_a8536a1473632e95(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__0_1__11__10::Type& rel_VarInMethod_a7f53498a99fbbab):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_VarInMethod_a7f53498a99fbbab(&rel_VarInMethod_a7f53498a99fbbab){
}

void Stratum_VarInMethod_a8536a1473632e95::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","var\tmeth"},{"auxArity","0"},{"fact-dir","."},{"name","VarInMethod"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"var\", \"meth\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Var\", \"s:Method\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_VarInMethod_a7f53498a99fbbab);
} catch (std::exception& e) {std::cerr << "Error loading VarInMethod data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_VarType_21873a9aa4b74080 {
public:
 Stratum_VarType_21873a9aa4b74080(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__1_0__0__11__10__01::Type& rel_VarType_28c8217e193eb319);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_ii__1_0__0__11__10__01::Type* rel_VarType_28c8217e193eb319;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_VarType_21873a9aa4b74080::Stratum_VarType_21873a9aa4b74080(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_ii__1_0__0__11__10__01::Type& rel_VarType_28c8217e193eb319):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_VarType_28c8217e193eb319(&rel_VarType_28c8217e193eb319){
}

void Stratum_VarType_21873a9aa4b74080::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","var\ttype"},{"auxArity","0"},{"fact-dir","."},{"name","VarType"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"var\", \"type\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Var\", \"s:Type\"]}}"}});
if (!inputDirectory.empty()) {directiveMap["fact-dir"] = inputDirectory;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_VarType_28c8217e193eb319);
} catch (std::exception& e) {std::cerr << "Error loading VarType data: " << e.what() << '\n';
exit(1);
}
}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_agg_single_db5503f549ec2fba {
public:
 Stratum_agg_single_db5503f549ec2fba(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_i__0__1::Type& rel__agg_single_bd0385c34ef6548a,t_btree_iiiii__0_1_2_3_4__11111::Type& rel__agg_subclause5_277251a440f34db7);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_i__0__1::Type* rel__agg_single_bd0385c34ef6548a;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel__agg_subclause5_277251a440f34db7;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_agg_single_db5503f549ec2fba::Stratum_agg_single_db5503f549ec2fba(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_i__0__1::Type& rel__agg_single_bd0385c34ef6548a,t_btree_iiiii__0_1_2_3_4__11111::Type& rel__agg_subclause5_277251a440f34db7):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel__agg_single_bd0385c34ef6548a(&rel__agg_single_bd0385c34ef6548a),
rel__agg_subclause5_277251a440f34db7(&rel__agg_subclause5_277251a440f34db7){
}

void Stratum_agg_single_db5503f549ec2fba::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(__agg_single(@generator_0) :- 
   @generator_0 = count : { __agg_subclause5(+underscore_657,+underscore_658,+underscore_659,+underscore_660,+underscore_661) }.
in file  [1:1-1:1])_");
[&](){
CREATE_OP_CONTEXT(rel__agg_single_bd0385c34ef6548a_op_ctxt,rel__agg_single_bd0385c34ef6548a->createContext());
CREATE_OP_CONTEXT(rel__agg_subclause5_277251a440f34db7_op_ctxt,rel__agg_subclause5_277251a440f34db7->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel__agg_subclause5_277251a440f34db7->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel__agg_single_bd0385c34ef6548a->insert(tuple,READ_OP_CONTEXT(rel__agg_single_bd0385c34ef6548a_op_ctxt));
}
}
();if (pruneImdtRels) rel__agg_subclause5_277251a440f34db7->purge();
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_agg_single0_c5854e9629edb7b2 {
public:
 Stratum_agg_single0_c5854e9629edb7b2(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_i__0__1::Type& rel__agg_single0_ae1fba617ee8151c,t_btree_iiiii__0_1_2_3_4__11111::Type& rel__agg_subclause6_2a58958a8d13999d);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_i__0__1::Type* rel__agg_single0_ae1fba617ee8151c;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel__agg_subclause6_2a58958a8d13999d;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_agg_single0_c5854e9629edb7b2::Stratum_agg_single0_c5854e9629edb7b2(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_i__0__1::Type& rel__agg_single0_ae1fba617ee8151c,t_btree_iiiii__0_1_2_3_4__11111::Type& rel__agg_subclause6_2a58958a8d13999d):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel__agg_single0_ae1fba617ee8151c(&rel__agg_single0_ae1fba617ee8151c),
rel__agg_subclause6_2a58958a8d13999d(&rel__agg_subclause6_2a58958a8d13999d){
}

void Stratum_agg_single0_c5854e9629edb7b2::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(__agg_single0(@generator_0) :- 
   @generator_0 = count : { __agg_subclause6(+underscore_662,+underscore_663,+underscore_664,+underscore_665,+underscore_666) }.
in file  [1:1-1:1])_");
[&](){
CREATE_OP_CONTEXT(rel__agg_single0_ae1fba617ee8151c_op_ctxt,rel__agg_single0_ae1fba617ee8151c->createContext());
CREATE_OP_CONTEXT(rel__agg_subclause6_2a58958a8d13999d_op_ctxt,rel__agg_subclause6_2a58958a8d13999d->createContext());
Tuple<RamDomain,1> env0;
env0[0] = rel__agg_subclause6_2a58958a8d13999d->size();
if( (ramBitCast<RamDomain>(env0[0]) == ramBitCast<RamDomain>(env0[0]))) {
Tuple<RamDomain,1> tuple{{ramBitCast(env0[0])}};
rel__agg_single0_ae1fba617ee8151c->insert(tuple,READ_OP_CONTEXT(rel__agg_single0_ae1fba617ee8151c_op_ctxt));
}
}
();if (pruneImdtRels) rel__agg_subclause6_2a58958a8d13999d->purge();
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_agg_subclause_b5e89299bb3d014c {
public:
 Stratum_agg_subclause_b5e89299bb3d014c(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPair_a5a4124c4969f589,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a,t_btree_iiiiiii__0_6_1_2_3_4_5__1111111__1000001::Type& rel__agg_subclause_32d5cc024cc79173);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__0_1_2_3__1111::Type* rel_ModelPair_a5a4124c4969f589;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_ValOrTestDataWithModel_2810ba231c0c185a;
t_btree_iiiiiii__0_6_1_2_3_4_5__1111111__1000001::Type* rel__agg_subclause_32d5cc024cc79173;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_agg_subclause_b5e89299bb3d014c::Stratum_agg_subclause_b5e89299bb3d014c(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPair_a5a4124c4969f589,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a,t_btree_iiiiiii__0_6_1_2_3_4_5__1111111__1000001::Type& rel__agg_subclause_32d5cc024cc79173):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_ModelPair_a5a4124c4969f589(&rel_ModelPair_a5a4124c4969f589),
rel_ValOrTestDataWithModel_2810ba231c0c185a(&rel_ValOrTestDataWithModel_2810ba231c0c185a),
rel__agg_subclause_32d5cc024cc79173(&rel__agg_subclause_32d5cc024cc79173){
}

void Stratum_agg_subclause_b5e89299bb3d014c::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(__agg_subclause(ctx1,ctx20,invo20,meth20,test0,testModel0,trainModel) :- 
   ModelPair(testModel0,ctx20,trainModel,ctx1),
   ValOrTestDataWithModel(testModel0,test0,invo20,meth20,ctx20).
in file  [1:1-1:1])_");
if(!(rel_ModelPair_a5a4124c4969f589->empty()) && !(rel_ValOrTestDataWithModel_2810ba231c0c185a->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ModelPair_a5a4124c4969f589_op_ctxt,rel_ModelPair_a5a4124c4969f589->createContext());
CREATE_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt,rel_ValOrTestDataWithModel_2810ba231c0c185a->createContext());
CREATE_OP_CONTEXT(rel__agg_subclause_32d5cc024cc79173_op_ctxt,rel__agg_subclause_32d5cc024cc79173->createContext());
for(const auto& env0 : *rel_ModelPair_a5a4124c4969f589) {
auto range = rel_ValOrTestDataWithModel_2810ba231c0c185a->lowerUpperRange_10001(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,7> tuple{{ramBitCast(env0[3]),ramBitCast(env0[1]),ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env1[1]),ramBitCast(env0[0]),ramBitCast(env0[2])}};
rel__agg_subclause_32d5cc024cc79173->insert(tuple,READ_OP_CONTEXT(rel__agg_subclause_32d5cc024cc79173_op_ctxt));
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_agg_subclause0_2f6b37acb5587509 {
public:
 Stratum_agg_subclause0_2f6b37acb5587509(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPair_a5a4124c4969f589,t_btree_iiiiiiiiii__0_4_5_6_7_8_9_1_2_3__1111111111__1000111111::Type& rel_Telemetry_OverlapLeak_d0dea07db73811e8,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a,t_btree_iiiiiiiiii__0_2_4_8_9_1_3_5_6_7__1010100011__1111111111::Type& rel__agg_subclause0_1a0a441f9870a373);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__0_1_2_3__1111::Type* rel_ModelPair_a5a4124c4969f589;
t_btree_iiiiiiiiii__0_4_5_6_7_8_9_1_2_3__1111111111__1000111111::Type* rel_Telemetry_OverlapLeak_d0dea07db73811e8;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_ValOrTestDataWithModel_2810ba231c0c185a;
t_btree_iiiiiiiiii__0_2_4_8_9_1_3_5_6_7__1010100011__1111111111::Type* rel__agg_subclause0_1a0a441f9870a373;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_agg_subclause0_2f6b37acb5587509::Stratum_agg_subclause0_2f6b37acb5587509(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPair_a5a4124c4969f589,t_btree_iiiiiiiiii__0_4_5_6_7_8_9_1_2_3__1111111111__1000111111::Type& rel_Telemetry_OverlapLeak_d0dea07db73811e8,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a,t_btree_iiiiiiiiii__0_2_4_8_9_1_3_5_6_7__1010100011__1111111111::Type& rel__agg_subclause0_1a0a441f9870a373):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_ModelPair_a5a4124c4969f589(&rel_ModelPair_a5a4124c4969f589),
rel_Telemetry_OverlapLeak_d0dea07db73811e8(&rel_Telemetry_OverlapLeak_d0dea07db73811e8),
rel_ValOrTestDataWithModel_2810ba231c0c185a(&rel_ValOrTestDataWithModel_2810ba231c0c185a),
rel__agg_subclause0_1a0a441f9870a373(&rel__agg_subclause0_1a0a441f9870a373){
}

void Stratum_agg_subclause0_2f6b37acb5587509::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(__agg_subclause0(ctx1,ctx2,invo,invo2,meth,meth2,test,testModel,train,trainModel) :- 
   ModelPair(testModel,ctx2,trainModel,ctx1),
   ValOrTestDataWithModel(testModel,test,invo2,meth2,ctx2),
   Telemetry_OverlapLeak(trainModel,train,invo,meth,ctx1,testModel,test,invo2,meth2,ctx2).
in file  [1:1-1:1])_");
if(!(rel_ValOrTestDataWithModel_2810ba231c0c185a->empty()) && !(rel_Telemetry_OverlapLeak_d0dea07db73811e8->empty()) && !(rel_ModelPair_a5a4124c4969f589->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ModelPair_a5a4124c4969f589_op_ctxt,rel_ModelPair_a5a4124c4969f589->createContext());
CREATE_OP_CONTEXT(rel_Telemetry_OverlapLeak_d0dea07db73811e8_op_ctxt,rel_Telemetry_OverlapLeak_d0dea07db73811e8->createContext());
CREATE_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt,rel_ValOrTestDataWithModel_2810ba231c0c185a->createContext());
CREATE_OP_CONTEXT(rel__agg_subclause0_1a0a441f9870a373_op_ctxt,rel__agg_subclause0_1a0a441f9870a373->createContext());
for(const auto& env0 : *rel_ModelPair_a5a4124c4969f589) {
auto range = rel_ValOrTestDataWithModel_2810ba231c0c185a->lowerUpperRange_10001(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_Telemetry_OverlapLeak_d0dea07db73811e8->lowerUpperRange_1000111111(Tuple<RamDomain,10>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[3]), ramBitCast(env0[0]), ramBitCast(env1[1]), ramBitCast(env1[2]), ramBitCast(env1[3]), ramBitCast(env0[1])}},Tuple<RamDomain,10>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[3]), ramBitCast(env0[0]), ramBitCast(env1[1]), ramBitCast(env1[2]), ramBitCast(env1[3]), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_Telemetry_OverlapLeak_d0dea07db73811e8_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,10> tuple{{ramBitCast(env0[3]),ramBitCast(env0[1]),ramBitCast(env2[2]),ramBitCast(env1[2]),ramBitCast(env2[3]),ramBitCast(env1[3]),ramBitCast(env1[1]),ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env0[2])}};
rel__agg_subclause0_1a0a441f9870a373->insert(tuple,READ_OP_CONTEXT(rel__agg_subclause0_1a0a441f9870a373_op_ctxt));
}
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_agg_subclause1_b0d49bdb175ed736 {
public:
 Stratum_agg_subclause1_b0d49bdb175ed736(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_InvokePath_12c42b7c9b655a96,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPairCandidate_9322881dca01d8da,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiiiiii__0_1_3_5_6_2_4_7__11010110__11111111::Type& rel__agg_subclause1_6b72bc2ad4593b7d);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__0_1_2_3__1111__1100::Type* rel_InvokePath_12c42b7c9b655a96;
t_btree_iiii__0_1_2_3__1111::Type* rel_ModelPairCandidate_9322881dca01d8da;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_TrainingDataWithModel_bf0078ce702b39b8;
t_btree_iiiiiiii__0_1_3_5_6_2_4_7__11010110__11111111::Type* rel__agg_subclause1_6b72bc2ad4593b7d;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_agg_subclause1_b0d49bdb175ed736::Stratum_agg_subclause1_b0d49bdb175ed736(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111__1100::Type& rel_InvokePath_12c42b7c9b655a96,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPairCandidate_9322881dca01d8da,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiiiiii__0_1_3_5_6_2_4_7__11010110__11111111::Type& rel__agg_subclause1_6b72bc2ad4593b7d):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_InvokePath_12c42b7c9b655a96(&rel_InvokePath_12c42b7c9b655a96),
rel_ModelPairCandidate_9322881dca01d8da(&rel_ModelPairCandidate_9322881dca01d8da),
rel_TrainingDataWithModel_bf0078ce702b39b8(&rel_TrainingDataWithModel_bf0078ce702b39b8),
rel__agg_subclause1_6b72bc2ad4593b7d(&rel__agg_subclause1_6b72bc2ad4593b7d){
}

void Stratum_agg_subclause1_b0d49bdb175ed736::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(__agg_subclause1(ctx1,ctx2,ctx3,invo2,invo3,testModel,trainModel,trainModel2) :- 
   ModelPairCandidate(testModel,ctx1,trainModel2,ctx3),
   TrainingDataWithModel(trainModel2,_,invo3,_,ctx3),
   InvokePath(invo3,ctx3,invo2,ctx2),
   trainModel2 != trainModel,
   ModelPairCandidate(_,_,trainModel,_).
in file  [1:1-1:1])_");
if(!(rel_InvokePath_12c42b7c9b655a96->empty()) && !(rel_TrainingDataWithModel_bf0078ce702b39b8->empty()) && !(rel_ModelPairCandidate_9322881dca01d8da->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_InvokePath_12c42b7c9b655a96_op_ctxt,rel_InvokePath_12c42b7c9b655a96->createContext());
CREATE_OP_CONTEXT(rel_ModelPairCandidate_9322881dca01d8da_op_ctxt,rel_ModelPairCandidate_9322881dca01d8da->createContext());
CREATE_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt,rel_TrainingDataWithModel_bf0078ce702b39b8->createContext());
CREATE_OP_CONTEXT(rel__agg_subclause1_6b72bc2ad4593b7d_op_ctxt,rel__agg_subclause1_6b72bc2ad4593b7d->createContext());
for(const auto& env0 : *rel_ModelPairCandidate_9322881dca01d8da) {
auto range = rel_TrainingDataWithModel_bf0078ce702b39b8->lowerUpperRange_10001(Tuple<RamDomain,5>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[3])}},Tuple<RamDomain,5>{{ramBitCast(env0[2]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[3])}},READ_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt));
for(const auto& env1 : range) {
auto range = rel_InvokePath_12c42b7c9b655a96->lowerUpperRange_1100(Tuple<RamDomain,4>{{ramBitCast(env1[2]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED)}},Tuple<RamDomain,4>{{ramBitCast(env1[2]), ramBitCast(env0[3]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED)}},READ_OP_CONTEXT(rel_InvokePath_12c42b7c9b655a96_op_ctxt));
for(const auto& env2 : range) {
for(const auto& env3 : *rel_ModelPairCandidate_9322881dca01d8da) {
if( (ramBitCast<RamDomain>(env0[2]) != ramBitCast<RamDomain>(env3[2]))) {
Tuple<RamDomain,8> tuple{{ramBitCast(env0[1]),ramBitCast(env2[3]),ramBitCast(env0[3]),ramBitCast(env2[2]),ramBitCast(env1[2]),ramBitCast(env0[0]),ramBitCast(env3[2]),ramBitCast(env0[2])}};
rel__agg_subclause1_6b72bc2ad4593b7d->insert(tuple,READ_OP_CONTEXT(rel__agg_subclause1_6b72bc2ad4593b7d_op_ctxt));
}
}
}
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_agg_subclause2_2c6d1d605cb671cd {
public:
 Stratum_agg_subclause2_2c6d1d605cb671cd(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_DataOverlap_5a4300eece6cb523,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPair_a5a4124c4969f589,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TestDataWithModel_2269d730f5799893,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiiii__1_4_5_0_2_3__111111__010011::Type& rel__agg_subclause2_47fa128cc9c98832);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__0_1_2_3__1111::Type* rel_DataOverlap_5a4300eece6cb523;
t_btree_iiii__0_1_2_3__1111::Type* rel_ModelPair_a5a4124c4969f589;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_TestDataWithModel_2269d730f5799893;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_TrainingDataWithModel_bf0078ce702b39b8;
t_btree_iiiiii__1_4_5_0_2_3__111111__010011::Type* rel__agg_subclause2_47fa128cc9c98832;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_agg_subclause2_2c6d1d605cb671cd::Stratum_agg_subclause2_2c6d1d605cb671cd(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_DataOverlap_5a4300eece6cb523,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPair_a5a4124c4969f589,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TestDataWithModel_2269d730f5799893,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiiii__1_4_5_0_2_3__111111__010011::Type& rel__agg_subclause2_47fa128cc9c98832):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_DataOverlap_5a4300eece6cb523(&rel_DataOverlap_5a4300eece6cb523),
rel_ModelPair_a5a4124c4969f589(&rel_ModelPair_a5a4124c4969f589),
rel_TestDataWithModel_2269d730f5799893(&rel_TestDataWithModel_2269d730f5799893),
rel_TrainingDataWithModel_bf0078ce702b39b8(&rel_TrainingDataWithModel_bf0078ce702b39b8),
rel__agg_subclause2_47fa128cc9c98832(&rel__agg_subclause2_47fa128cc9c98832){
}

void Stratum_agg_subclause2_2c6d1d605cb671cd::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(__agg_subclause2(ctx1,ctx2,test,testModel,train,trainModel) :- 
   ModelPair(testModel,ctx1,trainModel,ctx2),
   TestDataWithModel(testModel,test,_,_,ctx1),
   !DataOverlap(train,ctx2,test,ctx1),
   TrainingDataWithModel(_,train,_,_,_).
in file  [1:1-1:1])_");
if(!(rel_TestDataWithModel_2269d730f5799893->empty()) && !(rel_TrainingDataWithModel_bf0078ce702b39b8->empty()) && !(rel_ModelPair_a5a4124c4969f589->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt,rel_DataOverlap_5a4300eece6cb523->createContext());
CREATE_OP_CONTEXT(rel_ModelPair_a5a4124c4969f589_op_ctxt,rel_ModelPair_a5a4124c4969f589->createContext());
CREATE_OP_CONTEXT(rel_TestDataWithModel_2269d730f5799893_op_ctxt,rel_TestDataWithModel_2269d730f5799893->createContext());
CREATE_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt,rel_TrainingDataWithModel_bf0078ce702b39b8->createContext());
CREATE_OP_CONTEXT(rel__agg_subclause2_47fa128cc9c98832_op_ctxt,rel__agg_subclause2_47fa128cc9c98832->createContext());
for(const auto& env0 : *rel_ModelPair_a5a4124c4969f589) {
auto range = rel_TestDataWithModel_2269d730f5799893->lowerUpperRange_10001(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_TestDataWithModel_2269d730f5799893_op_ctxt));
for(const auto& env1 : range) {
for(const auto& env2 : *rel_TrainingDataWithModel_bf0078ce702b39b8) {
if( !(rel_DataOverlap_5a4300eece6cb523->contains(Tuple<RamDomain,4>{{ramBitCast(env2[1]),ramBitCast(env0[3]),ramBitCast(env1[1]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt)))) {
Tuple<RamDomain,6> tuple{{ramBitCast(env0[1]),ramBitCast(env0[3]),ramBitCast(env1[1]),ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env0[2])}};
rel__agg_subclause2_47fa128cc9c98832->insert(tuple,READ_OP_CONTEXT(rel__agg_subclause2_47fa128cc9c98832_op_ctxt));
}
}
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_agg_subclause3_801d3331bcc43fe8 {
public:
 Stratum_agg_subclause3_801d3331bcc43fe8(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_DataOverlap_5a4300eece6cb523,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPair_a5a4124c4969f589,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a,t_btree_iiiiii__1_4_5_0_2_3__111111__010011::Type& rel__agg_subclause3_6933ce586d204815);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__0_1_2_3__1111::Type* rel_DataOverlap_5a4300eece6cb523;
t_btree_iiii__0_1_2_3__1111::Type* rel_ModelPair_a5a4124c4969f589;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_TrainingDataWithModel_bf0078ce702b39b8;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_ValOrTestDataWithModel_2810ba231c0c185a;
t_btree_iiiiii__1_4_5_0_2_3__111111__010011::Type* rel__agg_subclause3_6933ce586d204815;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_agg_subclause3_801d3331bcc43fe8::Stratum_agg_subclause3_801d3331bcc43fe8(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_DataOverlap_5a4300eece6cb523,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPair_a5a4124c4969f589,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TrainingDataWithModel_bf0078ce702b39b8,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_ValOrTestDataWithModel_2810ba231c0c185a,t_btree_iiiiii__1_4_5_0_2_3__111111__010011::Type& rel__agg_subclause3_6933ce586d204815):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_DataOverlap_5a4300eece6cb523(&rel_DataOverlap_5a4300eece6cb523),
rel_ModelPair_a5a4124c4969f589(&rel_ModelPair_a5a4124c4969f589),
rel_TrainingDataWithModel_bf0078ce702b39b8(&rel_TrainingDataWithModel_bf0078ce702b39b8),
rel_ValOrTestDataWithModel_2810ba231c0c185a(&rel_ValOrTestDataWithModel_2810ba231c0c185a),
rel__agg_subclause3_6933ce586d204815(&rel__agg_subclause3_6933ce586d204815){
}

void Stratum_agg_subclause3_801d3331bcc43fe8::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(__agg_subclause3(ctx1,ctx2,test,testModel,train,trainModel) :- 
   ModelPair(testModel,ctx1,trainModel,ctx2),
   ValOrTestDataWithModel(testModel,test,_,_,ctx1),
   !DataOverlap(train,ctx2,test,ctx1),
   TrainingDataWithModel(_,train,_,_,_).
in file  [1:1-1:1])_");
if(!(rel_ValOrTestDataWithModel_2810ba231c0c185a->empty()) && !(rel_TrainingDataWithModel_bf0078ce702b39b8->empty()) && !(rel_ModelPair_a5a4124c4969f589->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt,rel_DataOverlap_5a4300eece6cb523->createContext());
CREATE_OP_CONTEXT(rel_ModelPair_a5a4124c4969f589_op_ctxt,rel_ModelPair_a5a4124c4969f589->createContext());
CREATE_OP_CONTEXT(rel_TrainingDataWithModel_bf0078ce702b39b8_op_ctxt,rel_TrainingDataWithModel_bf0078ce702b39b8->createContext());
CREATE_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt,rel_ValOrTestDataWithModel_2810ba231c0c185a->createContext());
CREATE_OP_CONTEXT(rel__agg_subclause3_6933ce586d204815_op_ctxt,rel__agg_subclause3_6933ce586d204815->createContext());
for(const auto& env0 : *rel_ModelPair_a5a4124c4969f589) {
auto range = rel_ValOrTestDataWithModel_2810ba231c0c185a->lowerUpperRange_10001(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_ValOrTestDataWithModel_2810ba231c0c185a_op_ctxt));
for(const auto& env1 : range) {
for(const auto& env2 : *rel_TrainingDataWithModel_bf0078ce702b39b8) {
if( !(rel_DataOverlap_5a4300eece6cb523->contains(Tuple<RamDomain,4>{{ramBitCast(env2[1]),ramBitCast(env0[3]),ramBitCast(env1[1]),ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_DataOverlap_5a4300eece6cb523_op_ctxt)))) {
Tuple<RamDomain,6> tuple{{ramBitCast(env0[1]),ramBitCast(env0[3]),ramBitCast(env1[1]),ramBitCast(env0[0]),ramBitCast(env2[1]),ramBitCast(env0[2])}};
rel__agg_subclause3_6933ce586d204815->insert(tuple,READ_OP_CONTEXT(rel__agg_subclause3_6933ce586d204815_op_ctxt));
}
}
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_agg_subclause5_325ed5d618826934 {
public:
 Stratum_agg_subclause5_325ed5d618826934(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPair_a5a4124c4969f589,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TestDataWithModel_2269d730f5799893,t_btree_iiiii__0_1_2_3_4__11111::Type& rel__agg_subclause5_277251a440f34db7);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiii__0_1_2_3__1111::Type* rel_ModelPair_a5a4124c4969f589;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_TestDataWithModel_2269d730f5799893;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel__agg_subclause5_277251a440f34db7;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_agg_subclause5_325ed5d618826934::Stratum_agg_subclause5_325ed5d618826934(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPair_a5a4124c4969f589,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_TestDataWithModel_2269d730f5799893,t_btree_iiiii__0_1_2_3_4__11111::Type& rel__agg_subclause5_277251a440f34db7):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_ModelPair_a5a4124c4969f589(&rel_ModelPair_a5a4124c4969f589),
rel_TestDataWithModel_2269d730f5799893(&rel_TestDataWithModel_2269d730f5799893),
rel__agg_subclause5_277251a440f34db7(&rel__agg_subclause5_277251a440f34db7){
}

void Stratum_agg_subclause5_325ed5d618826934::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(__agg_subclause5(ctx10,invo0,meth0,test0,testModel0) :- 
   ModelPair(testModel0,ctx10,_,_),
   TestDataWithModel(testModel0,test0,invo0,meth0,ctx10).
in file  [1:1-1:1])_");
if(!(rel_ModelPair_a5a4124c4969f589->empty()) && !(rel_TestDataWithModel_2269d730f5799893->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_ModelPair_a5a4124c4969f589_op_ctxt,rel_ModelPair_a5a4124c4969f589->createContext());
CREATE_OP_CONTEXT(rel_TestDataWithModel_2269d730f5799893_op_ctxt,rel_TestDataWithModel_2269d730f5799893->createContext());
CREATE_OP_CONTEXT(rel__agg_subclause5_277251a440f34db7_op_ctxt,rel__agg_subclause5_277251a440f34db7->createContext());
for(const auto& env0 : *rel_ModelPair_a5a4124c4969f589) {
auto range = rel_TestDataWithModel_2269d730f5799893->lowerUpperRange_10001(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_TestDataWithModel_2269d730f5799893_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[1]),ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env1[1]),ramBitCast(env0[0])}};
rel__agg_subclause5_277251a440f34db7->insert(tuple,READ_OP_CONTEXT(rel__agg_subclause5_277251a440f34db7_op_ctxt));
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Stratum_agg_subclause6_a830bf03bb8d6997 {
public:
 Stratum_agg_subclause6_a830bf03bb8d6997(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_FilteredTests_bd4cd275bd1cb347,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPair_a5a4124c4969f589,t_btree_iiiii__0_1_2_3_4__11111::Type& rel__agg_subclause6_2a58958a8d13999d);
void run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret);
private:
SymbolTable& symTable;
RecordTable& recordTable;
ConcurrentCache<std::string,std::regex>& regexCache;
bool& pruneImdtRels;
bool& performIO;
SignalHandler*& signalHandler;
std::atomic<std::size_t>& iter;
std::atomic<RamDomain>& ctr;
std::string& inputDirectory;
std::string& outputDirectory;
t_btree_iiiii__0_4_1_2_3__11111__10001::Type* rel_FilteredTests_bd4cd275bd1cb347;
t_btree_iiii__0_1_2_3__1111::Type* rel_ModelPair_a5a4124c4969f589;
t_btree_iiiii__0_1_2_3_4__11111::Type* rel__agg_subclause6_2a58958a8d13999d;
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Stratum_agg_subclause6_a830bf03bb8d6997::Stratum_agg_subclause6_a830bf03bb8d6997(SymbolTable& symTable,RecordTable& recordTable,ConcurrentCache<std::string,std::regex>& regexCache,bool& pruneImdtRels,bool& performIO,SignalHandler*& signalHandler,std::atomic<std::size_t>& iter,std::atomic<RamDomain>& ctr,std::string& inputDirectory,std::string& outputDirectory,t_btree_iiiii__0_4_1_2_3__11111__10001::Type& rel_FilteredTests_bd4cd275bd1cb347,t_btree_iiii__0_1_2_3__1111::Type& rel_ModelPair_a5a4124c4969f589,t_btree_iiiii__0_1_2_3_4__11111::Type& rel__agg_subclause6_2a58958a8d13999d):
symTable(symTable),
recordTable(recordTable),
regexCache(regexCache),
pruneImdtRels(pruneImdtRels),
performIO(performIO),
signalHandler(signalHandler),
iter(iter),
ctr(ctr),
inputDirectory(inputDirectory),
outputDirectory(outputDirectory),
rel_FilteredTests_bd4cd275bd1cb347(&rel_FilteredTests_bd4cd275bd1cb347),
rel_ModelPair_a5a4124c4969f589(&rel_ModelPair_a5a4124c4969f589),
rel__agg_subclause6_2a58958a8d13999d(&rel__agg_subclause6_2a58958a8d13999d){
}

void Stratum_agg_subclause6_a830bf03bb8d6997::run([[maybe_unused]] const std::vector<RamDomain>& args,[[maybe_unused]] std::vector<RamDomain>& ret){
signalHandler->setMsg(R"_(__agg_subclause6(ctx1,invo,meth,test,testModel) :- 
   ModelPair(testModel,ctx1,_,_),
   FilteredTests(testModel,test,invo,meth,ctx1).
in file  [1:1-1:1])_");
if(!(rel_ModelPair_a5a4124c4969f589->empty()) && !(rel_FilteredTests_bd4cd275bd1cb347->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_FilteredTests_bd4cd275bd1cb347_op_ctxt,rel_FilteredTests_bd4cd275bd1cb347->createContext());
CREATE_OP_CONTEXT(rel_ModelPair_a5a4124c4969f589_op_ctxt,rel_ModelPair_a5a4124c4969f589->createContext());
CREATE_OP_CONTEXT(rel__agg_subclause6_2a58958a8d13999d_op_ctxt,rel__agg_subclause6_2a58958a8d13999d->createContext());
for(const auto& env0 : *rel_ModelPair_a5a4124c4969f589) {
auto range = rel_FilteredTests_bd4cd275bd1cb347->lowerUpperRange_10001(Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast<RamDomain>(MIN_RAM_SIGNED), ramBitCast(env0[1])}},Tuple<RamDomain,5>{{ramBitCast(env0[0]), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast<RamDomain>(MAX_RAM_SIGNED), ramBitCast(env0[1])}},READ_OP_CONTEXT(rel_FilteredTests_bd4cd275bd1cb347_op_ctxt));
for(const auto& env1 : range) {
Tuple<RamDomain,5> tuple{{ramBitCast(env0[1]),ramBitCast(env1[2]),ramBitCast(env1[3]),ramBitCast(env1[1]),ramBitCast(env0[0])}};
rel__agg_subclause6_2a58958a8d13999d->insert(tuple,READ_OP_CONTEXT(rel__agg_subclause6_2a58958a8d13999d_op_ctxt));
}
}
}
();}
}

} // namespace  souffle

namespace  souffle {
using namespace souffle;
class Sf_main: public SouffleProgram {
public:
 Sf_main();
 ~Sf_main();
void run();
void runAll(std::string inputDirectoryArg = "",std::string outputDirectoryArg = "",bool performIOArg = true,bool pruneImdtRelsArg = true);
void printAll([[maybe_unused]] std::string outputDirectoryArg = "");
void loadAll([[maybe_unused]] std::string inputDirectoryArg = "");
void dumpInputs();
void dumpOutputs();
SymbolTable& getSymbolTable();
RecordTable& getRecordTable();
void setNumThreads(std::size_t numThreadsValue);
void executeSubroutine(std::string name,const std::vector<RamDomain>& args,std::vector<RamDomain>& ret);
private:
void runFunction(std::string inputDirectoryArg,std::string outputDirectoryArg,bool performIOArg,bool pruneImdtRelsArg);
SymbolTableImpl symTable;
SpecializedRecordTable<0,1,2> recordTable;
ConcurrentCache<std::string,std::regex> regexCache;
Own<t_btree_iii__1__0_1_2__010__100__110__111::Type> rel_ActualKeyParam_c37ca7251a780d4f;
souffle::RelationWrapper<t_btree_iii__1__0_1_2__010__100__110__111::Type> wrapper_rel_ActualKeyParam_c37ca7251a780d4f;
Own<t_btree_iii__2__0_1_2__001__110__111::Type> rel_Invoke_d61c77705bff35b0;
souffle::RelationWrapper<t_btree_iii__2__0_1_2__001__110__111::Type> wrapper_rel_Invoke_d61c77705bff35b0;
Own<t_btree_iii__0_1_2__111::Type> rel_MethodIndexToKey_1e172395196e36b8;
souffle::RelationWrapper<t_btree_iii__0_1_2__111::Type> wrapper_rel_MethodIndexToKey_1e172395196e36b8;
Own<t_btree_iii__1__0_1_2__010__100__110__111::Type> rel_ActualParam_b7a735170493e717;
souffle::RelationWrapper<t_btree_iii__1__0_1_2__010__100__110__111::Type> wrapper_rel_ActualParam_b7a735170493e717;
Own<t_btree_ii__0_1__11__10::Type> rel_Reachable_60cce6ab70e369f7;
souffle::RelationWrapper<t_btree_ii__0_1__11__10::Type> wrapper_rel_Reachable_60cce6ab70e369f7;
Own<t_btree_ii__0_1__11__10::Type> rel_delta_Reachable_f8722fb0e233b409;
Own<t_btree_ii__0_1__11__10::Type> rel_new_Reachable_0bd56444429534ad;
Own<t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type> rel_CallGraphEdge_333c9d69fed5eee7;
souffle::RelationWrapper<t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type> wrapper_rel_CallGraphEdge_333c9d69fed5eee7;
Own<t_btree_i__0__1::Type> rel_FilteredTrainingMethod_abcda1d07db43c94;
souffle::RelationWrapper<t_btree_i__0__1::Type> wrapper_rel_FilteredTrainingMethod_abcda1d07db43c94;
Own<t_btree_iii__1_2_0__011__111::Type> rel_MethodSSA_a9f7ed6321abcd80;
souffle::RelationWrapper<t_btree_iii__1_2_0__011__111::Type> wrapper_rel_MethodSSA_a9f7ed6321abcd80;
Own<t_btree_iii__2_0_1__001__111::Type> rel_ParamToParamFlow_62719282a92885f3;
souffle::RelationWrapper<t_btree_iii__2_0_1__001__111::Type> wrapper_rel_ParamToParamFlow_62719282a92885f3;
Own<t_btree_ii__1_0__11__01::Type> rel_MethodUpdate_b9129e3e14098516;
souffle::RelationWrapper<t_btree_ii__1_0__11__01::Type> wrapper_rel_MethodUpdate_b9129e3e14098516;
Own<t_btree_iiii__3_0_1_2__1111__0001::Type> rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d;
souffle::RelationWrapper<t_btree_iiii__3_0_1_2__1111__0001::Type> wrapper_rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d;
Own<t_btree_iii__2_0_1__001__111::Type> rel_ParamToParamDataFlow_0bd19d43cb842556;
souffle::RelationWrapper<t_btree_iii__2_0_1__001__111::Type> wrapper_rel_ParamToParamDataFlow_0bd19d43cb842556;
Own<t_btree_iiii__3_0_1_2__1111__0001::Type> rel_ParamToRetCondEquivFlow_219c5a0dd6644473;
souffle::RelationWrapper<t_btree_iiii__3_0_1_2__1111__0001::Type> wrapper_rel_ParamToRetCondEquivFlow_219c5a0dd6644473;
Own<t_btree_iii__2_0_1__001__111::Type> rel_ParamToRetDataFlow_4802f16da470059f;
souffle::RelationWrapper<t_btree_iii__2_0_1__001__111::Type> wrapper_rel_ParamToRetDataFlow_4802f16da470059f;
Own<t_btree_iii__2_0_1__001__111::Type> rel_ParamToRetEquivFlow_cf4bedb68bbe1170;
souffle::RelationWrapper<t_btree_iii__2_0_1__001__111::Type> wrapper_rel_ParamToRetEquivFlow_cf4bedb68bbe1170;
Own<t_btree_iii__0_1_2__111::Type> rel_TrainingData_276ec139200837ac;
souffle::RelationWrapper<t_btree_iii__0_1_2__111::Type> wrapper_rel_TrainingData_276ec139200837ac;
Own<t_btree_iiii__2_0_1_3__1111__0010::Type> rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed;
souffle::RelationWrapper<t_btree_iiii__2_0_1_3__1111__0010::Type> wrapper_rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed;
Own<t_btree_iiii__2_0_1_3__1111__0010::Type> rel_ParamToRetTaintSourceMethod_54896442c7cf3fde;
souffle::RelationWrapper<t_btree_iiii__2_0_1_3__1111__0010::Type> wrapper_rel_ParamToRetTaintSourceMethod_54896442c7cf3fde;
Own<t_btree_iii__0_1_2__100__111::Type> rel_ScoredData_e3b4e0bebca3bce4;
souffle::RelationWrapper<t_btree_iii__0_1_2__100__111::Type> wrapper_rel_ScoredData_e3b4e0bebca3bce4;
Own<t_btree_ii__0_1__11::Type> rel_ScoredResult_cd9b66baec883a81;
souffle::RelationWrapper<t_btree_ii__0_1__11::Type> wrapper_rel_ScoredResult_cd9b66baec883a81;
Own<t_btree_iii__0_1_2__111::Type> rel_TestData_cd6b712f9b1db6bc;
souffle::RelationWrapper<t_btree_iii__0_1_2__111::Type> wrapper_rel_TestData_cd6b712f9b1db6bc;
Own<t_btree_iii__0_1_2__111::Type> rel_ValData_515538f102ad549e;
souffle::RelationWrapper<t_btree_iii__0_1_2__111::Type> wrapper_rel_ValData_515538f102ad549e;
Own<t_btree_iii__1_0_2__010__110__111::Type> rel_ActualReturn_8bc9db09e057aa22;
souffle::RelationWrapper<t_btree_iii__1_0_2__010__110__111::Type> wrapper_rel_ActualReturn_8bc9db09e057aa22;
Own<t_btree_iii__0_1_2__111::Type> rel_Alloc_31bbfa07060a4241;
souffle::RelationWrapper<t_btree_iii__0_1_2__111::Type> wrapper_rel_Alloc_31bbfa07060a4241;
Own<t_btree_ii__0_1__11::Type> rel_AssignGlobal_f60b14713e1f1ab7;
souffle::RelationWrapper<t_btree_ii__0_1__11::Type> wrapper_rel_AssignGlobal_f60b14713e1f1ab7;
Own<t_btree_ii__0_1__11::Type> rel_AssignVar_b173aa4bb6352b3a;
souffle::RelationWrapper<t_btree_ii__0_1__11::Type> wrapper_rel_AssignVar_b173aa4bb6352b3a;
Own<t_btree_iii__0_1_2__111::Type> rel_StoreField_7d8d16151c0ea49b;
souffle::RelationWrapper<t_btree_iii__0_1_2__111::Type> wrapper_rel_StoreField_7d8d16151c0ea49b;
Own<t_btree_iiii__0_1_2_3__1111__1100::Type> rel_StoreFieldSSA_051b143b9d011002;
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111__1100::Type> wrapper_rel_StoreFieldSSA_051b143b9d011002;
Own<t_btree_iiiii__0_1_2_3_4__11111::Type> rel_LoadSlice_e590a0ee3f45cac8;
souffle::RelationWrapper<t_btree_iiiii__0_1_2_3_4__11111::Type> wrapper_rel_LoadSlice_e590a0ee3f45cac8;
Own<t_btree_iiiii__0_1_2_3_4__11111::Type> rel_StoreSlice_2d8a31bc728a3bbd;
souffle::RelationWrapper<t_btree_iiiii__0_1_2_3_4__11111::Type> wrapper_rel_StoreSlice_2d8a31bc728a3bbd;
Own<t_btree_iiiiii__0_1_2_3_4_5__110000__111111::Type> rel_StoreSliceSSA_f26b3c4e2aecada2;
souffle::RelationWrapper<t_btree_iiiiii__0_1_2_3_4_5__110000__111111::Type> wrapper_rel_StoreSliceSSA_f26b3c4e2aecada2;
Own<t_btree_iiii__0_1_2_3__1110__1111::Type> rel_SliceIndex_7426c9b7afc02920;
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1110__1111::Type> wrapper_rel_SliceIndex_7426c9b7afc02920;
Own<t_btree_iii__0_1_2__110__111::Type> rel_StoreIndex_bab2c0876dfa7ece;
souffle::RelationWrapper<t_btree_iii__0_1_2__110__111::Type> wrapper_rel_StoreIndex_bab2c0876dfa7ece;
Own<t_btree_iiii__0_1_2_3__1111__1100::Type> rel_StoreIndexSSA_431249b1dfe65e85;
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111__1100::Type> wrapper_rel_StoreIndexSSA_431249b1dfe65e85;
Own<t_btree_i__0__1::Type> rel_FilteredMethod_3007b0a4b117f645;
souffle::RelationWrapper<t_btree_i__0__1::Type> wrapper_rel_FilteredMethod_3007b0a4b117f645;
Own<t_btree_iii__1_0_2__010__111::Type> rel_FormalReturn_62e4844334f73406;
souffle::RelationWrapper<t_btree_iii__1_0_2__010__111::Type> wrapper_rel_FormalReturn_62e4844334f73406;
Own<t_btree_iiii__0_1_2_3__1111::Type> rel_ArityMatch_1f1fc51deec0d387;
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111::Type> wrapper_rel_ArityMatch_1f1fc51deec0d387;
Own<t_btree_iii__1_0_2__010__111::Type> rel_FormalParam_f381be5dce5c9780;
souffle::RelationWrapper<t_btree_iii__1_0_2__010__111::Type> wrapper_rel_FormalParam_f381be5dce5c9780;
Own<t_btree_iiii__0_2_1_3__1010__1111::Type> rel_InterProcAssign_bed60ee93a02e127;
souffle::RelationWrapper<t_btree_iiii__0_2_1_3__1010__1111::Type> wrapper_rel_InterProcAssign_bed60ee93a02e127;
Own<t_btree_iii__2__0_1_2__001__110__111::Type> rel_LoadField_6018b2c33f454495;
souffle::RelationWrapper<t_btree_iii__2__0_1_2__001__110__111::Type> wrapper_rel_LoadField_6018b2c33f454495;
Own<t_btree_iii__2__0_1_2__001__110__111::Type> rel_LoadIndex_3a07e512c7efb9bd;
souffle::RelationWrapper<t_btree_iii__2__0_1_2__001__110__111::Type> wrapper_rel_LoadIndex_3a07e512c7efb9bd;
Own<t_btree_ii__0_1__11__10::Type> rel_VarInMethod_a7f53498a99fbbab;
souffle::RelationWrapper<t_btree_ii__0_1__11__10::Type> wrapper_rel_VarInMethod_a7f53498a99fbbab;
Own<t_btree_iiiii__0_1_2_3_4__11100__11111::Type> rel_FieldPointsTo_79eb0e1cfe8639b3;
souffle::RelationWrapper<t_btree_iiiii__0_1_2_3_4__11100__11111::Type> wrapper_rel_FieldPointsTo_79eb0e1cfe8639b3;
Own<t_btree_iiiii__0_1_2_3_4__11100__11111::Type> rel_delta_FieldPointsTo_6e98ef2bb9d48d3a;
Own<t_btree_iiiii__0_1_2_3_4__11100__11111::Type> rel_new_FieldPointsTo_b27ef2e9e0cb7cd8;
Own<t_btree_iiii__0_1_2_3__1111__1100::Type> rel_IndexContentPointsTo_db1dfbfa873aff0a;
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111__1100::Type> wrapper_rel_IndexContentPointsTo_db1dfbfa873aff0a;
Own<t_btree_iiii__0_1_2_3__1111__1100::Type> rel_delta_IndexContentPointsTo_0515756a33abb518;
Own<t_btree_iiii__0_1_2_3__1111__1100::Type> rel_new_IndexContentPointsTo_b75799237eab2896;
Own<t_btree_iiii__2_3_0_1__0_1__1000__1111__1100__0011::Type> rel_VarPointsTo_c1a9f897b9f324f0;
souffle::RelationWrapper<t_btree_iiii__2_3_0_1__0_1__1000__1111__1100__0011::Type> wrapper_rel_VarPointsTo_c1a9f897b9f324f0;
Own<t_btree_iiii__0_1_2_3__1000__1111__1100::Type> rel_delta_VarPointsTo_16577dc30fb04e76;
Own<t_btree_iiii__0_1_2_3__1000__1111__1100::Type> rel_new_VarPointsTo_5ea2db765d05791c;
Own<t_btree_iiii__2_0_1_3__0_1__1111__1100__0010::Type> rel_Alias_22e56a91218d2f0d;
souffle::RelationWrapper<t_btree_iiii__2_0_1_3__0_1__1111__1100__0010::Type> wrapper_rel_Alias_22e56a91218d2f0d;
Own<t_btree_iiii__0_1_2_3__1111::Type> rel_AssignBinOp_ac278042ec33e40a;
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111::Type> wrapper_rel_AssignBinOp_ac278042ec33e40a;
Own<t_btree_ii__0_1__11::Type> rel_AssignBoolConstant_153553f1352c29c5;
souffle::RelationWrapper<t_btree_ii__0_1__11::Type> wrapper_rel_AssignBoolConstant_153553f1352c29c5;
Own<t_btree_ii__0_1__11::Type> rel_AssignFloatConstant_2958d76b03506f1d;
souffle::RelationWrapper<t_btree_ii__0_1__11::Type> wrapper_rel_AssignFloatConstant_2958d76b03506f1d;
Own<t_btree_ii__0_1__11::Type> rel_AssignIntConstant_91e14648ac326411;
souffle::RelationWrapper<t_btree_ii__0_1__11::Type> wrapper_rel_AssignIntConstant_91e14648ac326411;
Own<t_btree_ii__0_1__11::Type> rel_AssignStrConstant_2b622c7da0720ea5;
souffle::RelationWrapper<t_btree_ii__0_1__11::Type> wrapper_rel_AssignStrConstant_2b622c7da0720ea5;
Own<t_btree_ii__1_0__11__01::Type> rel_ConstantValue_bf370ded014c6df6;
souffle::RelationWrapper<t_btree_ii__1_0__11__01::Type> wrapper_rel_ConstantValue_bf370ded014c6df6;
Own<t_btree_iii__0_1_2__100__111::Type> rel_FlowCondition_f30c150f9e6134d8;
souffle::RelationWrapper<t_btree_iii__0_1_2__100__111::Type> wrapper_rel_FlowCondition_f30c150f9e6134d8;
Own<t_btree_ii__1_0__0__11__10__01::Type> rel_VarType_28c8217e193eb319;
souffle::RelationWrapper<t_btree_ii__1_0__0__11__10__01::Type> wrapper_rel_VarType_28c8217e193eb319;
Own<t_btree_i__0__1::Type> rel_IsDataFrameEquivIndexing_5de5b08291e74631;
souffle::RelationWrapper<t_btree_i__0__1::Type> wrapper_rel_IsDataFrameEquivIndexing_5de5b08291e74631;
Own<t_btree_i__0__1::Type> rel_LocalMethod_5b358702fac6f178;
souffle::RelationWrapper<t_btree_i__0__1::Type> wrapper_rel_LocalMethod_5b358702fac6f178;
Own<t_btree_iiiii__0_1_4_2_3__11111__11001::Type> rel_FlowFromEdge_6f9cb97dfaad1a54;
souffle::RelationWrapper<t_btree_iiiii__0_1_4_2_3__11111__11001::Type> wrapper_rel_FlowFromEdge_6f9cb97dfaad1a54;
Own<t_btree_iiiii__4_0_1_2_3__11111__00001::Type> rel_delta_FlowFromEdge_06b5167ac5e9217c;
Own<t_btree_iiiii__4_0_1_2_3__11111__00001::Type> rel_new_FlowFromEdge_4b44b140131ea495;
Own<t_btree_iiiii__0_1_2_3_4__11111__11000::Type> rel_FlowFrom_0c9cf4995aeb9ef7;
souffle::RelationWrapper<t_btree_iiiii__0_1_2_3_4__11111__11000::Type> wrapper_rel_FlowFrom_0c9cf4995aeb9ef7;
Own<t_btree_iiiii__0_1_2_3_4__11111::Type> rel_delta_FlowFrom_9453696b0b7d82d1;
Own<t_btree_iiiii__0_1_2_3_4__11111::Type> rel_new_FlowFrom_581490064b4976c4;
Own<t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type> rel_FlowFromExtended_7fd58681b534e204;
souffle::RelationWrapper<t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type> wrapper_rel_FlowFromExtended_7fd58681b534e204;
Own<t_btree_ii__0_1__11::Type> rel_SubType_1b987a9db6ba7d57;
souffle::RelationWrapper<t_btree_ii__0_1__11::Type> wrapper_rel_SubType_1b987a9db6ba7d57;
Own<t_btree_iiii__0_1_2_3__1111::Type> rel_TorchModelWithData_3bc4694c9032b02a;
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111::Type> wrapper_rel_TorchModelWithData_3bc4694c9032b02a;
Own<t_btree_iiiii__0_4_1_2_3__11111__10001::Type> rel_TrainingDataWithModel_bf0078ce702b39b8;
souffle::RelationWrapper<t_btree_iiiii__0_4_1_2_3__11111__10001::Type> wrapper_rel_TrainingDataWithModel_bf0078ce702b39b8;
Own<t_nullaries> rel_disconnected0_b2add3842fe11dfe;
souffle::RelationWrapper<t_nullaries> wrapper_rel_disconnected0_b2add3842fe11dfe;
Own<t_btree_iiiii__0_4_1_2_3__11111__10001::Type> rel_ValOrTestDataWithModel_2810ba231c0c185a;
souffle::RelationWrapper<t_btree_iiiii__0_4_1_2_3__11111__10001::Type> wrapper_rel_ValOrTestDataWithModel_2810ba231c0c185a;
Own<t_btree_iiiii__0_1_2_3_4__11111::Type> rel_ScoredDataWithModel_55bb6aafc5a52e34;
souffle::RelationWrapper<t_btree_iiiii__0_1_2_3_4__11111::Type> wrapper_rel_ScoredDataWithModel_55bb6aafc5a52e34;
Own<t_btree_iiiii__3_0_1_2_4__11111__00010::Type> rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843;
souffle::RelationWrapper<t_btree_iiiii__3_0_1_2_4__11111__00010::Type> wrapper_rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843;
Own<t_btree_iii__0_1_2__100__111::Type> rel_TaintCondition_7b1ddf0c7226422d;
souffle::RelationWrapper<t_btree_iii__0_1_2__100__111::Type> wrapper_rel_TaintCondition_7b1ddf0c7226422d;
Own<t_btree_iii__1_0_2__010__111::Type> rel_RetTaintSourceMethod_b3e3f5b46f4b2c24;
souffle::RelationWrapper<t_btree_iii__1_0_2__010__111::Type> wrapper_rel_RetTaintSourceMethod_b3e3f5b46f4b2c24;
Own<t_btree_iii__0_1_2__111::Type> rel_TaintStarts_1fb2f244128dc60e;
souffle::RelationWrapper<t_btree_iii__0_1_2__111::Type> wrapper_rel_TaintStarts_1fb2f244128dc60e;
Own<t_btree_iii__0_1_2__111::Type> rel_delta_TaintStarts_cc75a7e7e9407e43;
Own<t_btree_iii__0_1_2__111::Type> rel_new_TaintStarts_39ba418fa1a55080;
Own<t_btree_iiiiiii__6_0_1_2_3_4_5__1111111__0000001::Type> rel_TaintStartsTarget_b45151d0d1a25a24;
souffle::RelationWrapper<t_btree_iiiiiii__6_0_1_2_3_4_5__1111111__0000001::Type> wrapper_rel_TaintStartsTarget_b45151d0d1a25a24;
Own<t_btree_iiii__0_1_2_3__1111::Type> rel_DuplicateEdge_0f0315b18851fb20;
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111::Type> wrapper_rel_DuplicateEdge_0f0315b18851fb20;
Own<t_btree_iiii__0_1_2_3__1111::Type> rel_DataOverlap_5a4300eece6cb523;
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111::Type> wrapper_rel_DataOverlap_5a4300eece6cb523;
Own<t_btree_iiii__2_3_0_1__1111__0011::Type> rel_delta_DataOverlap_83ad9cceb2f93136;
Own<t_btree_iiii__2_3_0_1__1111__0011::Type> rel_new_DataOverlap_92d522de74fa8c9c;
Own<t_btree_iiii__0_1_2_3__1111::Type> rel_MultiUseTestLeak_0ea2b38088c6193a;
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111::Type> wrapper_rel_MultiUseTestLeak_0ea2b38088c6193a;
Own<t_btree_iiiiiiiiii__0_1_2_3_4_5_6_7_8_9__1111111111::Type> rel_Telemetry_MultiUseTestLeak_f37504d03b612c98;
souffle::RelationWrapper<t_btree_iiiiiiiiii__0_1_2_3_4_5_6_7_8_9__1111111111::Type> wrapper_rel_Telemetry_MultiUseTestLeak_f37504d03b612c98;
Own<t_btree_iiii__0_1_2_3__1111::Type> rel_ReduceEdge_70a6ab3f2a478ff1;
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111::Type> wrapper_rel_ReduceEdge_70a6ab3f2a478ff1;
Own<t_btree_ii__0_1__11__10::Type> rel_InvokeInLoop_c641dec75a6890e7;
souffle::RelationWrapper<t_btree_ii__0_1__11__10::Type> wrapper_rel_InvokeInLoop_c641dec75a6890e7;
Own<t_btree_iiiii__0_1_2_3_4__11111::Type> rel_ValDataWithModel_ef5cc7d0fb594fa5;
souffle::RelationWrapper<t_btree_iiiii__0_1_2_3_4__11111::Type> wrapper_rel_ValDataWithModel_ef5cc7d0fb594fa5;
Own<t_btree_iiiii__0_1_2_3_4__11111::Type> rel_delta_ValDataWithModel_0840db341aaccef6;
Own<t_btree_iiiii__0_1_2_3_4__11111::Type> rel_new_ValDataWithModel_9ed2fac795be70a1;
Own<t_nullaries> rel_disconnected1_a1b44fde1b4da294;
souffle::RelationWrapper<t_nullaries> wrapper_rel_disconnected1_a1b44fde1b4da294;
Own<t_btree_iiiii__0_4_1_2_3__11111__10001::Type> rel_TestDataWithModel_2269d730f5799893;
souffle::RelationWrapper<t_btree_iiiii__0_4_1_2_3__11111__10001::Type> wrapper_rel_TestDataWithModel_2269d730f5799893;
Own<t_btree_ii__1_0__11__01::Type> rel_NextInvoke_f6aefda469e3b88c;
souffle::RelationWrapper<t_btree_ii__1_0__11__01::Type> wrapper_rel_NextInvoke_f6aefda469e3b88c;
Own<t_btree_iiii__0_1_2_3__1111::Type> rel_InvokeEdge_101b6dc2a844897b;
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111::Type> wrapper_rel_InvokeEdge_101b6dc2a844897b;
Own<t_btree_iiii__0_1_2_3__1111::Type> rel_delta_InvokeEdge_a34c04d9e3048d06;
Own<t_btree_iiii__0_1_2_3__1111::Type> rel_new_InvokeEdge_1250f9237f36bc79;
Own<t_btree_iiii__0_1_2_3__1111__1100::Type> rel_InvokePath_12c42b7c9b655a96;
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111__1100::Type> wrapper_rel_InvokePath_12c42b7c9b655a96;
Own<t_btree_iiii__0_1_2_3__1111__1100::Type> rel_delta_InvokePath_269e2f7ec8f9b43d;
Own<t_btree_iiii__0_1_2_3__1111__1100::Type> rel_new_InvokePath_3ae2baced09cf095;
Own<t_btree_iiii__0_1_2_3__1111::Type> rel_ModelPairCandidate_9322881dca01d8da;
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111::Type> wrapper_rel_ModelPairCandidate_9322881dca01d8da;
Own<t_btree_iiiiiiii__0_1_3_5_6_2_4_7__11010110__11111111::Type> rel__agg_subclause1_6b72bc2ad4593b7d;
souffle::RelationWrapper<t_btree_iiiiiiii__0_1_3_5_6_2_4_7__11010110__11111111::Type> wrapper_rel__agg_subclause1_6b72bc2ad4593b7d;
Own<t_btree_iiii__0_1_2_3__1111::Type> rel_ModelPair_a5a4124c4969f589;
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111::Type> wrapper_rel_ModelPair_a5a4124c4969f589;
Own<t_btree_iiiii__0_4_1_2_3__11111__10001::Type> rel_FilteredTests_bd4cd275bd1cb347;
souffle::RelationWrapper<t_btree_iiiii__0_4_1_2_3__11111__10001::Type> wrapper_rel_FilteredTests_bd4cd275bd1cb347;
Own<t_btree_iiiii__0_1_2_3_4__11111::Type> rel__agg_subclause6_2a58958a8d13999d;
souffle::RelationWrapper<t_btree_iiiii__0_1_2_3_4__11111::Type> wrapper_rel__agg_subclause6_2a58958a8d13999d;
Own<t_btree_i__0__1::Type> rel__agg_single0_ae1fba617ee8151c;
souffle::RelationWrapper<t_btree_i__0__1::Type> wrapper_rel__agg_single0_ae1fba617ee8151c;
Own<t_btree_iiiii__0_1_2_3_4__11111::Type> rel__agg_subclause5_277251a440f34db7;
souffle::RelationWrapper<t_btree_iiiii__0_1_2_3_4__11111::Type> wrapper_rel__agg_subclause5_277251a440f34db7;
Own<t_btree_i__0__1::Type> rel__agg_single_bd0385c34ef6548a;
souffle::RelationWrapper<t_btree_i__0__1::Type> wrapper_rel__agg_single_bd0385c34ef6548a;
Own<t_btree_ii__0_1__11::Type> rel_FinalNoTestData_1dcf6aa80b893c15;
souffle::RelationWrapper<t_btree_ii__0_1__11::Type> wrapper_rel_FinalNoTestData_1dcf6aa80b893c15;
Own<t_btree_ii__0_1__11::Type> rel_FinalNoTestDataWithMultiUse_99aec0c4382a0994;
souffle::RelationWrapper<t_btree_ii__0_1__11::Type> wrapper_rel_FinalNoTestDataWithMultiUse_99aec0c4382a0994;
Own<t_btree_iiiiiii__0_6_1_2_3_4_5__1111111__1000001::Type> rel__agg_subclause_32d5cc024cc79173;
souffle::RelationWrapper<t_btree_iiiiiii__0_6_1_2_3_4_5__1111111__1000001::Type> wrapper_rel__agg_subclause_32d5cc024cc79173;
Own<t_btree_iiiiiiiiii__0_4_5_6_7_8_9_1_2_3__1111111111__1000111111::Type> rel_Telemetry_OverlapLeak_d0dea07db73811e8;
souffle::RelationWrapper<t_btree_iiiiiiiiii__0_4_5_6_7_8_9_1_2_3__1111111111__1000111111::Type> wrapper_rel_Telemetry_OverlapLeak_d0dea07db73811e8;
Own<t_btree_iiiiiiiiii__0_2_4_8_9_1_3_5_6_7__1010100011__1111111111::Type> rel__agg_subclause0_1a0a441f9870a373;
souffle::RelationWrapper<t_btree_iiiiiiiiii__0_2_4_8_9_1_3_5_6_7__1010100011__1111111111::Type> wrapper_rel__agg_subclause0_1a0a441f9870a373;
Own<t_btree_iiiiii__0_1_2_3_4_5__111111::Type> rel_FinalOverlapLeak_78ab00e4c1b08b0b;
souffle::RelationWrapper<t_btree_iiiiii__0_1_2_3_4_5__111111::Type> wrapper_rel_FinalOverlapLeak_78ab00e4c1b08b0b;
Own<t_btree_iiiiii__1_4_5_0_2_3__111111__010011::Type> rel__agg_subclause2_47fa128cc9c98832;
souffle::RelationWrapper<t_btree_iiiiii__1_4_5_0_2_3__111111__010011::Type> wrapper_rel__agg_subclause2_47fa128cc9c98832;
Own<t_btree_iiiii__0_1_2_3_4__11111::Type> rel_NoTestData_38fc47759ae30ee9;
souffle::RelationWrapper<t_btree_iiiii__0_1_2_3_4__11111::Type> wrapper_rel_NoTestData_38fc47759ae30ee9;
Own<t_btree_iiiiii__1_4_5_0_2_3__111111__010011::Type> rel__agg_subclause3_6933ce586d204815;
souffle::RelationWrapper<t_btree_iiiiii__1_4_5_0_2_3__111111__010011::Type> wrapper_rel__agg_subclause3_6933ce586d204815;
Own<t_btree_iiiii__0_1_2_3_4__11111::Type> rel_NoValAndTestData_4e404a42ce2c80b7;
souffle::RelationWrapper<t_btree_iiiii__0_1_2_3_4__11111::Type> wrapper_rel_NoValAndTestData_4e404a42ce2c80b7;
Own<t_btree_iiiiii__0_1_2_3_4_5__111111::Type> rel_OverlapLeak_703978dd669490f5;
souffle::RelationWrapper<t_btree_iiiiii__0_1_2_3_4_5__111111::Type> wrapper_rel_OverlapLeak_703978dd669490f5;
Own<t_btree_iiii__0_1_2_3__1111::Type> rel_PreProcessingLeak_3d7ccc563a957981;
souffle::RelationWrapper<t_btree_iiii__0_1_2_3__1111::Type> wrapper_rel_PreProcessingLeak_3d7ccc563a957981;
Own<t_btree_iiiiiiiiiiii__0_1_2_3_4_5_6_7_8_9_10_11__111111111111::Type> rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185;
souffle::RelationWrapper<t_btree_iiiiiiiiiiii__0_1_2_3_4_5_6_7_8_9_10_11__111111111111::Type> wrapper_rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185;
Own<t_btree_iiiiiiiiiiii__0_1_2_3_4_5_6_7_8_9_10_11__111111111111::Type> rel_Telemetry_FinalPreProcessingLeak_3e7f0db68d270037;
souffle::RelationWrapper<t_btree_iiiiiiiiiiii__0_1_2_3_4_5_6_7_8_9_10_11__111111111111::Type> wrapper_rel_Telemetry_FinalPreProcessingLeak_3e7f0db68d270037;
Own<t_btree_iiiiiiiiii__0_1_2_3_4_5_6_7_8_9__1111111111::Type> rel_Telemetry_ModelPair_f363adad3d285f6e;
souffle::RelationWrapper<t_btree_iiiiiiiiii__0_1_2_3_4_5_6_7_8_9__1111111111::Type> wrapper_rel_Telemetry_ModelPair_f363adad3d285f6e;
Own<t_btree_i__0__1::Type> rel_PureMethod_ac3eca18d3064a10;
souffle::RelationWrapper<t_btree_i__0__1::Type> wrapper_rel_PureMethod_ac3eca18d3064a10;
Own<t_btree_ii__0_1__11__10::Type> rel_VarEquals_a4540819e065ea89;
souffle::RelationWrapper<t_btree_ii__0_1__11__10::Type> wrapper_rel_VarEquals_a4540819e065ea89;
Own<t_btree_ii__0_1__11__10::Type> rel_delta_VarEquals_9c226744c7f75a0b;
Own<t_btree_ii__0_1__11__10::Type> rel_new_VarEquals_a3a3c796750fc858;
Stratum_disconnected0_afed6794479dbd87 stratum_disconnected0_f9c4672e8cd1a89c;
Stratum_disconnected1_4b507f5bbea27b84 stratum_disconnected1_c26d0381dceb6887;
Stratum_ActualKeyParam_653f40078a463055 stratum_ActualKeyParam_12a6a43c75fda34b;
Stratum_ActualParam_dd5fa59b61f9d226 stratum_ActualParam_0254ef2a539f6763;
Stratum_ActualReturn_518b4ca6f72783ea stratum_ActualReturn_339859d89a01e808;
Stratum_Alias_0d78fab14e1b06fc stratum_Alias_f3647b52a0dd5327;
Stratum_Alloc_c73bc5abd6ad93a6 stratum_Alloc_49c7a43733f3d7b7;
Stratum_ArityMatch_cb20319fa5f091ce stratum_ArityMatch_010c8824ed4a833c;
Stratum_AssignBinOp_9902f90b650f5df1 stratum_AssignBinOp_92254d469ef1b822;
Stratum_AssignBoolConstant_3c3187c23ef18091 stratum_AssignBoolConstant_433e069d31d94440;
Stratum_AssignFloatConstant_6d7795f85ab598e6 stratum_AssignFloatConstant_e4a7f759412fc710;
Stratum_AssignGlobal_9f605e46c9e93954 stratum_AssignGlobal_3bcffbb0794f2821;
Stratum_AssignIntConstant_c137dc152e68c227 stratum_AssignIntConstant_0255ebd32aa44813;
Stratum_AssignStrConstant_0923866f894f78fc stratum_AssignStrConstant_6e56f1d6ad531ff5;
Stratum_AssignVar_5d1cb4968099554d stratum_AssignVar_47ce3275170456ae;
Stratum_CallGraphEdge_c7d4da178885070a stratum_CallGraphEdge_ba9ff3425740b561;
Stratum_ConstantValue_1f449464e1f8bff8 stratum_ConstantValue_2aaebc1b0ca71039;
Stratum_DataOverlap_82a8003de4aa5746 stratum_DataOverlap_989fa0addfb2c9db;
Stratum_DuplicateEdge_fab9fff048b6b0a6 stratum_DuplicateEdge_1bf07be33b6f763a;
Stratum_FieldPointsTo_05fcbbf17ca84968 stratum_FieldPointsTo_64e220f021bc71ba;
Stratum_FilteredMethod_87482e51e6945a84 stratum_FilteredMethod_bbfe11620421651e;
Stratum_FilteredTests_8cb12147c570b579 stratum_FilteredTests_461fa6cfdecd9b07;
Stratum_FilteredTrainingMethod_256ce9fa5690afff stratum_FilteredTrainingMethod_76dbc635e0be94f1;
Stratum_FinalNoTestData_29e60fd3659aa18e stratum_FinalNoTestData_88637b76361e3e80;
Stratum_FinalNoTestDataWithMultiUse_caef59a0ca7955d8 stratum_FinalNoTestDataWithMultiUse_af20826df0e8421f;
Stratum_FinalOverlapLeak_3232c1f7dfb2f033 stratum_FinalOverlapLeak_2872601ec653ee81;
Stratum_FlowCondition_109ebb821027279b stratum_FlowCondition_dc0e9ac85375b076;
Stratum_FlowFrom_706fbd402ae0a9c3 stratum_FlowFrom_d1e3516602a0c8a2;
Stratum_FlowFromEdge_ea849012e52787d8 stratum_FlowFromEdge_dc7331509fe42d03;
Stratum_FlowFromExtended_0e80512d50e3e15b stratum_FlowFromExtended_1a66e3f0059098b0;
Stratum_FormalParam_d3df8d7821c3636f stratum_FormalParam_1bc5e7a7041c708a;
Stratum_FormalReturn_926c0f92131927c7 stratum_FormalReturn_2d2d898c7d038d3b;
Stratum_InterProcAssign_e4be1f9ccf593a60 stratum_InterProcAssign_ffe550986b3c2f8d;
Stratum_Invoke_dd34603d62ced004 stratum_Invoke_6b18f063cb12c287;
Stratum_InvokeEdge_578ec363579b2aea stratum_InvokeEdge_561a26cc8f11b31d;
Stratum_InvokeInLoop_19e1b9e18afecb56 stratum_InvokeInLoop_b84d1c07a14b9d1e;
Stratum_InvokePath_e8b168cd865879e8 stratum_InvokePath_46465e6a87eeb192;
Stratum_IsDataFrameEquivIndexing_e4c10b45d138cfbf stratum_IsDataFrameEquivIndexing_8535167db21969f0;
Stratum_LoadField_d008bdbc48c72349 stratum_LoadField_1959d147bc3bf36d;
Stratum_LoadIndex_0757e6ece445a802 stratum_LoadIndex_5f2b437de44efaae;
Stratum_LoadSlice_b0ffa9dd9f205537 stratum_LoadSlice_d064a977133f8b38;
Stratum_LocalMethod_5f8dd393e44bae27 stratum_LocalMethod_49c0d263261e8d97;
Stratum_MethodIndexToKey_7b30be7a4b7f0a29 stratum_MethodIndexToKey_38eeac50fa87c6ee;
Stratum_MethodSSA_23c359ba50403efd stratum_MethodSSA_aa09a85875e68cdd;
Stratum_MethodUpdate_ff9426f0e68a272c stratum_MethodUpdate_d1ca17b13e092ba8;
Stratum_ModelPair_6a77bcd3d5f1711d stratum_ModelPair_1383b78f536ccc12;
Stratum_ModelPairCandidate_34fe56e981955072 stratum_ModelPairCandidate_e0ec35f57565671c;
Stratum_MultiUseTestLeak_a461fa3df0bbe5fc stratum_MultiUseTestLeak_3188e75ada8f9655;
Stratum_NextInvoke_55515eca48c56555 stratum_NextInvoke_167dc995a535ae93;
Stratum_NoTestData_75ac28ee7b7be134 stratum_NoTestData_55494f244720b649;
Stratum_NoValAndTestData_bf8999ec0a234c2d stratum_NoValAndTestData_d3cbe3b109984f39;
Stratum_OverlapLeak_df4929de03870880 stratum_OverlapLeak_f6e6ef75f6375c76;
Stratum_ParamContentToRetCondEquivFlow_ba285ab7093238da stratum_ParamContentToRetCondEquivFlow_9994fea784d6b73d;
Stratum_ParamToParamDataFlow_c8a416a0b8aa95a7 stratum_ParamToParamDataFlow_446aa191f53628ae;
Stratum_ParamToParamFlow_d08afc6c1a6bb6c9 stratum_ParamToParamFlow_4280e65256ca7e4d;
Stratum_ParamToParamTaintSourceMethod_d024751586697ad1 stratum_ParamToParamTaintSourceMethod_98e55c9c77865b73;
Stratum_ParamToRetCondEquivFlow_f6fc95c901f46405 stratum_ParamToRetCondEquivFlow_289daa0f2308054b;
Stratum_ParamToRetCondTaintSourceMethod_21764bb54cde2a1f stratum_ParamToRetCondTaintSourceMethod_c32a3a2a879e1b22;
Stratum_ParamToRetDataFlow_d613a94f90c1d634 stratum_ParamToRetDataFlow_740720c7dcae95b0;
Stratum_ParamToRetEquivFlow_001aaeddbf783cbc stratum_ParamToRetEquivFlow_ce6a445b7c8e7e6a;
Stratum_ParamToRetTaintSourceMethod_a231dab6de744f6e stratum_ParamToRetTaintSourceMethod_33f90b6a1d8be9d0;
Stratum_PreProcessingLeak_be24f9862f2fdea0 stratum_PreProcessingLeak_aea74049e16ab76c;
Stratum_PureMethod_0532b29c40eb21b8 stratum_PureMethod_9625f9d3538f170a;
Stratum_Reachable_aa5a75ede6acb41c stratum_Reachable_3609bcb81aba1219;
Stratum_ReduceEdge_f1a7dd9509d9f03b stratum_ReduceEdge_f23db963fdbb6a7d;
Stratum_RetTaintSourceMethod_d4c95fce5f03ce4f stratum_RetTaintSourceMethod_46d3cbd918420f3b;
Stratum_ScoredData_ae748f7cf0ed193c stratum_ScoredData_b7d1ba106c7cdd30;
Stratum_ScoredDataWithModel_30dbd13a5da1c436 stratum_ScoredDataWithModel_699c9bae39cecfe6;
Stratum_ScoredResult_8edef05b044117b3 stratum_ScoredResult_132799981e44fb82;
Stratum_SliceIndex_24b3a3e5e18c9e5b stratum_SliceIndex_0898fd080c8755ea;
Stratum_StoreField_c5a07b83c99b3483 stratum_StoreField_081769e2d0503294;
Stratum_StoreFieldSSA_dc40eef5598f9119 stratum_StoreFieldSSA_20c74fd0fd3a43b6;
Stratum_StoreIndex_6595ade9ca345fbb stratum_StoreIndex_4047534a727c5ea9;
Stratum_StoreIndexSSA_f5d4c907f3ae8d5e stratum_StoreIndexSSA_d5260c12dceeb54a;
Stratum_StoreSlice_f195a4641303040e stratum_StoreSlice_4bebfea803e57871;
Stratum_StoreSliceSSA_24cbb8c9e3929aa4 stratum_StoreSliceSSA_5db6bfe77d4c2b53;
Stratum_SubType_b28a5b65669b4e17 stratum_SubType_014b00fd31af85f0;
Stratum_TaintCondition_c759f2ebe96a5883 stratum_TaintCondition_16931132151a48cd;
Stratum_TaintStarts_a1eaba1011cb0450 stratum_TaintStarts_f68137b8aa877618;
Stratum_TaintStartsTarget_7553c6b8b6948b93 stratum_TaintStartsTarget_fbaa024b117819b9;
Stratum_Telemetry_FinalPreProcessingLeak_ce561854b736213d stratum_Telemetry_FinalPreProcessingLeak_55372d1daee4f94b;
Stratum_Telemetry_ModelPair_2aeee8c5e53eeaca stratum_Telemetry_ModelPair_240dd7003845be94;
Stratum_Telemetry_MultiUseTestLeak_84017fb29a9015b4 stratum_Telemetry_MultiUseTestLeak_8a4534192b2810ba;
Stratum_Telemetry_OverlapLeak_206a9290ce6c9410 stratum_Telemetry_OverlapLeak_c3acba6310b72397;
Stratum_Telemetry_PreProcessingLeak_d22f9960afcc7bb1 stratum_Telemetry_PreProcessingLeak_250ec078ec730e80;
Stratum_TestData_87ae0dc102c223ab stratum_TestData_b867b0fac6d0da2a;
Stratum_TestDataWithModel_36b480b8efbba72d stratum_TestDataWithModel_f27573b86a50c3ca;
Stratum_TorchModelWithData_afcc33b424de2b88 stratum_TorchModelWithData_397ff8db1c01d2da;
Stratum_TrainingData_11ddc884eb156ccf stratum_TrainingData_0c12b3e5997d2e70;
Stratum_TrainingDataWithModel_027fac07f1e7b905 stratum_TrainingDataWithModel_391fd5f898f6ccf8;
Stratum_ValData_564cb9a844994214 stratum_ValData_e7530baa3ed8df4b;
Stratum_ValDataWithModel_bc9f39823254c66b stratum_ValDataWithModel_14d6b9aa9be3460b;
Stratum_ValOrTestDataWithModel_067190884f126f04 stratum_ValOrTestDataWithModel_1ec7730e583f5da2;
Stratum_VarEquals_05ec4eda30a25b9b stratum_VarEquals_724b807f74d45218;
Stratum_VarInMethod_a8536a1473632e95 stratum_VarInMethod_ed7e3b42e5a6bf0c;
Stratum_VarType_21873a9aa4b74080 stratum_VarType_6bc0d8b3d6ce42e2;
Stratum_agg_single_db5503f549ec2fba stratum_agg_single_39ee9cda178f5d07;
Stratum_agg_single0_c5854e9629edb7b2 stratum_agg_single0_934ad608bfdbcb95;
Stratum_agg_subclause_b5e89299bb3d014c stratum_agg_subclause_f71d8ac7de83919b;
Stratum_agg_subclause0_2f6b37acb5587509 stratum_agg_subclause0_032523e2f63b0d44;
Stratum_agg_subclause1_b0d49bdb175ed736 stratum_agg_subclause1_70828864d99d0453;
Stratum_agg_subclause2_2c6d1d605cb671cd stratum_agg_subclause2_c2e2a1c2343f77cf;
Stratum_agg_subclause3_801d3331bcc43fe8 stratum_agg_subclause3_8ce33083abd27210;
Stratum_agg_subclause5_325ed5d618826934 stratum_agg_subclause5_3fc943c051ed830e;
Stratum_agg_subclause6_a830bf03bb8d6997 stratum_agg_subclause6_45a72b49481e6e73;
std::string inputDirectory;
std::string outputDirectory;
SignalHandler* signalHandler{SignalHandler::instance()};
std::atomic<RamDomain> ctr{};
std::atomic<std::size_t> iter{};
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
 Sf_main::Sf_main():
symTable({
	R"_(data)_",
	R"_(equiv)_",
	R"_(dup)_",
	R"_(__phi__)_",
	R"_(set_field_wrapper)_",
	R"_(set_index_wrapper)_",
	R"_(set_slice_wrapper)_",
	R"_(NOTEST)_",
	R"_(axis)_",
	R"_(1)_",
	R"_(normal)_",
	R"_(invo_end)_",
	R"_(str)_",
	R"_(list[str])_",
	R"_(list)_",
	R"_(x)_",
	R"_(values)_",
	R"_(objs)_",
	R"_(arg)_",
	R"_(frame)_",
	R"_(pandas.melt)_",
	R"_(df)_",
	R"_(pandas.wide_to_long)_",
	R"_(left)_",
	R"_(right)_",
	R"_(dataset)_",
	R"_(X)_",
	R"_(y)_",
	R"_(generator)_",
	R"_(validation_data)_",
	R"_(rowset)_",
	R"_(DataFrameMapper.fit_transform)_",
	R"_(Pipeline.fit_transform)_",
	R"_(patsy.dmatrix)_",
	R"_(numpy.frexp)_",
	R"_(numpy.modf)_",
	R"_(pandas.Series.str.cat)_",
	R"_(pandas.cut)_",
	R"_(pandas.qcut)_",
	R"_(.*[.]DataFrame.groupby)_",
	R"_(sklearn.preprocessing.scale)_",
	R"_(len)_",
	R"_()_",
	R"_(sklearn.preprocessing.Imputer)_",
	R"_(pipeline)_",
	R"_(sklearn.preprocessing.MinMaxScaler)_",
	R"_(::: )_",
	R"_(Module)_",
	R"_(0)_",
	R"_((GenericUnivariateSelect|SelectPercentile|SelectKBest|SelectFpr|SelectFdr|SelectFromModel|SelectFwe|SequentialFeatureSelector|RFE|RFECV|VarianceThreshold)[.]fit)_",
	R"_((CountVectorizer|HashingVectorizer|TfidfTransformer|TfidfVectorizer|PCA)[.]fit)_",
	R"_((Imputer|SimpleImputer|IterativeImputer|KNNImputer)[.]fit)_",
	R"_((FunctionTransformer|KBinsDiscretizer|KernelCenterer|LabelBinarizer|LabelEncoder|MultiLabelBinarizer|MaxAbsScaler|MinMaxScaler|Normalizer|OneHotEncoder|OrdinalEncoder|PolynomialFeatures|PowerTransformer|QuantileTransformer|RobustScaler|SplineTransformer|StandardScaler)[.]fit)_",
	R"_((AffinityPropagation|AgglomerativeClustering|Birch|DBSCAN|FeatureAgglomeration|KMeans|MiniBatchKMeans|MeanShift|OPTICS|SpectralClustering|SpectralBiclustering|SpectralCoclustering)[.]fit)_",
	R"_(pandas[.](Series|DataFrame|get_dummies|pivot|pivot_table))_",
	R"_(pandas[.](cut|qcut))_",
	R"_(pandas[.](facorize|unique))_",
	R"_(pandas[.](concat|isna|isnull|notna|notnull))_",
	R"_(pandas[.](to_numeric|to_datetime|to_timedelta))_",
	R"_(pandas[.](merge|merge_ordered|merge_asof))_",
	R"_(.*DataLoader)_",
	R"_(.*[.](fit|predict|predict_log_proba|predict_proba|score|fit_sample|fit_resample))_",
	R"_(.*[.](fit|score))_",
	R"_(.*[.](fit|evaluate|predict|predict_classes|predict_proba|train_on_batch|test_on_batch|predict_on_batch))_",
	R"_(.*[.](fit_generator|evaluate_generator))_",
	R"_(.*[.](fit))_",
	R"_(.*[.](fit_generator))_",
	R"_(.*[.](fit|fit_generator))_",
	R"_(.*[.](fit|fit_transform|train))_",
	R"_(pandas[.](concat))_",
	R"_(.*[.](append|add))_",
	R"_(.*[.](insert))_",
	R"_(.*(Unknown|Unbound|Any|ndarray)[.](put))_",
	R"_(numpy[.](copyto|fill_diagonal))_",
	R"_(numpy[.](place|put|put_along_axis|putmask))_",
	R"_(.*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries|GroupBy)[.](fillna))_",
	R"_(.*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries|GroupBy)[.](clip))_",
	R"_(.*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries|GroupBy)[.](mask|where|replace))_",
	R"_((KBinsDiscretizer|PowerTransformer|QuantileTransformer|MaxAbsScaler|StandardScaler|MinMaxScaler|RobustScaler)[.]fit_transform)_",
	R"_((KBinsDiscretizer|PowerTransformer|QuantileTransformer|MaxAbsScaler|StandardScaler|MinMaxScaler|RobustScaler)[.]fit)_",
	R"_((Imputer|SimpleImputer|IterativeImputer|KNNImputer)[.]fit_transform)_",
	R"_((GenericUnivariateSelect|SelectPercentile|SelectKBest|SelectFpr|SelectFdr|SelectFromModel|SelectFwe|SequentialFeatureSelector|RFE|RFECV|VarianceThreshold)[.]fit_transform)_",
	R"_((AffinityPropagation|AgglomerativeClustering|Birch|DBSCAN|FeatureAgglomeration|KMeans|MiniBatchKMeans|MeanShift|OPTICS|SpectralClustering|SpectralBiclustering|SpectralCoclustering)[.](fit|fit_predict))_",
	R"_((CountVectorizer|HashingVectorizer|TfidfTransformer|TfidfVectorizer|PCA)[.]fit_transform)_",
	R"_(.*Tokenizer[.]fit_on_(sequences|texts))_",
	R"_(.*(Series|DataFrame)[.](drop))_",
	R"_(.*[.](reshape))_",
	R"_(numpy[.](prod|sum|nanprod|nansum|cumprod|cumsum|nancumprod|nancumsum|diff|ediff1d|gradient|trapz|amax|nanmax|amin|nanmin|convolve))_",
	R"_(numpy[.](pad))_",
	R"_(numpy[.](extract))_",
	R"_(numpy[.](dot|vdot|inner|outer|matmul|tensordot|kron))_",
	R"_(numpy[.]linalg[.](cholesky|qr|svd|inv|pinv|tensorinv))_",
	R"_(numpy[.](reshape|ravel|moveaxis|rollaxis|swapaxes|transpose|atleast_1d|atleast_2d|atleast_3d|broadcast|broadcast_to|broadcast_arrays|expand_dims|squeeze|asscalar|concatenate|stack|block|vstack|hstack|dstack|column_stack|row_stack|split|array_split|dsplit|hsplit|vsplit|tile|repeat|delete|insert|append|resize|trim_zeros|unique|flip|fliplr|flipud|roll|rot90))_",
	R"_(numpy[.](intersect1d|setdiff1d|setxor1d|union1d))_",
	R"_(numpy[.](take|take_along_axis|diag|diagonal))_",
	R"_(numpy[.](choose|compress|select))_",
	R"_(.*(Unknown|Unbound|Any|ndarray)[.](reshape|transpose|swapaxes|flattern|ravel|squeeze|take|repeat|choose|compress|diagonal))_",
	R"_(.*[.](fit_resample|fit_sample))_",
	R"_(.*train_test_split)_",
	R"_(pandas[.](melt|pivot|pivot_table|concat|unique|wide_to_long))_",
	R"_(.*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries)[.](align))_",
	R"_(.*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries)[.](append|compare|update|join|merge))_",
	R"_(.*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries)[.](r)?(add|sub|mul|div|truediv|floordiv|mod|pow|dot))_",
	R"_(.*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries)[.](lt|gt|le|ge|ne|eq))_",
	R"_(.*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries|Groupby)[.](combine|combine_first|groupby|expanding|ewm|pct_change|unique|head|last|reindex|reindex_like|sample|take|tail|truncate|filter|reorder_levels|swaplevel|swapaxes|stack|unstack|explode|ravel|repeat|squeeze|asfreq|asof|resample|at_time|between_time|items|iteritems|iterrows|itertuples|lookup|xs|query|melt|pipe|drop|dropna|drop_duplicates|droplevel|duplicated|agg|aggregate))_",
	R"_(.*Series[.]str[.](extractall))_",
	R"_(.*ImageDataGenerator[.](flow|flow_from_dataframe))_",
	R"_(.*[.](get_splits))_",
	R"_(.*[.](random_split))_",
	R"_(.*csr_matrix)_",
	R"_(.*[.](astype|copy|view|toarray|tocsr|todense|to_numpy|to_period|to_timestamp|to_list|to_xarray))_",
	R"_(numpy[.](array|asarray|asanyarray|asmatrix|asfarray|asfortranarray|ascontiguousarray|asarray_chkfinite|require|sort|lexsort|msort|sort_complex|partition))_",
	R"_(numpy[.](where))_",
	R"_(numpy[.](sin|cos|tan|arcsin|arccos|arctan|hypot|arctan2|degrees|radians|unwrap|deg2rad|rad2deg|sinh|cosh|tanh|arcsinh|arccosh|arctanh|around|round_|rint|fix|floor|ceil|trunc|cross|exp|expm1|exp2|log|log10|log2|log1p|logaddexp|logaddexp2|i0|sinc|signbit|copysign|frexp|ldexp|nextafter|spacing|lcm|gcd|add|reciprocal|positive|negative|multiply|divide|power|subtract|true_divide|floor_divide|float_power|fmod|mod|modf|remainder|divmod|angle|real|imag|conj|conjugate|maximum|fmax|minimum|fmin|clip|sqrt|cbrt|square|absolute|abs|fabs|sign|heaviside|nan_to_num|real_if_close|interp))_",
	R"_(numpy[.](hypot|arctan2|cross|nextafter|lcm|gcd|add|multiply|divide|power|subtract|true_divide|floor_divide|float_power|fmod|mod|remainder|divmod|maximum|fmax|minimum|fmin|heaviside))_",
	R"_(.*(Unknown|Unbound|Any|ndarray)[.](sort|partition|clip|conj|round))_",
	R"_(.*[.](transform|fit_transform))_",
	R"_(.*(add_dummy_feature|binarize|maxabs_scale|minmax_scale|normalize|quantile_transform|robust_scale|scale|power_transform))_",
	R"_(pandas[.](Series|DataFrame|get_dummies|cut|qcut|factorize|isna|isnull|notna|notnull|to_numeric|to_datetime|to_timedelta))_",
	R"_(.*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries|GroupBy)[.](copy|fillna|replace|map|apply|applymap|convert_dtypes|round|abs|between|clip|cummax|cummin|cumprod|cumsum|diff|factorize|rank|rename|rename_axis|reset_index|set_axis|where|mask|add_prefix|add_suffix|backfill|bfill|ffill|pad|interpolate|sort_values|sort_index|view|shift|tshift|slice_shift|tz_convert|tz_localize|select_dtypes|insert|pop|get|transpose|assign|rolling))_",
	R"_(.*(Series|DataFrame|FrameOrSeries|GroupBy)[.](transform))_",
	R"_(.*Series[.]str[.](capitalize|casefold|lower|upper|title|swapcase|cat|center|count|decode|encode|extract|join|len|ljust|lstrip|normalize|pad|partition|removeprefix|removesuffix|repeat|replace|rjust|rpartition|rstrip|slice|slice_replace|split|rsplit|strip|translate|wrap|zfill|get_dummies))_",
	R"_(.*Series[.]cat[.](rename_categories|reorder_categories|add_categories|remove_categories|remove_unused_categories|set_categories|as_ordered|as_unordered))_",
	R"_(.*Series[.]sparse[.](from_coo|to_coo))_",
	R"_(.*(Tokenizer)[.](sequences_to_texts|texts_to_matrix|texts_to_sequences))_",
	R"_(.*(hashing_trick|one_hot|text_to_word_sequence|pad_sequences))_",
	R"_(.*(apply_affine_transform|apply_brightness_shift|apply_channel_shift|array_to_img|img_to_array|random_brightness|random_channel_shift|random_rotation|random_shear|random_shift|random_zoom|smart_resize))_",
	R"_(torch[.](from_numpy))_",
	R"_(.*(DataLoader))_",
	R"_((Tensor|Unknown|Any)[.](bfloat16|bool|byte|char|double|float|half|int|long|short|to))_",
	R"_(.*(maxabs_scale|minmax_scale|quantile_transform|robust_scale|scale|power_transform))_",
	R"_(numpy[.](ptp|percentile|nanpercentile|quantile|nanquantile|median|average|mean|std|var|nanmedian|nanmean|nanstd|nanvar|corrcoef|correlate|cov|histogram|histogram2d|histogramdd|bincount|histogram_bin_edges|digitize|amax|max|nanmax|amin|min|nanmin|count_nonzero|trace))_",
	R"_(numpy[.]linalg[.](eig|eigh|eigvals|eigvalsh|norm|cond|det|matrix_rank|slogdet))_",
	R"_(.*(Unknown|Unbound|Any|ndarray)[.](max|min|ptp|trace|sum|cumsum|mean|var|std|prod|cumprod))_",
	R"_(.*(Unknown|Unbound|Any|Series|DataFrame|FrameOrSeries)[.](groupby|autocorr|corr|count|cov|mode|mean|median|max|min|nlargest|nsmallest|std|skew|var|sum|prod|describe|agg|aggregate|cummax|cummin|cumprod|cumsum|idxmax|idxmin|diff|pct_change|quantile|rank|sem|kurtosis|unique|nunique|backfill|bfill|ffill|pad|interpolate))_",
	R"_((RandomOverSampler|SMOTE|SMOTENC|SMOTEN|ADASYN|BorderlineSMOTE|KMeansSMOTE|SVMSMOTE|SMOTEENN|SMOTETomek)[.](fit_resample|fit_sample))_",
	R"_(.*[.](score|evaluate|auc|calinski_harabasz_score|davies_bouldin_score|silhouette_score|silhouette_samples))_",
	R"_(.*[.](plot_confusion_matrix|plot_det_curve|plot_precision_recall_curve|plot_roc_curve))_",
	R"_(.*(accuracy_score|average_precision_score|balanced_accuracy_score|brier_score_loss|classification_report|cohen_kappa_score|confusion_matrix|dcg_score|det_curve|f1_score|fbeta_score|hamming_loss|hinge_loss|jaccard_score|log_loss|matthews_corrcoef|multilabel_confusion_matrix|ndcg_score|precision_recall_curve|precision_recall_fscore_support|precision_score|recall_score|roc_auc_score|roc_curve|top_k_accuracy_score|zero_one_loss|explained_variance_score|max_error|mean_absolute_error|mean_squared_error|mean_squared_log_error|median_absolute_error|mean_absolute_percentage_error|r2_score|mean_poisson_deviance|mean_gamma_deviance|mean_tweedie_deviance|d2_tweedie_score|mean_pinball_loss|coverage_error|label_ranking_average_precision_score|label_ranking_loss|adjusted_mutual_info_score|adjusted_rand_score|completeness_score|contingency_matrix|pair_confusion_matrix|fowlkes_mallows_score|homogeneity_completeness_v_measure|homogeneity_score|mutual_info_score|normalized_mutual_info_score|rand_score|v_measure_score))_",
	R"_(.*[.](predict|score|evaluate|predict_proba))_",
	R"_(.*[.](forward))_",
	R"_(.*[.](backward))_",
	R"_(.*(GridSearchCV|HalvingGridSearchCV|ParameterGrid|ParameterSampler|RandomizedSearchCV|HalvingRandomSearchCV)[.]fit)_",
}),
recordTable(),
regexCache(),
rel_ActualKeyParam_c37ca7251a780d4f(mk<t_btree_iii__1__0_1_2__010__100__110__111::Type>()),
wrapper_rel_ActualKeyParam_c37ca7251a780d4f(0, *rel_ActualKeyParam_c37ca7251a780d4f, *this, "ActualKeyParam", std::array<const char *,3>{{"s:Var","s:Invocation","s:Var"}}, std::array<const char *,3>{{"keyword","invo","var"}}, 0),
rel_Invoke_d61c77705bff35b0(mk<t_btree_iii__2__0_1_2__001__110__111::Type>()),
wrapper_rel_Invoke_d61c77705bff35b0(1, *rel_Invoke_d61c77705bff35b0, *this, "Invoke", std::array<const char *,3>{{"s:Invocation","s:Method","s:Method"}}, std::array<const char *,3>{{"invo","toMeth","inMeth"}}, 0),
rel_MethodIndexToKey_1e172395196e36b8(mk<t_btree_iii__0_1_2__111::Type>()),
wrapper_rel_MethodIndexToKey_1e172395196e36b8(2, *rel_MethodIndexToKey_1e172395196e36b8, *this, "MethodIndexToKey", std::array<const char *,3>{{"i:number","s:Var","s:Method"}}, std::array<const char *,3>{{"index","keyword","meth"}}, 0),
rel_ActualParam_b7a735170493e717(mk<t_btree_iii__1__0_1_2__010__100__110__111::Type>()),
wrapper_rel_ActualParam_b7a735170493e717(3, *rel_ActualParam_b7a735170493e717, *this, "ActualParam", std::array<const char *,3>{{"i:number","s:Invocation","s:Var"}}, std::array<const char *,3>{{"index","invo","var"}}, 0),
rel_Reachable_60cce6ab70e369f7(mk<t_btree_ii__0_1__11__10::Type>()),
wrapper_rel_Reachable_60cce6ab70e369f7(4, *rel_Reachable_60cce6ab70e369f7, *this, "Reachable", std::array<const char *,2>{{"s:Method","r:Context"}}, std::array<const char *,2>{{"meth","ctx"}}, 0),
rel_delta_Reachable_f8722fb0e233b409(mk<t_btree_ii__0_1__11__10::Type>()),
rel_new_Reachable_0bd56444429534ad(mk<t_btree_ii__0_1__11__10::Type>()),
rel_CallGraphEdge_333c9d69fed5eee7(mk<t_btree_iiii__0_2__1_0_2__2_1_0_3__1000__1010__1110__1111__1100__0110__0100__0010::Type>()),
wrapper_rel_CallGraphEdge_333c9d69fed5eee7(5, *rel_CallGraphEdge_333c9d69fed5eee7, *this, "CallGraphEdge", std::array<const char *,4>{{"s:Invocation","r:Context","s:Method","r:Context"}}, std::array<const char *,4>{{"invo","callerCtx","meth","calleeCtx"}}, 0),
rel_FilteredTrainingMethod_abcda1d07db43c94(mk<t_btree_i__0__1::Type>()),
wrapper_rel_FilteredTrainingMethod_abcda1d07db43c94(6, *rel_FilteredTrainingMethod_abcda1d07db43c94, *this, "FilteredTrainingMethod", std::array<const char *,1>{{"s:Method"}}, std::array<const char *,1>{{"method"}}, 0),
rel_MethodSSA_a9f7ed6321abcd80(mk<t_btree_iii__1_2_0__011__111::Type>()),
wrapper_rel_MethodSSA_a9f7ed6321abcd80(7, *rel_MethodSSA_a9f7ed6321abcd80, *this, "MethodSSA", std::array<const char *,3>{{"i:number","i:number","s:Method"}}, std::array<const char *,3>{{"ret_index","index","meth"}}, 0),
rel_ParamToParamFlow_62719282a92885f3(mk<t_btree_iii__2_0_1__001__111::Type>()),
wrapper_rel_ParamToParamFlow_62719282a92885f3(8, *rel_ParamToParamFlow_62719282a92885f3, *this, "ParamToParamFlow", std::array<const char *,3>{{"i:number","i:number","s:Method"}}, std::array<const char *,3>{{"to","from","method"}}, 0),
rel_MethodUpdate_b9129e3e14098516(mk<t_btree_ii__1_0__11__01::Type>()),
wrapper_rel_MethodUpdate_b9129e3e14098516(9, *rel_MethodUpdate_b9129e3e14098516, *this, "MethodUpdate", std::array<const char *,2>{{"i:number","s:Method"}}, std::array<const char *,2>{{"index","meth"}}, 0),
rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d(mk<t_btree_iiii__3_0_1_2__1111__0001::Type>()),
wrapper_rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d(10, *rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d, *this, "ParamContentToRetCondEquivFlow", std::array<const char *,4>{{"i:number","i:number","i:number","s:Method"}}, std::array<const char *,4>{{"to","from","cond_id","method"}}, 0),
rel_ParamToParamDataFlow_0bd19d43cb842556(mk<t_btree_iii__2_0_1__001__111::Type>()),
wrapper_rel_ParamToParamDataFlow_0bd19d43cb842556(11, *rel_ParamToParamDataFlow_0bd19d43cb842556, *this, "ParamToParamDataFlow", std::array<const char *,3>{{"i:number","i:number","s:Method"}}, std::array<const char *,3>{{"to","from","method"}}, 0),
rel_ParamToRetCondEquivFlow_219c5a0dd6644473(mk<t_btree_iiii__3_0_1_2__1111__0001::Type>()),
wrapper_rel_ParamToRetCondEquivFlow_219c5a0dd6644473(12, *rel_ParamToRetCondEquivFlow_219c5a0dd6644473, *this, "ParamToRetCondEquivFlow", std::array<const char *,4>{{"i:number","i:number","i:number","s:Method"}}, std::array<const char *,4>{{"to","from","cond_id","method"}}, 0),
rel_ParamToRetDataFlow_4802f16da470059f(mk<t_btree_iii__2_0_1__001__111::Type>()),
wrapper_rel_ParamToRetDataFlow_4802f16da470059f(13, *rel_ParamToRetDataFlow_4802f16da470059f, *this, "ParamToRetDataFlow", std::array<const char *,3>{{"i:number","i:number","s:Method"}}, std::array<const char *,3>{{"to","from","method"}}, 0),
rel_ParamToRetEquivFlow_cf4bedb68bbe1170(mk<t_btree_iii__2_0_1__001__111::Type>()),
wrapper_rel_ParamToRetEquivFlow_cf4bedb68bbe1170(14, *rel_ParamToRetEquivFlow_cf4bedb68bbe1170, *this, "ParamToRetEquivFlow", std::array<const char *,3>{{"i:number","i:number","s:Method"}}, std::array<const char *,3>{{"to","from","method"}}, 0),
rel_TrainingData_276ec139200837ac(mk<t_btree_iii__0_1_2__111::Type>()),
wrapper_rel_TrainingData_276ec139200837ac(15, *rel_TrainingData_276ec139200837ac, *this, "TrainingData", std::array<const char *,3>{{"s:Method","i:number","i:number"}}, std::array<const char *,3>{{"method","model_idx","data_index"}}, 0),
rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed(mk<t_btree_iiii__2_0_1_3__1111__0010::Type>()),
wrapper_rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed(16, *rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed, *this, "ParamToParamTaintSourceMethod", std::array<const char *,4>{{"i:number","i:number","s:Method","s:symbol"}}, std::array<const char *,4>{{"to","from","method","taintType"}}, 0),
rel_ParamToRetTaintSourceMethod_54896442c7cf3fde(mk<t_btree_iiii__2_0_1_3__1111__0010::Type>()),
wrapper_rel_ParamToRetTaintSourceMethod_54896442c7cf3fde(17, *rel_ParamToRetTaintSourceMethod_54896442c7cf3fde, *this, "ParamToRetTaintSourceMethod", std::array<const char *,4>{{"i:number","i:number","s:Method","s:symbol"}}, std::array<const char *,4>{{"to","from","method","taintType"}}, 0),
rel_ScoredData_e3b4e0bebca3bce4(mk<t_btree_iii__0_1_2__100__111::Type>()),
wrapper_rel_ScoredData_e3b4e0bebca3bce4(18, *rel_ScoredData_e3b4e0bebca3bce4, *this, "ScoredData", std::array<const char *,3>{{"s:Method","i:number","i:number"}}, std::array<const char *,3>{{"method","model_idx","data_index"}}, 0),
rel_ScoredResult_cd9b66baec883a81(mk<t_btree_ii__0_1__11::Type>()),
wrapper_rel_ScoredResult_cd9b66baec883a81(19, *rel_ScoredResult_cd9b66baec883a81, *this, "ScoredResult", std::array<const char *,2>{{"s:Method","i:number"}}, std::array<const char *,2>{{"method","result_index"}}, 0),
rel_TestData_cd6b712f9b1db6bc(mk<t_btree_iii__0_1_2__111::Type>()),
wrapper_rel_TestData_cd6b712f9b1db6bc(20, *rel_TestData_cd6b712f9b1db6bc, *this, "TestData", std::array<const char *,3>{{"s:Method","i:number","i:number"}}, std::array<const char *,3>{{"method","model_idx","data_index"}}, 0),
rel_ValData_515538f102ad549e(mk<t_btree_iii__0_1_2__111::Type>()),
wrapper_rel_ValData_515538f102ad549e(21, *rel_ValData_515538f102ad549e, *this, "ValData", std::array<const char *,3>{{"s:Method","i:number","i:number"}}, std::array<const char *,3>{{"method","model_idx","data_index"}}, 0),
rel_ActualReturn_8bc9db09e057aa22(mk<t_btree_iii__1_0_2__010__110__111::Type>()),
wrapper_rel_ActualReturn_8bc9db09e057aa22(22, *rel_ActualReturn_8bc9db09e057aa22, *this, "ActualReturn", std::array<const char *,3>{{"i:number","s:Invocation","s:Var"}}, std::array<const char *,3>{{"index","invo","var"}}, 0),
rel_Alloc_31bbfa07060a4241(mk<t_btree_iii__0_1_2__111::Type>()),
wrapper_rel_Alloc_31bbfa07060a4241(23, *rel_Alloc_31bbfa07060a4241, *this, "Alloc", std::array<const char *,3>{{"s:Var","s:Value","s:Method"}}, std::array<const char *,3>{{"var","value","inMeth"}}, 0),
rel_AssignGlobal_f60b14713e1f1ab7(mk<t_btree_ii__0_1__11::Type>()),
wrapper_rel_AssignGlobal_f60b14713e1f1ab7(24, *rel_AssignGlobal_f60b14713e1f1ab7, *this, "AssignGlobal", std::array<const char *,2>{{"s:Var","s:Var"}}, std::array<const char *,2>{{"to","from"}}, 0),
rel_AssignVar_b173aa4bb6352b3a(mk<t_btree_ii__0_1__11::Type>()),
wrapper_rel_AssignVar_b173aa4bb6352b3a(25, *rel_AssignVar_b173aa4bb6352b3a, *this, "AssignVar", std::array<const char *,2>{{"s:Var","s:Var"}}, std::array<const char *,2>{{"to","from"}}, 0),
rel_StoreField_7d8d16151c0ea49b(mk<t_btree_iii__0_1_2__111::Type>()),
wrapper_rel_StoreField_7d8d16151c0ea49b(26, *rel_StoreField_7d8d16151c0ea49b, *this, "StoreField", std::array<const char *,3>{{"s:Var","s:Field","s:Var"}}, std::array<const char *,3>{{"base","f","from"}}, 0),
rel_StoreFieldSSA_051b143b9d011002(mk<t_btree_iiii__0_1_2_3__1111__1100::Type>()),
wrapper_rel_StoreFieldSSA_051b143b9d011002(27, *rel_StoreFieldSSA_051b143b9d011002, *this, "StoreFieldSSA", std::array<const char *,4>{{"s:Var","s:Var","s:Field","s:Var"}}, std::array<const char *,4>{{"new_base","base","f","from"}}, 0),
rel_LoadSlice_e590a0ee3f45cac8(mk<t_btree_iiiii__0_1_2_3_4__11111::Type>()),
wrapper_rel_LoadSlice_e590a0ee3f45cac8(28, *rel_LoadSlice_e590a0ee3f45cac8, *this, "LoadSlice", std::array<const char *,5>{{"s:Var","s:Var","s:Var","s:Var","s:Var"}}, std::array<const char *,5>{{"to","base","st","ed","step"}}, 0),
rel_StoreSlice_2d8a31bc728a3bbd(mk<t_btree_iiiii__0_1_2_3_4__11111::Type>()),
wrapper_rel_StoreSlice_2d8a31bc728a3bbd(29, *rel_StoreSlice_2d8a31bc728a3bbd, *this, "StoreSlice", std::array<const char *,5>{{"s:Var","s:Var","s:Var","s:Var","s:Var"}}, std::array<const char *,5>{{"base","st","ed","step","from"}}, 0),
rel_StoreSliceSSA_f26b3c4e2aecada2(mk<t_btree_iiiiii__0_1_2_3_4_5__110000__111111::Type>()),
wrapper_rel_StoreSliceSSA_f26b3c4e2aecada2(30, *rel_StoreSliceSSA_f26b3c4e2aecada2, *this, "StoreSliceSSA", std::array<const char *,6>{{"s:Var","s:Var","s:Var","s:Var","s:Var","s:Var"}}, std::array<const char *,6>{{"new_base","base","st","ed","step","from"}}, 0),
rel_SliceIndex_7426c9b7afc02920(mk<t_btree_iiii__0_1_2_3__1110__1111::Type>()),
wrapper_rel_SliceIndex_7426c9b7afc02920(31, *rel_SliceIndex_7426c9b7afc02920, *this, "SliceIndex", std::array<const char *,4>{{"s:Var","s:Var","s:Var","s:Index"}}, std::array<const char *,4>{{"st","ed","step","index"}}, 0),
rel_StoreIndex_bab2c0876dfa7ece(mk<t_btree_iii__0_1_2__110__111::Type>()),
wrapper_rel_StoreIndex_bab2c0876dfa7ece(32, *rel_StoreIndex_bab2c0876dfa7ece, *this, "StoreIndex", std::array<const char *,3>{{"s:Var","s:Index","s:Var"}}, std::array<const char *,3>{{"base","i","from"}}, 0),
rel_StoreIndexSSA_431249b1dfe65e85(mk<t_btree_iiii__0_1_2_3__1111__1100::Type>()),
wrapper_rel_StoreIndexSSA_431249b1dfe65e85(33, *rel_StoreIndexSSA_431249b1dfe65e85, *this, "StoreIndexSSA", std::array<const char *,4>{{"s:Var","s:Var","s:Index","s:Var"}}, std::array<const char *,4>{{"new_base","base","i","from"}}, 0),
rel_FilteredMethod_3007b0a4b117f645(mk<t_btree_i__0__1::Type>()),
wrapper_rel_FilteredMethod_3007b0a4b117f645(34, *rel_FilteredMethod_3007b0a4b117f645, *this, "FilteredMethod", std::array<const char *,1>{{"s:Method"}}, std::array<const char *,1>{{"meth"}}, 0),
rel_FormalReturn_62e4844334f73406(mk<t_btree_iii__1_0_2__010__111::Type>()),
wrapper_rel_FormalReturn_62e4844334f73406(35, *rel_FormalReturn_62e4844334f73406, *this, "FormalReturn", std::array<const char *,3>{{"i:number","s:Method","s:Var"}}, std::array<const char *,3>{{"index","meth","var"}}, 0),
rel_ArityMatch_1f1fc51deec0d387(mk<t_btree_iiii__0_1_2_3__1111::Type>()),
wrapper_rel_ArityMatch_1f1fc51deec0d387(36, *rel_ArityMatch_1f1fc51deec0d387, *this, "ArityMatch", std::array<const char *,4>{{"s:Invocation","r:Context","s:Method","r:Context"}}, std::array<const char *,4>{{"invo","callerCtx","meth","calleeCtx"}}, 0),
rel_FormalParam_f381be5dce5c9780(mk<t_btree_iii__1_0_2__010__111::Type>()),
wrapper_rel_FormalParam_f381be5dce5c9780(37, *rel_FormalParam_f381be5dce5c9780, *this, "FormalParam", std::array<const char *,3>{{"i:number","s:Method","s:Var"}}, std::array<const char *,3>{{"index","meth","var"}}, 0),
rel_InterProcAssign_bed60ee93a02e127(mk<t_btree_iiii__0_2_1_3__1010__1111::Type>()),
wrapper_rel_InterProcAssign_bed60ee93a02e127(38, *rel_InterProcAssign_bed60ee93a02e127, *this, "InterProcAssign", std::array<const char *,4>{{"s:Var","r:Context","s:Var","r:Context"}}, std::array<const char *,4>{{"to","calleeCtx","from","callerCtx"}}, 0),
rel_LoadField_6018b2c33f454495(mk<t_btree_iii__2__0_1_2__001__110__111::Type>()),
wrapper_rel_LoadField_6018b2c33f454495(39, *rel_LoadField_6018b2c33f454495, *this, "LoadField", std::array<const char *,3>{{"s:Var","s:Var","s:Field"}}, std::array<const char *,3>{{"to","base","f"}}, 0),
rel_LoadIndex_3a07e512c7efb9bd(mk<t_btree_iii__2__0_1_2__001__110__111::Type>()),
wrapper_rel_LoadIndex_3a07e512c7efb9bd(40, *rel_LoadIndex_3a07e512c7efb9bd, *this, "LoadIndex", std::array<const char *,3>{{"s:Var","s:Var","s:Index"}}, std::array<const char *,3>{{"to","base","i"}}, 0),
rel_VarInMethod_a7f53498a99fbbab(mk<t_btree_ii__0_1__11__10::Type>()),
wrapper_rel_VarInMethod_a7f53498a99fbbab(41, *rel_VarInMethod_a7f53498a99fbbab, *this, "VarInMethod", std::array<const char *,2>{{"s:Var","s:Method"}}, std::array<const char *,2>{{"var","meth"}}, 0),
rel_FieldPointsTo_79eb0e1cfe8639b3(mk<t_btree_iiiii__0_1_2_3_4__11100__11111::Type>()),
wrapper_rel_FieldPointsTo_79eb0e1cfe8639b3(42, *rel_FieldPointsTo_79eb0e1cfe8639b3, *this, "FieldPointsTo", std::array<const char *,5>{{"s:Value","r:HContext","s:Field","s:Value","r:HContext"}}, std::array<const char *,5>{{"base","baseHctx","field","value","hctx"}}, 0),
rel_delta_FieldPointsTo_6e98ef2bb9d48d3a(mk<t_btree_iiiii__0_1_2_3_4__11100__11111::Type>()),
rel_new_FieldPointsTo_b27ef2e9e0cb7cd8(mk<t_btree_iiiii__0_1_2_3_4__11100__11111::Type>()),
rel_IndexContentPointsTo_db1dfbfa873aff0a(mk<t_btree_iiii__0_1_2_3__1111__1100::Type>()),
wrapper_rel_IndexContentPointsTo_db1dfbfa873aff0a(43, *rel_IndexContentPointsTo_db1dfbfa873aff0a, *this, "IndexContentPointsTo", std::array<const char *,4>{{"s:Value","r:HContext","s:Value","r:HContext"}}, std::array<const char *,4>{{"baseValue","baseHctx","value","hctx"}}, 0),
rel_delta_IndexContentPointsTo_0515756a33abb518(mk<t_btree_iiii__0_1_2_3__1111__1100::Type>()),
rel_new_IndexContentPointsTo_b75799237eab2896(mk<t_btree_iiii__0_1_2_3__1111__1100::Type>()),
rel_VarPointsTo_c1a9f897b9f324f0(mk<t_btree_iiii__2_3_0_1__0_1__1000__1111__1100__0011::Type>()),
wrapper_rel_VarPointsTo_c1a9f897b9f324f0(44, *rel_VarPointsTo_c1a9f897b9f324f0, *this, "VarPointsTo", std::array<const char *,4>{{"s:Var","r:Context","s:Value","r:HContext"}}, std::array<const char *,4>{{"var","ctx","value","hctx"}}, 0),
rel_delta_VarPointsTo_16577dc30fb04e76(mk<t_btree_iiii__0_1_2_3__1000__1111__1100::Type>()),
rel_new_VarPointsTo_5ea2db765d05791c(mk<t_btree_iiii__0_1_2_3__1000__1111__1100::Type>()),
rel_Alias_22e56a91218d2f0d(mk<t_btree_iiii__2_0_1_3__0_1__1111__1100__0010::Type>()),
wrapper_rel_Alias_22e56a91218d2f0d(45, *rel_Alias_22e56a91218d2f0d, *this, "Alias", std::array<const char *,4>{{"s:Var","r:Context","s:Var","r:Context"}}, std::array<const char *,4>{{"to","toCtx","from","fromCtx"}}, 0),
rel_AssignBinOp_ac278042ec33e40a(mk<t_btree_iiii__0_1_2_3__1111::Type>()),
wrapper_rel_AssignBinOp_ac278042ec33e40a(46, *rel_AssignBinOp_ac278042ec33e40a, *this, "AssignBinOp", std::array<const char *,4>{{"s:Var","s:Var","s:symbol","s:Var"}}, std::array<const char *,4>{{"to","left","op","right"}}, 0),
rel_AssignBoolConstant_153553f1352c29c5(mk<t_btree_ii__0_1__11::Type>()),
wrapper_rel_AssignBoolConstant_153553f1352c29c5(47, *rel_AssignBoolConstant_153553f1352c29c5, *this, "AssignBoolConstant", std::array<const char *,2>{{"s:Var","s:symbol"}}, std::array<const char *,2>{{"to","constant"}}, 0),
rel_AssignFloatConstant_2958d76b03506f1d(mk<t_btree_ii__0_1__11::Type>()),
wrapper_rel_AssignFloatConstant_2958d76b03506f1d(48, *rel_AssignFloatConstant_2958d76b03506f1d, *this, "AssignFloatConstant", std::array<const char *,2>{{"s:Var","s:symbol"}}, std::array<const char *,2>{{"to","constant"}}, 0),
rel_AssignIntConstant_91e14648ac326411(mk<t_btree_ii__0_1__11::Type>()),
wrapper_rel_AssignIntConstant_91e14648ac326411(49, *rel_AssignIntConstant_91e14648ac326411, *this, "AssignIntConstant", std::array<const char *,2>{{"s:Var","s:symbol"}}, std::array<const char *,2>{{"to","constant"}}, 0),
rel_AssignStrConstant_2b622c7da0720ea5(mk<t_btree_ii__0_1__11::Type>()),
wrapper_rel_AssignStrConstant_2b622c7da0720ea5(50, *rel_AssignStrConstant_2b622c7da0720ea5, *this, "AssignStrConstant", std::array<const char *,2>{{"s:Var","s:symbol"}}, std::array<const char *,2>{{"to","constant"}}, 0),
rel_ConstantValue_bf370ded014c6df6(mk<t_btree_ii__1_0__11__01::Type>()),
wrapper_rel_ConstantValue_bf370ded014c6df6(51, *rel_ConstantValue_bf370ded014c6df6, *this, "ConstantValue", std::array<const char *,2>{{"s:Var","s:symbol"}}, std::array<const char *,2>{{"var","constant"}}, 0),
rel_FlowCondition_f30c150f9e6134d8(mk<t_btree_iii__0_1_2__100__111::Type>()),
wrapper_rel_FlowCondition_f30c150f9e6134d8(52, *rel_FlowCondition_f30c150f9e6134d8, *this, "FlowCondition", std::array<const char *,3>{{"i:number","s:Var","s:symbol"}}, std::array<const char *,3>{{"cond_id","keyword","constant"}}, 0),
rel_VarType_28c8217e193eb319(mk<t_btree_ii__1_0__0__11__10__01::Type>()),
wrapper_rel_VarType_28c8217e193eb319(53, *rel_VarType_28c8217e193eb319, *this, "VarType", std::array<const char *,2>{{"s:Var","s:Type"}}, std::array<const char *,2>{{"var","type"}}, 0),
rel_IsDataFrameEquivIndexing_5de5b08291e74631(mk<t_btree_i__0__1::Type>()),
wrapper_rel_IsDataFrameEquivIndexing_5de5b08291e74631(54, *rel_IsDataFrameEquivIndexing_5de5b08291e74631, *this, "IsDataFrameEquivIndexing", std::array<const char *,1>{{"s:Var"}}, std::array<const char *,1>{{"var"}}, 0),
rel_LocalMethod_5b358702fac6f178(mk<t_btree_i__0__1::Type>()),
wrapper_rel_LocalMethod_5b358702fac6f178(55, *rel_LocalMethod_5b358702fac6f178, *this, "LocalMethod", std::array<const char *,1>{{"s:Method"}}, std::array<const char *,1>{{"meth"}}, 0),
rel_FlowFromEdge_6f9cb97dfaad1a54(mk<t_btree_iiiii__0_1_4_2_3__11111__11001::Type>()),
wrapper_rel_FlowFromEdge_6f9cb97dfaad1a54(56, *rel_FlowFromEdge_6f9cb97dfaad1a54, *this, "FlowFromEdge", std::array<const char *,5>{{"s:Var","r:Context","s:Var","r:Context","s:symbol"}}, std::array<const char *,5>{{"to","toCtx","from","fromCtx","tag"}}, 0),
rel_delta_FlowFromEdge_06b5167ac5e9217c(mk<t_btree_iiiii__4_0_1_2_3__11111__00001::Type>()),
rel_new_FlowFromEdge_4b44b140131ea495(mk<t_btree_iiiii__4_0_1_2_3__11111__00001::Type>()),
rel_FlowFrom_0c9cf4995aeb9ef7(mk<t_btree_iiiii__0_1_2_3_4__11111__11000::Type>()),
wrapper_rel_FlowFrom_0c9cf4995aeb9ef7(57, *rel_FlowFrom_0c9cf4995aeb9ef7, *this, "FlowFrom", std::array<const char *,5>{{"s:Var","r:Context","s:Var","r:Context","s:symbol"}}, std::array<const char *,5>{{"to","toCtx","from","fromCtx","tag"}}, 0),
rel_delta_FlowFrom_9453696b0b7d82d1(mk<t_btree_iiiii__0_1_2_3_4__11111::Type>()),
rel_new_FlowFrom_581490064b4976c4(mk<t_btree_iiiii__0_1_2_3_4__11111::Type>()),
rel_FlowFromExtended_7fd58681b534e204(mk<t_btree_iiiii__0_1_2__4_2_3_0_1__2_3_0_1__11100__11111__11110__10110__00001__00100__00110__00111::Type>()),
wrapper_rel_FlowFromExtended_7fd58681b534e204(58, *rel_FlowFromExtended_7fd58681b534e204, *this, "FlowFromExtended", std::array<const char *,5>{{"s:Var","r:Context","s:Var","r:Context","s:symbol"}}, std::array<const char *,5>{{"to","toCtx","from","fromCtx","tag"}}, 0),
rel_SubType_1b987a9db6ba7d57(mk<t_btree_ii__0_1__11::Type>()),
wrapper_rel_SubType_1b987a9db6ba7d57(59, *rel_SubType_1b987a9db6ba7d57, *this, "SubType", std::array<const char *,2>{{"s:Type","s:Type"}}, std::array<const char *,2>{{"subtype","type"}}, 0),
rel_TorchModelWithData_3bc4694c9032b02a(mk<t_btree_iiii__0_1_2_3__1111::Type>()),
wrapper_rel_TorchModelWithData_3bc4694c9032b02a(60, *rel_TorchModelWithData_3bc4694c9032b02a, *this, "TorchModelWithData", std::array<const char *,4>{{"s:Var","s:Var","s:Invocation","s:Method"}}, std::array<const char *,4>{{"model","train","invo","meth"}}, 0),
rel_TrainingDataWithModel_bf0078ce702b39b8(mk<t_btree_iiiii__0_4_1_2_3__11111__10001::Type>()),
wrapper_rel_TrainingDataWithModel_bf0078ce702b39b8(61, *rel_TrainingDataWithModel_bf0078ce702b39b8, *this, "TrainingDataWithModel", std::array<const char *,5>{{"s:Var","s:Var","s:Invocation","s:Method","r:Context"}}, std::array<const char *,5>{{"model","train","invo","meth","ctx"}}, 0),
rel_disconnected0_b2add3842fe11dfe(mk<t_nullaries>()),
wrapper_rel_disconnected0_b2add3842fe11dfe(62, *rel_disconnected0_b2add3842fe11dfe, *this, "+disconnected0", std::array<const char *,0>{{}}, std::array<const char *,0>{{}}, 0),
rel_ValOrTestDataWithModel_2810ba231c0c185a(mk<t_btree_iiiii__0_4_1_2_3__11111__10001::Type>()),
wrapper_rel_ValOrTestDataWithModel_2810ba231c0c185a(63, *rel_ValOrTestDataWithModel_2810ba231c0c185a, *this, "ValOrTestDataWithModel", std::array<const char *,5>{{"s:Var","s:Var","s:Invocation","s:Method","r:Context"}}, std::array<const char *,5>{{"model","test","invo","meth","ctx"}}, 0),
rel_ScoredDataWithModel_55bb6aafc5a52e34(mk<t_btree_iiiii__0_1_2_3_4__11111::Type>()),
wrapper_rel_ScoredDataWithModel_55bb6aafc5a52e34(64, *rel_ScoredDataWithModel_55bb6aafc5a52e34, *this, "ScoredDataWithModel", std::array<const char *,5>{{"s:Var","s:Var","s:Invocation","s:Method","r:Context"}}, std::array<const char *,5>{{"model","test","invo","meth","ctx"}}, 0),
rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843(mk<t_btree_iiiii__3_0_1_2_4__11111__00010::Type>()),
wrapper_rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843(65, *rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843, *this, "ParamToRetCondTaintSourceMethod", std::array<const char *,5>{{"i:number","i:number","i:number","s:Method","s:symbol"}}, std::array<const char *,5>{{"to","from","cond_id","method","taintType"}}, 0),
rel_TaintCondition_7b1ddf0c7226422d(mk<t_btree_iii__0_1_2__100__111::Type>()),
wrapper_rel_TaintCondition_7b1ddf0c7226422d(66, *rel_TaintCondition_7b1ddf0c7226422d, *this, "TaintCondition", std::array<const char *,3>{{"i:number","i:number","s:symbol"}}, std::array<const char *,3>{{"cond_id","src_idx","taintType"}}, 0),
rel_RetTaintSourceMethod_b3e3f5b46f4b2c24(mk<t_btree_iii__1_0_2__010__111::Type>()),
wrapper_rel_RetTaintSourceMethod_b3e3f5b46f4b2c24(67, *rel_RetTaintSourceMethod_b3e3f5b46f4b2c24, *this, "RetTaintSourceMethod", std::array<const char *,3>{{"i:number","s:Method","s:symbol"}}, std::array<const char *,3>{{"retIndex","method","taintType"}}, 0),
rel_TaintStarts_1fb2f244128dc60e(mk<t_btree_iii__0_1_2__111::Type>()),
wrapper_rel_TaintStarts_1fb2f244128dc60e(68, *rel_TaintStarts_1fb2f244128dc60e, *this, "TaintStarts", std::array<const char *,3>{{"s:Var","r:Context","s:symbol"}}, std::array<const char *,3>{{"var","ctx","label"}}, 0),
rel_delta_TaintStarts_cc75a7e7e9407e43(mk<t_btree_iii__0_1_2__111::Type>()),
rel_new_TaintStarts_39ba418fa1a55080(mk<t_btree_iii__0_1_2__111::Type>()),
rel_TaintStartsTarget_b45151d0d1a25a24(mk<t_btree_iiiiiii__6_0_1_2_3_4_5__1111111__0000001::Type>()),
wrapper_rel_TaintStartsTarget_b45151d0d1a25a24(69, *rel_TaintStartsTarget_b45151d0d1a25a24, *this, "TaintStartsTarget", std::array<const char *,7>{{"s:Var","r:Context","s:Var","r:Context","s:Invocation","s:Method","s:symbol"}}, std::array<const char *,7>{{"to","toCtx","from","fromCtx","invo","meth","label"}}, 0),
rel_DuplicateEdge_0f0315b18851fb20(mk<t_btree_iiii__0_1_2_3__1111::Type>()),
wrapper_rel_DuplicateEdge_0f0315b18851fb20(70, *rel_DuplicateEdge_0f0315b18851fb20, *this, "DuplicateEdge", std::array<const char *,4>{{"s:Var","r:Context","s:Var","r:Context"}}, std::array<const char *,4>{{"to","toCtx","from","fromCtx"}}, 0),
rel_DataOverlap_5a4300eece6cb523(mk<t_btree_iiii__0_1_2_3__1111::Type>()),
wrapper_rel_DataOverlap_5a4300eece6cb523(71, *rel_DataOverlap_5a4300eece6cb523, *this, "DataOverlap", std::array<const char *,4>{{"s:Var","r:Context","s:Var","r:Context"}}, std::array<const char *,4>{{"train","ctx1","test","ctx2"}}, 0),
rel_delta_DataOverlap_83ad9cceb2f93136(mk<t_btree_iiii__2_3_0_1__1111__0011::Type>()),
rel_new_DataOverlap_92d522de74fa8c9c(mk<t_btree_iiii__2_3_0_1__1111__0011::Type>()),
rel_MultiUseTestLeak_0ea2b38088c6193a(mk<t_btree_iiii__0_1_2_3__1111::Type>()),
wrapper_rel_MultiUseTestLeak_0ea2b38088c6193a(72, *rel_MultiUseTestLeak_0ea2b38088c6193a, *this, "MultiUseTestLeak", std::array<const char *,4>{{"s:Var","s:Invocation","s:Method","r:Context"}}, std::array<const char *,4>{{"test","invo","meth","ctx"}}, 0),
rel_Telemetry_MultiUseTestLeak_f37504d03b612c98(mk<t_btree_iiiiiiiiii__0_1_2_3_4_5_6_7_8_9__1111111111::Type>()),
wrapper_rel_Telemetry_MultiUseTestLeak_f37504d03b612c98(73, *rel_Telemetry_MultiUseTestLeak_f37504d03b612c98, *this, "Telemetry_MultiUseTestLeak", std::array<const char *,10>{{"s:Var","s:Var","s:Invocation","s:Method","r:Context","s:Var","s:Var","s:Invocation","s:Method","r:Context"}}, std::array<const char *,10>{{"testModel","test","testInvo","testMeth","ctx1","testModel2","test2","testInvo2","testMeth2","ctx2"}}, 0),
rel_ReduceEdge_70a6ab3f2a478ff1(mk<t_btree_iiii__0_1_2_3__1111::Type>()),
wrapper_rel_ReduceEdge_70a6ab3f2a478ff1(74, *rel_ReduceEdge_70a6ab3f2a478ff1, *this, "ReduceEdge", std::array<const char *,4>{{"s:Var","r:Context","s:Var","r:Context"}}, std::array<const char *,4>{{"to","toCtx","from","fromCtx"}}, 0),
rel_InvokeInLoop_c641dec75a6890e7(mk<t_btree_ii__0_1__11__10::Type>()),
wrapper_rel_InvokeInLoop_c641dec75a6890e7(75, *rel_InvokeInLoop_c641dec75a6890e7, *this, "InvokeInLoop", std::array<const char *,2>{{"s:Invocation","s:Var"}}, std::array<const char *,2>{{"invo","loop_var"}}, 0),
rel_ValDataWithModel_ef5cc7d0fb594fa5(mk<t_btree_iiiii__0_1_2_3_4__11111::Type>()),
wrapper_rel_ValDataWithModel_ef5cc7d0fb594fa5(76, *rel_ValDataWithModel_ef5cc7d0fb594fa5, *this, "ValDataWithModel", std::array<const char *,5>{{"s:Var","s:Var","s:Invocation","s:Method","r:Context"}}, std::array<const char *,5>{{"model","val","invo","meth","ctx"}}, 0),
rel_delta_ValDataWithModel_0840db341aaccef6(mk<t_btree_iiiii__0_1_2_3_4__11111::Type>()),
rel_new_ValDataWithModel_9ed2fac795be70a1(mk<t_btree_iiiii__0_1_2_3_4__11111::Type>()),
rel_disconnected1_a1b44fde1b4da294(mk<t_nullaries>()),
wrapper_rel_disconnected1_a1b44fde1b4da294(77, *rel_disconnected1_a1b44fde1b4da294, *this, "+disconnected1", std::array<const char *,0>{{}}, std::array<const char *,0>{{}}, 0),
rel_TestDataWithModel_2269d730f5799893(mk<t_btree_iiiii__0_4_1_2_3__11111__10001::Type>()),
wrapper_rel_TestDataWithModel_2269d730f5799893(78, *rel_TestDataWithModel_2269d730f5799893, *this, "TestDataWithModel", std::array<const char *,5>{{"s:Var","s:Var","s:Invocation","s:Method","r:Context"}}, std::array<const char *,5>{{"model","test","invo","meth","ctx"}}, 0),
rel_NextInvoke_f6aefda469e3b88c(mk<t_btree_ii__1_0__11__01::Type>()),
wrapper_rel_NextInvoke_f6aefda469e3b88c(79, *rel_NextInvoke_f6aefda469e3b88c, *this, "NextInvoke", std::array<const char *,2>{{"s:Invocation","s:Invocation"}}, std::array<const char *,2>{{"invo1","invo2"}}, 0),
rel_InvokeEdge_101b6dc2a844897b(mk<t_btree_iiii__0_1_2_3__1111::Type>()),
wrapper_rel_InvokeEdge_101b6dc2a844897b(80, *rel_InvokeEdge_101b6dc2a844897b, *this, "InvokeEdge", std::array<const char *,4>{{"s:Invocation","r:Context","s:Invocation","r:Context"}}, std::array<const char *,4>{{"to_invo","to_ctx","from_invo","from_ctx"}}, 0),
rel_delta_InvokeEdge_a34c04d9e3048d06(mk<t_btree_iiii__0_1_2_3__1111::Type>()),
rel_new_InvokeEdge_1250f9237f36bc79(mk<t_btree_iiii__0_1_2_3__1111::Type>()),
rel_InvokePath_12c42b7c9b655a96(mk<t_btree_iiii__0_1_2_3__1111__1100::Type>()),
wrapper_rel_InvokePath_12c42b7c9b655a96(81, *rel_InvokePath_12c42b7c9b655a96, *this, "InvokePath", std::array<const char *,4>{{"s:Invocation","r:Context","s:Invocation","r:Context"}}, std::array<const char *,4>{{"to_invo","to_ctx","from_invo","from_ctx"}}, 0),
rel_delta_InvokePath_269e2f7ec8f9b43d(mk<t_btree_iiii__0_1_2_3__1111__1100::Type>()),
rel_new_InvokePath_3ae2baced09cf095(mk<t_btree_iiii__0_1_2_3__1111__1100::Type>()),
rel_ModelPairCandidate_9322881dca01d8da(mk<t_btree_iiii__0_1_2_3__1111::Type>()),
wrapper_rel_ModelPairCandidate_9322881dca01d8da(82, *rel_ModelPairCandidate_9322881dca01d8da, *this, "ModelPairCandidate", std::array<const char *,4>{{"s:Var","r:Context","s:Var","r:Context"}}, std::array<const char *,4>{{"testModel","ctx1","trainModel","ctx2"}}, 0),
rel__agg_subclause1_6b72bc2ad4593b7d(mk<t_btree_iiiiiiii__0_1_3_5_6_2_4_7__11010110__11111111::Type>()),
wrapper_rel__agg_subclause1_6b72bc2ad4593b7d(83, *rel__agg_subclause1_6b72bc2ad4593b7d, *this, "__agg_subclause1", std::array<const char *,8>{{"r:Context","r:Context","r:Context","s:Invocation","s:Invocation","s:Var","s:Var","s:Var"}}, std::array<const char *,8>{{"ctx1","ctx2","ctx3","invo2","invo3","testModel","trainModel","trainModel2"}}, 0),
rel_ModelPair_a5a4124c4969f589(mk<t_btree_iiii__0_1_2_3__1111::Type>()),
wrapper_rel_ModelPair_a5a4124c4969f589(84, *rel_ModelPair_a5a4124c4969f589, *this, "ModelPair", std::array<const char *,4>{{"s:Var","r:Context","s:Var","r:Context"}}, std::array<const char *,4>{{"testModel","ctx1","trainModel","ctx2"}}, 0),
rel_FilteredTests_bd4cd275bd1cb347(mk<t_btree_iiiii__0_4_1_2_3__11111__10001::Type>()),
wrapper_rel_FilteredTests_bd4cd275bd1cb347(85, *rel_FilteredTests_bd4cd275bd1cb347, *this, "FilteredTests", std::array<const char *,5>{{"s:Var","s:Var","s:Invocation","s:Method","r:Context"}}, std::array<const char *,5>{{"testModel","test","invo","meth","ctx"}}, 0),
rel__agg_subclause6_2a58958a8d13999d(mk<t_btree_iiiii__0_1_2_3_4__11111::Type>()),
wrapper_rel__agg_subclause6_2a58958a8d13999d(86, *rel__agg_subclause6_2a58958a8d13999d, *this, "__agg_subclause6", std::array<const char *,5>{{"r:Context","s:Invocation","s:Method","s:Var","s:Var"}}, std::array<const char *,5>{{"ctx1","invo","meth","test","testModel"}}, 0),
rel__agg_single0_ae1fba617ee8151c(mk<t_btree_i__0__1::Type>()),
wrapper_rel__agg_single0_ae1fba617ee8151c(87, *rel__agg_single0_ae1fba617ee8151c, *this, "__agg_single0", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z0"}}, 0),
rel__agg_subclause5_277251a440f34db7(mk<t_btree_iiiii__0_1_2_3_4__11111::Type>()),
wrapper_rel__agg_subclause5_277251a440f34db7(88, *rel__agg_subclause5_277251a440f34db7, *this, "__agg_subclause5", std::array<const char *,5>{{"r:Context","s:Invocation","s:Method","s:Var","s:Var"}}, std::array<const char *,5>{{"ctx10","invo0","meth0","test0","testModel0"}}, 0),
rel__agg_single_bd0385c34ef6548a(mk<t_btree_i__0__1::Type>()),
wrapper_rel__agg_single_bd0385c34ef6548a(89, *rel__agg_single_bd0385c34ef6548a, *this, "__agg_single", std::array<const char *,1>{{"i:__numberConstant"}}, std::array<const char *,1>{{"z"}}, 0),
rel_FinalNoTestData_1dcf6aa80b893c15(mk<t_btree_ii__0_1__11::Type>()),
wrapper_rel_FinalNoTestData_1dcf6aa80b893c15(90, *rel_FinalNoTestData_1dcf6aa80b893c15, *this, "FinalNoTestData", std::array<const char *,2>{{"s:symbol","i:number"}}, std::array<const char *,2>{{"msg","cnt"}}, 0),
rel_FinalNoTestDataWithMultiUse_99aec0c4382a0994(mk<t_btree_ii__0_1__11::Type>()),
wrapper_rel_FinalNoTestDataWithMultiUse_99aec0c4382a0994(91, *rel_FinalNoTestDataWithMultiUse_99aec0c4382a0994, *this, "FinalNoTestDataWithMultiUse", std::array<const char *,2>{{"s:symbol","i:number"}}, std::array<const char *,2>{{"msg","cnt"}}, 0),
rel__agg_subclause_32d5cc024cc79173(mk<t_btree_iiiiiii__0_6_1_2_3_4_5__1111111__1000001::Type>()),
wrapper_rel__agg_subclause_32d5cc024cc79173(92, *rel__agg_subclause_32d5cc024cc79173, *this, "__agg_subclause", std::array<const char *,7>{{"r:Context","r:Context","s:Invocation","s:Method","s:Var","s:Var","s:Var"}}, std::array<const char *,7>{{"ctx1","ctx20","invo20","meth20","test0","testModel0","trainModel"}}, 0),
rel_Telemetry_OverlapLeak_d0dea07db73811e8(mk<t_btree_iiiiiiiiii__0_4_5_6_7_8_9_1_2_3__1111111111__1000111111::Type>()),
wrapper_rel_Telemetry_OverlapLeak_d0dea07db73811e8(93, *rel_Telemetry_OverlapLeak_d0dea07db73811e8, *this, "Telemetry_OverlapLeak", std::array<const char *,10>{{"s:Var","s:Var","s:Invocation","s:Method","r:Context","s:Var","s:Var","s:Invocation","s:Method","r:Context"}}, std::array<const char *,10>{{"trainModel","train","trainInvo","trainMeth","ctx1","testModel","test","testInvo","testMeth","ctx2"}}, 0),
rel__agg_subclause0_1a0a441f9870a373(mk<t_btree_iiiiiiiiii__0_2_4_8_9_1_3_5_6_7__1010100011__1111111111::Type>()),
wrapper_rel__agg_subclause0_1a0a441f9870a373(94, *rel__agg_subclause0_1a0a441f9870a373, *this, "__agg_subclause0", std::array<const char *,10>{{"r:Context","r:Context","s:Invocation","s:Invocation","s:Method","s:Method","s:Var","s:Var","s:Var","s:Var"}}, std::array<const char *,10>{{"ctx1","ctx2","invo","invo2","meth","meth2","test","testModel","train","trainModel"}}, 0),
rel_FinalOverlapLeak_78ab00e4c1b08b0b(mk<t_btree_iiiiii__0_1_2_3_4_5__111111::Type>()),
wrapper_rel_FinalOverlapLeak_78ab00e4c1b08b0b(95, *rel_FinalOverlapLeak_78ab00e4c1b08b0b, *this, "FinalOverlapLeak", std::array<const char *,6>{{"s:Var","s:Var","s:Invocation","s:Method","r:Context","i:number"}}, std::array<const char *,6>{{"trainModel","train","invo","meth","ctx","c"}}, 0),
rel__agg_subclause2_47fa128cc9c98832(mk<t_btree_iiiiii__1_4_5_0_2_3__111111__010011::Type>()),
wrapper_rel__agg_subclause2_47fa128cc9c98832(96, *rel__agg_subclause2_47fa128cc9c98832, *this, "__agg_subclause2", std::array<const char *,6>{{"r:Context","r:Context","s:Var","s:Var","s:Var","s:Var"}}, std::array<const char *,6>{{"ctx1","ctx2","test","testModel","train","trainModel"}}, 0),
rel_NoTestData_38fc47759ae30ee9(mk<t_btree_iiiii__0_1_2_3_4__11111::Type>()),
wrapper_rel_NoTestData_38fc47759ae30ee9(97, *rel_NoTestData_38fc47759ae30ee9, *this, "NoTestData", std::array<const char *,5>{{"s:Var","s:Var","s:Invocation","s:Method","r:Context"}}, std::array<const char *,5>{{"trainModel","train","invo","meth","ctx"}}, 0),
rel__agg_subclause3_6933ce586d204815(mk<t_btree_iiiiii__1_4_5_0_2_3__111111__010011::Type>()),
wrapper_rel__agg_subclause3_6933ce586d204815(98, *rel__agg_subclause3_6933ce586d204815, *this, "__agg_subclause3", std::array<const char *,6>{{"r:Context","r:Context","s:Var","s:Var","s:Var","s:Var"}}, std::array<const char *,6>{{"ctx1","ctx2","test","testModel","train","trainModel"}}, 0),
rel_NoValAndTestData_4e404a42ce2c80b7(mk<t_btree_iiiii__0_1_2_3_4__11111::Type>()),
wrapper_rel_NoValAndTestData_4e404a42ce2c80b7(99, *rel_NoValAndTestData_4e404a42ce2c80b7, *this, "NoValAndTestData", std::array<const char *,5>{{"s:Var","s:Var","s:Invocation","s:Method","r:Context"}}, std::array<const char *,5>{{"trainModel","train","invo","meth","ctx"}}, 0),
rel_OverlapLeak_703978dd669490f5(mk<t_btree_iiiiii__0_1_2_3_4_5__111111::Type>()),
wrapper_rel_OverlapLeak_703978dd669490f5(100, *rel_OverlapLeak_703978dd669490f5, *this, "OverlapLeak", std::array<const char *,6>{{"s:Var","r:Context","s:Var","r:Context","s:Invocation","s:Method"}}, std::array<const char *,6>{{"testModel","ctx1","trainModel","ctx2","invo","meth"}}, 0),
rel_PreProcessingLeak_3d7ccc563a957981(mk<t_btree_iiii__0_1_2_3__1111::Type>()),
wrapper_rel_PreProcessingLeak_3d7ccc563a957981(101, *rel_PreProcessingLeak_3d7ccc563a957981, *this, "PreProcessingLeak", std::array<const char *,4>{{"s:Var","s:Invocation","s:Method","r:Context"}}, std::array<const char *,4>{{"var","invo","meth","ctx"}}, 0),
rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185(mk<t_btree_iiiiiiiiiiii__0_1_2_3_4_5_6_7_8_9_10_11__111111111111::Type>()),
wrapper_rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185(102, *rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185, *this, "Telemetry_PreProcessingLeak", std::array<const char *,12>{{"s:Var","s:Var","s:Invocation","s:Method","r:Context","s:Var","s:Var","s:Invocation","s:Method","r:Context","s:Var","s:Var"}}, std::array<const char *,12>{{"trainModel","train","trainInvo","trainMeth","ctx1","testModel","test","testInvo","testMeth","ctx2","des","src"}}, 0),
rel_Telemetry_FinalPreProcessingLeak_3e7f0db68d270037(mk<t_btree_iiiiiiiiiiii__0_1_2_3_4_5_6_7_8_9_10_11__111111111111::Type>()),
wrapper_rel_Telemetry_FinalPreProcessingLeak_3e7f0db68d270037(103, *rel_Telemetry_FinalPreProcessingLeak_3e7f0db68d270037, *this, "Telemetry_FinalPreProcessingLeak", std::array<const char *,12>{{"s:Var","s:Var","s:Invocation","s:Method","r:Context","s:Var","s:Var","s:Invocation","s:Method","r:Context","s:Var","s:Var"}}, std::array<const char *,12>{{"trainModel","train","trainInvo","trainMeth","ctx1","testModel","test","testInvo","testMeth","ctx2","des","src"}}, 0),
rel_Telemetry_ModelPair_f363adad3d285f6e(mk<t_btree_iiiiiiiiii__0_1_2_3_4_5_6_7_8_9__1111111111::Type>()),
wrapper_rel_Telemetry_ModelPair_f363adad3d285f6e(104, *rel_Telemetry_ModelPair_f363adad3d285f6e, *this, "Telemetry_ModelPair", std::array<const char *,10>{{"s:Var","s:Var","s:Invocation","s:Method","r:Context","s:Var","s:Var","s:Invocation","s:Method","r:Context"}}, std::array<const char *,10>{{"testModel","test","invo","meth","ctx1","trainModel","train","invo2","meth2","ctx2"}}, 0),
rel_PureMethod_ac3eca18d3064a10(mk<t_btree_i__0__1::Type>()),
wrapper_rel_PureMethod_ac3eca18d3064a10(105, *rel_PureMethod_ac3eca18d3064a10, *this, "PureMethod", std::array<const char *,1>{{"s:Method"}}, std::array<const char *,1>{{"meth"}}, 0),
rel_VarEquals_a4540819e065ea89(mk<t_btree_ii__0_1__11__10::Type>()),
wrapper_rel_VarEquals_a4540819e065ea89(106, *rel_VarEquals_a4540819e065ea89, *this, "VarEquals", std::array<const char *,2>{{"s:Var","s:Var"}}, std::array<const char *,2>{{"var1","var2"}}, 0),
rel_delta_VarEquals_9c226744c7f75a0b(mk<t_btree_ii__0_1__11__10::Type>()),
rel_new_VarEquals_a3a3c796750fc858(mk<t_btree_ii__0_1__11__10::Type>()),
stratum_disconnected0_f9c4672e8cd1a89c(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_disconnected0_b2add3842fe11dfe,*rel_TrainingDataWithModel_bf0078ce702b39b8),
stratum_disconnected1_c26d0381dceb6887(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_disconnected1_a1b44fde1b4da294,*rel_ValDataWithModel_ef5cc7d0fb594fa5,*rel_ValOrTestDataWithModel_2810ba231c0c185a),
stratum_ActualKeyParam_12a6a43c75fda34b(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_ActualKeyParam_c37ca7251a780d4f),
stratum_ActualParam_0254ef2a539f6763(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_ActualKeyParam_c37ca7251a780d4f,*rel_ActualParam_b7a735170493e717,*rel_Invoke_d61c77705bff35b0,*rel_MethodIndexToKey_1e172395196e36b8),
stratum_ActualReturn_339859d89a01e808(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_ActualReturn_8bc9db09e057aa22),
stratum_Alias_f3647b52a0dd5327(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_Alias_22e56a91218d2f0d,*rel_VarPointsTo_c1a9f897b9f324f0),
stratum_Alloc_49c7a43733f3d7b7(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_Alloc_31bbfa07060a4241),
stratum_ArityMatch_010c8824ed4a833c(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_ActualReturn_8bc9db09e057aa22,*rel_ArityMatch_1f1fc51deec0d387,*rel_CallGraphEdge_333c9d69fed5eee7,*rel_FilteredMethod_3007b0a4b117f645,*rel_FormalReturn_62e4844334f73406),
stratum_AssignBinOp_92254d469ef1b822(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_AssignBinOp_ac278042ec33e40a),
stratum_AssignBoolConstant_433e069d31d94440(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_AssignBoolConstant_153553f1352c29c5),
stratum_AssignFloatConstant_e4a7f759412fc710(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_AssignFloatConstant_2958d76b03506f1d),
stratum_AssignGlobal_3bcffbb0794f2821(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_AssignGlobal_f60b14713e1f1ab7),
stratum_AssignIntConstant_0255ebd32aa44813(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_AssignIntConstant_91e14648ac326411),
stratum_AssignStrConstant_6e56f1d6ad531ff5(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_AssignStrConstant_2b622c7da0720ea5),
stratum_AssignVar_47ce3275170456ae(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_AssignVar_b173aa4bb6352b3a),
stratum_CallGraphEdge_ba9ff3425740b561(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_CallGraphEdge_333c9d69fed5eee7,*rel_Invoke_d61c77705bff35b0,*rel_Reachable_60cce6ab70e369f7),
stratum_ConstantValue_2aaebc1b0ca71039(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_AssignBoolConstant_153553f1352c29c5,*rel_AssignFloatConstant_2958d76b03506f1d,*rel_AssignIntConstant_91e14648ac326411,*rel_AssignStrConstant_2b622c7da0720ea5,*rel_ConstantValue_bf370ded014c6df6),
stratum_DataOverlap_989fa0addfb2c9db(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_delta_DataOverlap_83ad9cceb2f93136,*rel_new_DataOverlap_92d522de74fa8c9c,*rel_DataOverlap_5a4300eece6cb523,*rel_DuplicateEdge_0f0315b18851fb20,*rel_FlowFromExtended_7fd58681b534e204),
stratum_DuplicateEdge_1bf07be33b6f763a(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_DuplicateEdge_0f0315b18851fb20,*rel_TaintStartsTarget_b45151d0d1a25a24),
stratum_FieldPointsTo_64e220f021bc71ba(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_delta_FieldPointsTo_6e98ef2bb9d48d3a,*rel_delta_IndexContentPointsTo_0515756a33abb518,*rel_delta_VarPointsTo_16577dc30fb04e76,*rel_new_FieldPointsTo_b27ef2e9e0cb7cd8,*rel_new_IndexContentPointsTo_b75799237eab2896,*rel_new_VarPointsTo_5ea2db765d05791c,*rel_ActualParam_b7a735170493e717,*rel_ActualReturn_8bc9db09e057aa22,*rel_Alloc_31bbfa07060a4241,*rel_AssignGlobal_f60b14713e1f1ab7,*rel_AssignVar_b173aa4bb6352b3a,*rel_CallGraphEdge_333c9d69fed5eee7,*rel_FieldPointsTo_79eb0e1cfe8639b3,*rel_IndexContentPointsTo_db1dfbfa873aff0a,*rel_InterProcAssign_bed60ee93a02e127,*rel_LoadField_6018b2c33f454495,*rel_LoadIndex_3a07e512c7efb9bd,*rel_LoadSlice_e590a0ee3f45cac8,*rel_MethodSSA_a9f7ed6321abcd80,*rel_Reachable_60cce6ab70e369f7,*rel_SliceIndex_7426c9b7afc02920,*rel_StoreField_7d8d16151c0ea49b,*rel_StoreFieldSSA_051b143b9d011002,*rel_StoreIndex_bab2c0876dfa7ece,*rel_StoreIndexSSA_431249b1dfe65e85,*rel_StoreSlice_2d8a31bc728a3bbd,*rel_StoreSliceSSA_f26b3c4e2aecada2,*rel_VarInMethod_a7f53498a99fbbab,*rel_VarPointsTo_c1a9f897b9f324f0),
stratum_FilteredMethod_bbfe11620421651e(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_FilteredMethod_3007b0a4b117f645),
stratum_FilteredTests_461fa6cfdecd9b07(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_DataOverlap_5a4300eece6cb523,*rel_FilteredTests_bd4cd275bd1cb347,*rel_FlowFromExtended_7fd58681b534e204,*rel_ModelPair_a5a4124c4969f589,*rel_ScoredDataWithModel_55bb6aafc5a52e34,*rel_TestDataWithModel_2269d730f5799893,*rel_TrainingDataWithModel_bf0078ce702b39b8),
stratum_FilteredTrainingMethod_76dbc635e0be94f1(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_FilteredTrainingMethod_abcda1d07db43c94,*rel_Invoke_d61c77705bff35b0),
stratum_FinalNoTestData_88637b76361e3e80(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_disconnected0_b2add3842fe11dfe,*rel_FinalNoTestData_1dcf6aa80b893c15,*rel__agg_single_bd0385c34ef6548a,*rel__agg_single0_ae1fba617ee8151c),
stratum_FinalNoTestDataWithMultiUse_af20826df0e8421f(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_disconnected1_a1b44fde1b4da294,*rel_FinalNoTestData_1dcf6aa80b893c15,*rel_FinalNoTestDataWithMultiUse_99aec0c4382a0994),
stratum_FinalOverlapLeak_2872601ec653ee81(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_FinalOverlapLeak_78ab00e4c1b08b0b,*rel_TrainingDataWithModel_bf0078ce702b39b8,*rel__agg_subclause_32d5cc024cc79173,*rel__agg_subclause0_1a0a441f9870a373),
stratum_FlowCondition_dc0e9ac85375b076(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_FlowCondition_f30c150f9e6134d8),
stratum_FlowFrom_d1e3516602a0c8a2(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_delta_FlowFrom_9453696b0b7d82d1,*rel_new_FlowFrom_581490064b4976c4,*rel_FlowFrom_0c9cf4995aeb9ef7,*rel_FlowFromEdge_6f9cb97dfaad1a54),
stratum_FlowFromEdge_dc7331509fe42d03(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_delta_FlowFromEdge_06b5167ac5e9217c,*rel_new_FlowFromEdge_4b44b140131ea495,*rel_ActualKeyParam_c37ca7251a780d4f,*rel_ActualParam_b7a735170493e717,*rel_ActualReturn_8bc9db09e057aa22,*rel_Alias_22e56a91218d2f0d,*rel_AssignBinOp_ac278042ec33e40a,*rel_AssignGlobal_f60b14713e1f1ab7,*rel_AssignVar_b173aa4bb6352b3a,*rel_CallGraphEdge_333c9d69fed5eee7,*rel_ConstantValue_bf370ded014c6df6,*rel_FlowCondition_f30c150f9e6134d8,*rel_FlowFromEdge_6f9cb97dfaad1a54,*rel_IndexContentPointsTo_db1dfbfa873aff0a,*rel_InterProcAssign_bed60ee93a02e127,*rel_IsDataFrameEquivIndexing_5de5b08291e74631,*rel_LoadField_6018b2c33f454495,*rel_LoadIndex_3a07e512c7efb9bd,*rel_LoadSlice_e590a0ee3f45cac8,*rel_LocalMethod_5b358702fac6f178,*rel_MethodSSA_a9f7ed6321abcd80,*rel_MethodUpdate_b9129e3e14098516,*rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d,*rel_ParamToParamDataFlow_0bd19d43cb842556,*rel_ParamToParamFlow_62719282a92885f3,*rel_ParamToRetCondEquivFlow_219c5a0dd6644473,*rel_ParamToRetDataFlow_4802f16da470059f,*rel_ParamToRetEquivFlow_cf4bedb68bbe1170,*rel_StoreField_7d8d16151c0ea49b,*rel_StoreFieldSSA_051b143b9d011002,*rel_StoreIndex_bab2c0876dfa7ece,*rel_StoreIndexSSA_431249b1dfe65e85,*rel_StoreSlice_2d8a31bc728a3bbd,*rel_StoreSliceSSA_f26b3c4e2aecada2,*rel_VarPointsTo_c1a9f897b9f324f0),
stratum_FlowFromExtended_1a66e3f0059098b0(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_FlowFrom_0c9cf4995aeb9ef7,*rel_FlowFromExtended_7fd58681b534e204),
stratum_FormalParam_1bc5e7a7041c708a(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_FormalParam_f381be5dce5c9780),
stratum_FormalReturn_2d2d898c7d038d3b(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_FormalReturn_62e4844334f73406),
stratum_InterProcAssign_ffe550986b3c2f8d(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_ActualKeyParam_c37ca7251a780d4f,*rel_ActualParam_b7a735170493e717,*rel_ActualReturn_8bc9db09e057aa22,*rel_ArityMatch_1f1fc51deec0d387,*rel_CallGraphEdge_333c9d69fed5eee7,*rel_FilteredMethod_3007b0a4b117f645,*rel_FormalParam_f381be5dce5c9780,*rel_FormalReturn_62e4844334f73406,*rel_InterProcAssign_bed60ee93a02e127),
stratum_Invoke_6b18f063cb12c287(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_Invoke_d61c77705bff35b0),
stratum_InvokeEdge_561a26cc8f11b31d(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_delta_InvokeEdge_a34c04d9e3048d06,*rel_new_InvokeEdge_1250f9237f36bc79,*rel_CallGraphEdge_333c9d69fed5eee7,*rel_Invoke_d61c77705bff35b0,*rel_InvokeEdge_101b6dc2a844897b,*rel_NextInvoke_f6aefda469e3b88c),
stratum_InvokeInLoop_b84d1c07a14b9d1e(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_InvokeInLoop_c641dec75a6890e7),
stratum_InvokePath_46465e6a87eeb192(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_delta_InvokePath_269e2f7ec8f9b43d,*rel_new_InvokePath_3ae2baced09cf095,*rel_InvokeEdge_101b6dc2a844897b,*rel_InvokePath_12c42b7c9b655a96),
stratum_IsDataFrameEquivIndexing_8535167db21969f0(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_IsDataFrameEquivIndexing_5de5b08291e74631,*rel_VarType_28c8217e193eb319),
stratum_LoadField_1959d147bc3bf36d(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_LoadField_6018b2c33f454495),
stratum_LoadIndex_5f2b437de44efaae(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_LoadIndex_3a07e512c7efb9bd),
stratum_LoadSlice_d064a977133f8b38(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_LoadSlice_e590a0ee3f45cac8),
stratum_LocalMethod_49c0d263261e8d97(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_LocalMethod_5b358702fac6f178),
stratum_MethodIndexToKey_38eeac50fa87c6ee(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_Invoke_d61c77705bff35b0,*rel_MethodIndexToKey_1e172395196e36b8),
stratum_MethodSSA_aa09a85875e68cdd(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_Invoke_d61c77705bff35b0,*rel_MethodSSA_a9f7ed6321abcd80),
stratum_MethodUpdate_d1ca17b13e092ba8(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_Invoke_d61c77705bff35b0,*rel_MethodUpdate_b9129e3e14098516,*rel_ParamToParamFlow_62719282a92885f3),
stratum_ModelPair_1383b78f536ccc12(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_ModelPair_a5a4124c4969f589,*rel_ModelPairCandidate_9322881dca01d8da,*rel_TrainingDataWithModel_bf0078ce702b39b8,*rel_ValOrTestDataWithModel_2810ba231c0c185a,*rel__agg_subclause1_6b72bc2ad4593b7d),
stratum_ModelPairCandidate_e0ec35f57565671c(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_FlowFromExtended_7fd58681b534e204,*rel_InvokePath_12c42b7c9b655a96,*rel_ModelPairCandidate_9322881dca01d8da,*rel_TrainingDataWithModel_bf0078ce702b39b8,*rel_ValOrTestDataWithModel_2810ba231c0c185a),
stratum_MultiUseTestLeak_3188e75ada8f9655(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_DataOverlap_5a4300eece6cb523,*rel_FlowFromExtended_7fd58681b534e204,*rel_MultiUseTestLeak_0ea2b38088c6193a,*rel_ScoredDataWithModel_55bb6aafc5a52e34),
stratum_NextInvoke_167dc995a535ae93(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_NextInvoke_f6aefda469e3b88c),
stratum_NoTestData_55494f244720b649(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_NoTestData_38fc47759ae30ee9,*rel_TrainingDataWithModel_bf0078ce702b39b8,*rel__agg_subclause2_47fa128cc9c98832),
stratum_NoValAndTestData_d3cbe3b109984f39(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_NoValAndTestData_4e404a42ce2c80b7,*rel_TrainingDataWithModel_bf0078ce702b39b8,*rel__agg_subclause3_6933ce586d204815),
stratum_OverlapLeak_f6e6ef75f6375c76(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_DataOverlap_5a4300eece6cb523,*rel_ModelPair_a5a4124c4969f589,*rel_OverlapLeak_703978dd669490f5,*rel_TrainingDataWithModel_bf0078ce702b39b8,*rel_ValOrTestDataWithModel_2810ba231c0c185a),
stratum_ParamContentToRetCondEquivFlow_9994fea784d6b73d(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_Invoke_d61c77705bff35b0,*rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d),
stratum_ParamToParamDataFlow_446aa191f53628ae(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_Invoke_d61c77705bff35b0,*rel_ParamToParamDataFlow_0bd19d43cb842556),
stratum_ParamToParamFlow_4280e65256ca7e4d(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_Invoke_d61c77705bff35b0,*rel_ParamToParamFlow_62719282a92885f3),
stratum_ParamToParamTaintSourceMethod_98e55c9c77865b73(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_Invoke_d61c77705bff35b0,*rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed),
stratum_ParamToRetCondEquivFlow_289daa0f2308054b(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_Invoke_d61c77705bff35b0,*rel_ParamToRetCondEquivFlow_219c5a0dd6644473),
stratum_ParamToRetCondTaintSourceMethod_c32a3a2a879e1b22(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843),
stratum_ParamToRetDataFlow_740720c7dcae95b0(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_Invoke_d61c77705bff35b0,*rel_ParamToRetDataFlow_4802f16da470059f),
stratum_ParamToRetEquivFlow_ce6a445b7c8e7e6a(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_Invoke_d61c77705bff35b0,*rel_ParamToRetEquivFlow_cf4bedb68bbe1170),
stratum_ParamToRetTaintSourceMethod_33f90b6a1d8be9d0(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_Invoke_d61c77705bff35b0,*rel_ParamToRetTaintSourceMethod_54896442c7cf3fde),
stratum_PreProcessingLeak_aea74049e16ab76c(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_DataOverlap_5a4300eece6cb523,*rel_FlowFromExtended_7fd58681b534e204,*rel_ModelPair_a5a4124c4969f589,*rel_PreProcessingLeak_3d7ccc563a957981,*rel_ReduceEdge_70a6ab3f2a478ff1,*rel_TrainingDataWithModel_bf0078ce702b39b8,*rel_ValOrTestDataWithModel_2810ba231c0c185a),
stratum_PureMethod_9625f9d3538f170a(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_PureMethod_ac3eca18d3064a10),
stratum_Reachable_3609bcb81aba1219(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_delta_Reachable_f8722fb0e233b409,*rel_new_Reachable_0bd56444429534ad,*rel_Invoke_d61c77705bff35b0,*rel_Reachable_60cce6ab70e369f7),
stratum_ReduceEdge_f23db963fdbb6a7d(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_ReduceEdge_70a6ab3f2a478ff1,*rel_TaintStartsTarget_b45151d0d1a25a24),
stratum_RetTaintSourceMethod_46d3cbd918420f3b(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_RetTaintSourceMethod_b3e3f5b46f4b2c24),
stratum_ScoredData_b7d1ba106c7cdd30(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_Invoke_d61c77705bff35b0,*rel_ScoredData_e3b4e0bebca3bce4),
stratum_ScoredDataWithModel_699c9bae39cecfe6(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_ActualParam_b7a735170493e717,*rel_ActualReturn_8bc9db09e057aa22,*rel_CallGraphEdge_333c9d69fed5eee7,*rel_FlowFromExtended_7fd58681b534e204,*rel_ScoredData_e3b4e0bebca3bce4,*rel_ScoredDataWithModel_55bb6aafc5a52e34,*rel_ScoredResult_cd9b66baec883a81,*rel_ValOrTestDataWithModel_2810ba231c0c185a),
stratum_ScoredResult_132799981e44fb82(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_Invoke_d61c77705bff35b0,*rel_ScoredResult_cd9b66baec883a81),
stratum_SliceIndex_0898fd080c8755ea(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_LoadSlice_e590a0ee3f45cac8,*rel_SliceIndex_7426c9b7afc02920,*rel_StoreSlice_2d8a31bc728a3bbd,*rel_StoreSliceSSA_f26b3c4e2aecada2),
stratum_StoreField_081769e2d0503294(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_StoreField_7d8d16151c0ea49b),
stratum_StoreFieldSSA_20c74fd0fd3a43b6(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_StoreFieldSSA_051b143b9d011002),
stratum_StoreIndex_4047534a727c5ea9(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_StoreIndex_bab2c0876dfa7ece),
stratum_StoreIndexSSA_d5260c12dceeb54a(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_StoreIndexSSA_431249b1dfe65e85),
stratum_StoreSlice_4bebfea803e57871(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_StoreSlice_2d8a31bc728a3bbd),
stratum_StoreSliceSSA_5db6bfe77d4c2b53(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_StoreSliceSSA_f26b3c4e2aecada2),
stratum_SubType_014b00fd31af85f0(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_SubType_1b987a9db6ba7d57),
stratum_TaintCondition_16931132151a48cd(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_TaintCondition_7b1ddf0c7226422d),
stratum_TaintStarts_f68137b8aa877618(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_delta_TaintStarts_cc75a7e7e9407e43,*rel_new_TaintStarts_39ba418fa1a55080,*rel_ActualParam_b7a735170493e717,*rel_ActualReturn_8bc9db09e057aa22,*rel_CallGraphEdge_333c9d69fed5eee7,*rel_FlowFrom_0c9cf4995aeb9ef7,*rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed,*rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843,*rel_ParamToRetTaintSourceMethod_54896442c7cf3fde,*rel_RetTaintSourceMethod_b3e3f5b46f4b2c24,*rel_TaintCondition_7b1ddf0c7226422d,*rel_TaintStarts_1fb2f244128dc60e),
stratum_TaintStartsTarget_fbaa024b117819b9(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_ActualParam_b7a735170493e717,*rel_ActualReturn_8bc9db09e057aa22,*rel_CallGraphEdge_333c9d69fed5eee7,*rel_FlowFrom_0c9cf4995aeb9ef7,*rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed,*rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843,*rel_ParamToRetTaintSourceMethod_54896442c7cf3fde,*rel_TaintCondition_7b1ddf0c7226422d,*rel_TaintStarts_1fb2f244128dc60e,*rel_TaintStartsTarget_b45151d0d1a25a24),
stratum_Telemetry_FinalPreProcessingLeak_55372d1daee4f94b(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_NoTestData_38fc47759ae30ee9,*rel_Telemetry_FinalPreProcessingLeak_3e7f0db68d270037,*rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185,*rel_TestDataWithModel_2269d730f5799893,*rel_ValOrTestDataWithModel_2810ba231c0c185a),
stratum_Telemetry_ModelPair_240dd7003845be94(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_ModelPairCandidate_9322881dca01d8da,*rel_Telemetry_ModelPair_f363adad3d285f6e,*rel_TrainingDataWithModel_bf0078ce702b39b8,*rel_ValOrTestDataWithModel_2810ba231c0c185a,*rel__agg_subclause1_6b72bc2ad4593b7d),
stratum_Telemetry_MultiUseTestLeak_8a4534192b2810ba(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_DataOverlap_5a4300eece6cb523,*rel_FlowFromExtended_7fd58681b534e204,*rel_ScoredDataWithModel_55bb6aafc5a52e34,*rel_Telemetry_MultiUseTestLeak_f37504d03b612c98),
stratum_Telemetry_OverlapLeak_c3acba6310b72397(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_DataOverlap_5a4300eece6cb523,*rel_ModelPair_a5a4124c4969f589,*rel_Telemetry_OverlapLeak_d0dea07db73811e8,*rel_TrainingDataWithModel_bf0078ce702b39b8,*rel_ValOrTestDataWithModel_2810ba231c0c185a),
stratum_Telemetry_PreProcessingLeak_250ec078ec730e80(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_DataOverlap_5a4300eece6cb523,*rel_FlowFromExtended_7fd58681b534e204,*rel_ModelPair_a5a4124c4969f589,*rel_ReduceEdge_70a6ab3f2a478ff1,*rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185,*rel_TrainingDataWithModel_bf0078ce702b39b8,*rel_ValOrTestDataWithModel_2810ba231c0c185a),
stratum_TestData_b867b0fac6d0da2a(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_Invoke_d61c77705bff35b0,*rel_TestData_cd6b712f9b1db6bc),
stratum_TestDataWithModel_f27573b86a50c3ca(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_TestDataWithModel_2269d730f5799893,*rel_ValDataWithModel_ef5cc7d0fb594fa5,*rel_ValOrTestDataWithModel_2810ba231c0c185a),
stratum_TorchModelWithData_397ff8db1c01d2da(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_ActualParam_b7a735170493e717,*rel_Invoke_d61c77705bff35b0,*rel_SubType_1b987a9db6ba7d57,*rel_TorchModelWithData_3bc4694c9032b02a,*rel_VarType_28c8217e193eb319),
stratum_TrainingData_0c12b3e5997d2e70(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_Invoke_d61c77705bff35b0,*rel_TrainingData_276ec139200837ac),
stratum_TrainingDataWithModel_391fd5f898f6ccf8(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_ActualParam_b7a735170493e717,*rel_ActualReturn_8bc9db09e057aa22,*rel_CallGraphEdge_333c9d69fed5eee7,*rel_FilteredTrainingMethod_abcda1d07db43c94,*rel_FlowFromExtended_7fd58681b534e204,*rel_TorchModelWithData_3bc4694c9032b02a,*rel_TrainingData_276ec139200837ac,*rel_TrainingDataWithModel_bf0078ce702b39b8),
stratum_ValData_e7530baa3ed8df4b(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_Invoke_d61c77705bff35b0,*rel_ValData_515538f102ad549e),
stratum_ValDataWithModel_14d6b9aa9be3460b(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_delta_ValDataWithModel_0840db341aaccef6,*rel_new_ValDataWithModel_9ed2fac795be70a1,*rel_ActualKeyParam_c37ca7251a780d4f,*rel_ActualParam_b7a735170493e717,*rel_CallGraphEdge_333c9d69fed5eee7,*rel_DataOverlap_5a4300eece6cb523,*rel_FlowFromExtended_7fd58681b534e204,*rel_InvokeInLoop_c641dec75a6890e7,*rel_MethodIndexToKey_1e172395196e36b8,*rel_ScoredDataWithModel_55bb6aafc5a52e34,*rel_StoreIndex_bab2c0876dfa7ece,*rel_ValData_515538f102ad549e,*rel_ValDataWithModel_ef5cc7d0fb594fa5,*rel_ValOrTestDataWithModel_2810ba231c0c185a),
stratum_ValOrTestDataWithModel_1ec7730e583f5da2(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_ActualParam_b7a735170493e717,*rel_CallGraphEdge_333c9d69fed5eee7,*rel_TestData_cd6b712f9b1db6bc,*rel_TorchModelWithData_3bc4694c9032b02a,*rel_TrainingDataWithModel_bf0078ce702b39b8,*rel_ValOrTestDataWithModel_2810ba231c0c185a),
stratum_VarEquals_724b807f74d45218(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_delta_VarEquals_9c226744c7f75a0b,*rel_new_VarEquals_a3a3c796750fc858,*rel_ActualParam_b7a735170493e717,*rel_ActualReturn_8bc9db09e057aa22,*rel_AssignGlobal_f60b14713e1f1ab7,*rel_AssignVar_b173aa4bb6352b3a,*rel_CallGraphEdge_333c9d69fed5eee7,*rel_ConstantValue_bf370ded014c6df6,*rel_InterProcAssign_bed60ee93a02e127,*rel_LoadField_6018b2c33f454495,*rel_LoadIndex_3a07e512c7efb9bd,*rel_PureMethod_ac3eca18d3064a10,*rel_VarEquals_a4540819e065ea89,*rel_VarPointsTo_c1a9f897b9f324f0),
stratum_VarInMethod_ed7e3b42e5a6bf0c(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_VarInMethod_a7f53498a99fbbab),
stratum_VarType_6bc0d8b3d6ce42e2(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_VarType_28c8217e193eb319),
stratum_agg_single_39ee9cda178f5d07(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel__agg_single_bd0385c34ef6548a,*rel__agg_subclause5_277251a440f34db7),
stratum_agg_single0_934ad608bfdbcb95(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel__agg_single0_ae1fba617ee8151c,*rel__agg_subclause6_2a58958a8d13999d),
stratum_agg_subclause_f71d8ac7de83919b(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_ModelPair_a5a4124c4969f589,*rel_ValOrTestDataWithModel_2810ba231c0c185a,*rel__agg_subclause_32d5cc024cc79173),
stratum_agg_subclause0_032523e2f63b0d44(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_ModelPair_a5a4124c4969f589,*rel_Telemetry_OverlapLeak_d0dea07db73811e8,*rel_ValOrTestDataWithModel_2810ba231c0c185a,*rel__agg_subclause0_1a0a441f9870a373),
stratum_agg_subclause1_70828864d99d0453(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_InvokePath_12c42b7c9b655a96,*rel_ModelPairCandidate_9322881dca01d8da,*rel_TrainingDataWithModel_bf0078ce702b39b8,*rel__agg_subclause1_6b72bc2ad4593b7d),
stratum_agg_subclause2_c2e2a1c2343f77cf(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_DataOverlap_5a4300eece6cb523,*rel_ModelPair_a5a4124c4969f589,*rel_TestDataWithModel_2269d730f5799893,*rel_TrainingDataWithModel_bf0078ce702b39b8,*rel__agg_subclause2_47fa128cc9c98832),
stratum_agg_subclause3_8ce33083abd27210(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_DataOverlap_5a4300eece6cb523,*rel_ModelPair_a5a4124c4969f589,*rel_TrainingDataWithModel_bf0078ce702b39b8,*rel_ValOrTestDataWithModel_2810ba231c0c185a,*rel__agg_subclause3_6933ce586d204815),
stratum_agg_subclause5_3fc943c051ed830e(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_ModelPair_a5a4124c4969f589,*rel_TestDataWithModel_2269d730f5799893,*rel__agg_subclause5_277251a440f34db7),
stratum_agg_subclause6_45a72b49481e6e73(symTable,recordTable,regexCache,pruneImdtRels,performIO,signalHandler,iter,ctr,inputDirectory,outputDirectory,*rel_FilteredTests_bd4cd275bd1cb347,*rel_ModelPair_a5a4124c4969f589,*rel__agg_subclause6_2a58958a8d13999d){
addRelation("ActualKeyParam", wrapper_rel_ActualKeyParam_c37ca7251a780d4f, true, false);
addRelation("Invoke", wrapper_rel_Invoke_d61c77705bff35b0, true, false);
addRelation("MethodIndexToKey", wrapper_rel_MethodIndexToKey_1e172395196e36b8, false, false);
addRelation("ActualParam", wrapper_rel_ActualParam_b7a735170493e717, true, false);
addRelation("Reachable", wrapper_rel_Reachable_60cce6ab70e369f7, false, false);
addRelation("CallGraphEdge", wrapper_rel_CallGraphEdge_333c9d69fed5eee7, false, true);
addRelation("FilteredTrainingMethod", wrapper_rel_FilteredTrainingMethod_abcda1d07db43c94, false, false);
addRelation("MethodSSA", wrapper_rel_MethodSSA_a9f7ed6321abcd80, false, false);
addRelation("ParamToParamFlow", wrapper_rel_ParamToParamFlow_62719282a92885f3, false, false);
addRelation("MethodUpdate", wrapper_rel_MethodUpdate_b9129e3e14098516, false, false);
addRelation("ParamContentToRetCondEquivFlow", wrapper_rel_ParamContentToRetCondEquivFlow_1ec1d8639418529d, false, false);
addRelation("ParamToParamDataFlow", wrapper_rel_ParamToParamDataFlow_0bd19d43cb842556, false, false);
addRelation("ParamToRetCondEquivFlow", wrapper_rel_ParamToRetCondEquivFlow_219c5a0dd6644473, false, false);
addRelation("ParamToRetDataFlow", wrapper_rel_ParamToRetDataFlow_4802f16da470059f, false, false);
addRelation("ParamToRetEquivFlow", wrapper_rel_ParamToRetEquivFlow_cf4bedb68bbe1170, false, false);
addRelation("TrainingData", wrapper_rel_TrainingData_276ec139200837ac, false, false);
addRelation("ParamToParamTaintSourceMethod", wrapper_rel_ParamToParamTaintSourceMethod_4ecc35811a8626ed, false, false);
addRelation("ParamToRetTaintSourceMethod", wrapper_rel_ParamToRetTaintSourceMethod_54896442c7cf3fde, false, false);
addRelation("ScoredData", wrapper_rel_ScoredData_e3b4e0bebca3bce4, false, false);
addRelation("ScoredResult", wrapper_rel_ScoredResult_cd9b66baec883a81, false, false);
addRelation("TestData", wrapper_rel_TestData_cd6b712f9b1db6bc, false, false);
addRelation("ValData", wrapper_rel_ValData_515538f102ad549e, false, false);
addRelation("ActualReturn", wrapper_rel_ActualReturn_8bc9db09e057aa22, true, false);
addRelation("Alloc", wrapper_rel_Alloc_31bbfa07060a4241, true, false);
addRelation("AssignGlobal", wrapper_rel_AssignGlobal_f60b14713e1f1ab7, true, false);
addRelation("AssignVar", wrapper_rel_AssignVar_b173aa4bb6352b3a, true, false);
addRelation("StoreField", wrapper_rel_StoreField_7d8d16151c0ea49b, true, false);
addRelation("StoreFieldSSA", wrapper_rel_StoreFieldSSA_051b143b9d011002, true, false);
addRelation("LoadSlice", wrapper_rel_LoadSlice_e590a0ee3f45cac8, true, false);
addRelation("StoreSlice", wrapper_rel_StoreSlice_2d8a31bc728a3bbd, true, false);
addRelation("StoreSliceSSA", wrapper_rel_StoreSliceSSA_f26b3c4e2aecada2, true, false);
addRelation("SliceIndex", wrapper_rel_SliceIndex_7426c9b7afc02920, false, false);
addRelation("StoreIndex", wrapper_rel_StoreIndex_bab2c0876dfa7ece, true, false);
addRelation("StoreIndexSSA", wrapper_rel_StoreIndexSSA_431249b1dfe65e85, true, false);
addRelation("FilteredMethod", wrapper_rel_FilteredMethod_3007b0a4b117f645, false, false);
addRelation("FormalReturn", wrapper_rel_FormalReturn_62e4844334f73406, true, false);
addRelation("ArityMatch", wrapper_rel_ArityMatch_1f1fc51deec0d387, false, false);
addRelation("FormalParam", wrapper_rel_FormalParam_f381be5dce5c9780, true, false);
addRelation("InterProcAssign", wrapper_rel_InterProcAssign_bed60ee93a02e127, false, false);
addRelation("LoadField", wrapper_rel_LoadField_6018b2c33f454495, true, false);
addRelation("LoadIndex", wrapper_rel_LoadIndex_3a07e512c7efb9bd, true, false);
addRelation("VarInMethod", wrapper_rel_VarInMethod_a7f53498a99fbbab, true, false);
addRelation("FieldPointsTo", wrapper_rel_FieldPointsTo_79eb0e1cfe8639b3, false, true);
addRelation("IndexContentPointsTo", wrapper_rel_IndexContentPointsTo_db1dfbfa873aff0a, false, true);
addRelation("VarPointsTo", wrapper_rel_VarPointsTo_c1a9f897b9f324f0, false, true);
addRelation("Alias", wrapper_rel_Alias_22e56a91218d2f0d, false, true);
addRelation("AssignBinOp", wrapper_rel_AssignBinOp_ac278042ec33e40a, true, false);
addRelation("AssignBoolConstant", wrapper_rel_AssignBoolConstant_153553f1352c29c5, true, false);
addRelation("AssignFloatConstant", wrapper_rel_AssignFloatConstant_2958d76b03506f1d, true, false);
addRelation("AssignIntConstant", wrapper_rel_AssignIntConstant_91e14648ac326411, true, false);
addRelation("AssignStrConstant", wrapper_rel_AssignStrConstant_2b622c7da0720ea5, true, false);
addRelation("ConstantValue", wrapper_rel_ConstantValue_bf370ded014c6df6, false, false);
addRelation("FlowCondition", wrapper_rel_FlowCondition_f30c150f9e6134d8, false, false);
addRelation("VarType", wrapper_rel_VarType_28c8217e193eb319, true, false);
addRelation("IsDataFrameEquivIndexing", wrapper_rel_IsDataFrameEquivIndexing_5de5b08291e74631, false, false);
addRelation("LocalMethod", wrapper_rel_LocalMethod_5b358702fac6f178, true, false);
addRelation("FlowFromEdge", wrapper_rel_FlowFromEdge_6f9cb97dfaad1a54, false, true);
addRelation("FlowFrom", wrapper_rel_FlowFrom_0c9cf4995aeb9ef7, false, true);
addRelation("FlowFromExtended", wrapper_rel_FlowFromExtended_7fd58681b534e204, false, true);
addRelation("SubType", wrapper_rel_SubType_1b987a9db6ba7d57, true, false);
addRelation("TorchModelWithData", wrapper_rel_TorchModelWithData_3bc4694c9032b02a, false, true);
addRelation("TrainingDataWithModel", wrapper_rel_TrainingDataWithModel_bf0078ce702b39b8, false, true);
addRelation("+disconnected0", wrapper_rel_disconnected0_b2add3842fe11dfe, false, false);
addRelation("ValOrTestDataWithModel", wrapper_rel_ValOrTestDataWithModel_2810ba231c0c185a, false, true);
addRelation("ScoredDataWithModel", wrapper_rel_ScoredDataWithModel_55bb6aafc5a52e34, false, true);
addRelation("ParamToRetCondTaintSourceMethod", wrapper_rel_ParamToRetCondTaintSourceMethod_c50db1e202dee843, false, false);
addRelation("TaintCondition", wrapper_rel_TaintCondition_7b1ddf0c7226422d, false, false);
addRelation("RetTaintSourceMethod", wrapper_rel_RetTaintSourceMethod_b3e3f5b46f4b2c24, false, false);
addRelation("TaintStarts", wrapper_rel_TaintStarts_1fb2f244128dc60e, false, false);
addRelation("TaintStartsTarget", wrapper_rel_TaintStartsTarget_b45151d0d1a25a24, false, true);
addRelation("DuplicateEdge", wrapper_rel_DuplicateEdge_0f0315b18851fb20, false, false);
addRelation("DataOverlap", wrapper_rel_DataOverlap_5a4300eece6cb523, false, true);
addRelation("MultiUseTestLeak", wrapper_rel_MultiUseTestLeak_0ea2b38088c6193a, false, true);
addRelation("Telemetry_MultiUseTestLeak", wrapper_rel_Telemetry_MultiUseTestLeak_f37504d03b612c98, false, true);
addRelation("ReduceEdge", wrapper_rel_ReduceEdge_70a6ab3f2a478ff1, false, false);
addRelation("InvokeInLoop", wrapper_rel_InvokeInLoop_c641dec75a6890e7, true, false);
addRelation("ValDataWithModel", wrapper_rel_ValDataWithModel_ef5cc7d0fb594fa5, false, true);
addRelation("+disconnected1", wrapper_rel_disconnected1_a1b44fde1b4da294, false, false);
addRelation("TestDataWithModel", wrapper_rel_TestDataWithModel_2269d730f5799893, false, true);
addRelation("NextInvoke", wrapper_rel_NextInvoke_f6aefda469e3b88c, true, false);
addRelation("InvokeEdge", wrapper_rel_InvokeEdge_101b6dc2a844897b, false, true);
addRelation("InvokePath", wrapper_rel_InvokePath_12c42b7c9b655a96, false, true);
addRelation("ModelPairCandidate", wrapper_rel_ModelPairCandidate_9322881dca01d8da, false, true);
addRelation("__agg_subclause1", wrapper_rel__agg_subclause1_6b72bc2ad4593b7d, false, false);
addRelation("ModelPair", wrapper_rel_ModelPair_a5a4124c4969f589, false, true);
addRelation("FilteredTests", wrapper_rel_FilteredTests_bd4cd275bd1cb347, false, true);
addRelation("__agg_subclause6", wrapper_rel__agg_subclause6_2a58958a8d13999d, false, false);
addRelation("__agg_single0", wrapper_rel__agg_single0_ae1fba617ee8151c, false, false);
addRelation("__agg_subclause5", wrapper_rel__agg_subclause5_277251a440f34db7, false, false);
addRelation("__agg_single", wrapper_rel__agg_single_bd0385c34ef6548a, false, false);
addRelation("FinalNoTestData", wrapper_rel_FinalNoTestData_1dcf6aa80b893c15, false, true);
addRelation("FinalNoTestDataWithMultiUse", wrapper_rel_FinalNoTestDataWithMultiUse_99aec0c4382a0994, false, true);
addRelation("__agg_subclause", wrapper_rel__agg_subclause_32d5cc024cc79173, false, false);
addRelation("Telemetry_OverlapLeak", wrapper_rel_Telemetry_OverlapLeak_d0dea07db73811e8, false, true);
addRelation("__agg_subclause0", wrapper_rel__agg_subclause0_1a0a441f9870a373, false, false);
addRelation("FinalOverlapLeak", wrapper_rel_FinalOverlapLeak_78ab00e4c1b08b0b, false, true);
addRelation("__agg_subclause2", wrapper_rel__agg_subclause2_47fa128cc9c98832, false, false);
addRelation("NoTestData", wrapper_rel_NoTestData_38fc47759ae30ee9, false, true);
addRelation("__agg_subclause3", wrapper_rel__agg_subclause3_6933ce586d204815, false, false);
addRelation("NoValAndTestData", wrapper_rel_NoValAndTestData_4e404a42ce2c80b7, false, true);
addRelation("OverlapLeak", wrapper_rel_OverlapLeak_703978dd669490f5, false, true);
addRelation("PreProcessingLeak", wrapper_rel_PreProcessingLeak_3d7ccc563a957981, false, true);
addRelation("Telemetry_PreProcessingLeak", wrapper_rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185, false, true);
addRelation("Telemetry_FinalPreProcessingLeak", wrapper_rel_Telemetry_FinalPreProcessingLeak_3e7f0db68d270037, false, true);
addRelation("Telemetry_ModelPair", wrapper_rel_Telemetry_ModelPair_f363adad3d285f6e, false, true);
addRelation("PureMethod", wrapper_rel_PureMethod_ac3eca18d3064a10, false, false);
addRelation("VarEquals", wrapper_rel_VarEquals_a4540819e065ea89, false, true);
}

 Sf_main::~Sf_main(){
}

void Sf_main::runFunction(std::string inputDirectoryArg,std::string outputDirectoryArg,bool performIOArg,bool pruneImdtRelsArg){

    this->inputDirectory  = std::move(inputDirectoryArg);
    this->outputDirectory = std::move(outputDirectoryArg);
    this->performIO       = performIOArg;
    this->pruneImdtRels   = pruneImdtRelsArg;

    // set default threads (in embedded mode)
    // if this is not set, and omp is used, the default omp setting of number of cores is used.
#if defined(_OPENMP)
    if (0 < getNumThreads()) { omp_set_num_threads(static_cast<int>(getNumThreads())); }
#endif

    signalHandler->set();
// -- query evaluation --
{
 std::vector<RamDomain> args, ret;
stratum_ActualKeyParam_12a6a43c75fda34b.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_Invoke_6b18f063cb12c287.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_MethodIndexToKey_38eeac50fa87c6ee.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_ActualParam_0254ef2a539f6763.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_Reachable_3609bcb81aba1219.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_CallGraphEdge_ba9ff3425740b561.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_FilteredTrainingMethod_76dbc635e0be94f1.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_MethodSSA_aa09a85875e68cdd.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_ParamToParamFlow_4280e65256ca7e4d.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_MethodUpdate_d1ca17b13e092ba8.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_ParamContentToRetCondEquivFlow_9994fea784d6b73d.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_ParamToParamDataFlow_446aa191f53628ae.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_ParamToRetCondEquivFlow_289daa0f2308054b.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_ParamToRetDataFlow_740720c7dcae95b0.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_ParamToRetEquivFlow_ce6a445b7c8e7e6a.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_TrainingData_0c12b3e5997d2e70.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_ParamToParamTaintSourceMethod_98e55c9c77865b73.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_ParamToRetTaintSourceMethod_33f90b6a1d8be9d0.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_ScoredData_b7d1ba106c7cdd30.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_ScoredResult_132799981e44fb82.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_TestData_b867b0fac6d0da2a.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_ValData_e7530baa3ed8df4b.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_ActualReturn_339859d89a01e808.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_Alloc_49c7a43733f3d7b7.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_AssignGlobal_3bcffbb0794f2821.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_AssignVar_47ce3275170456ae.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_StoreField_081769e2d0503294.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_StoreFieldSSA_20c74fd0fd3a43b6.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_LoadSlice_d064a977133f8b38.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_StoreSlice_4bebfea803e57871.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_StoreSliceSSA_5db6bfe77d4c2b53.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_SliceIndex_0898fd080c8755ea.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_StoreIndex_4047534a727c5ea9.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_StoreIndexSSA_d5260c12dceeb54a.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_FilteredMethod_bbfe11620421651e.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_FormalReturn_2d2d898c7d038d3b.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_ArityMatch_010c8824ed4a833c.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_FormalParam_1bc5e7a7041c708a.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_InterProcAssign_ffe550986b3c2f8d.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_LoadField_1959d147bc3bf36d.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_LoadIndex_5f2b437de44efaae.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_VarInMethod_ed7e3b42e5a6bf0c.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_FieldPointsTo_64e220f021bc71ba.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_Alias_f3647b52a0dd5327.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_AssignBinOp_92254d469ef1b822.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_AssignBoolConstant_433e069d31d94440.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_AssignFloatConstant_e4a7f759412fc710.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_AssignIntConstant_0255ebd32aa44813.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_AssignStrConstant_6e56f1d6ad531ff5.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_ConstantValue_2aaebc1b0ca71039.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_FlowCondition_dc0e9ac85375b076.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_VarType_6bc0d8b3d6ce42e2.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_IsDataFrameEquivIndexing_8535167db21969f0.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_LocalMethod_49c0d263261e8d97.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_FlowFromEdge_dc7331509fe42d03.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_FlowFrom_d1e3516602a0c8a2.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_FlowFromExtended_1a66e3f0059098b0.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_SubType_014b00fd31af85f0.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_TorchModelWithData_397ff8db1c01d2da.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_TrainingDataWithModel_391fd5f898f6ccf8.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_disconnected0_f9c4672e8cd1a89c.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_ValOrTestDataWithModel_1ec7730e583f5da2.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_ScoredDataWithModel_699c9bae39cecfe6.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_ParamToRetCondTaintSourceMethod_c32a3a2a879e1b22.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_TaintCondition_16931132151a48cd.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_RetTaintSourceMethod_46d3cbd918420f3b.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_TaintStarts_f68137b8aa877618.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_TaintStartsTarget_fbaa024b117819b9.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_DuplicateEdge_1bf07be33b6f763a.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_DataOverlap_989fa0addfb2c9db.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_MultiUseTestLeak_3188e75ada8f9655.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_Telemetry_MultiUseTestLeak_8a4534192b2810ba.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_ReduceEdge_f23db963fdbb6a7d.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_InvokeInLoop_b84d1c07a14b9d1e.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_ValDataWithModel_14d6b9aa9be3460b.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_disconnected1_c26d0381dceb6887.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_TestDataWithModel_f27573b86a50c3ca.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_NextInvoke_167dc995a535ae93.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_InvokeEdge_561a26cc8f11b31d.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_InvokePath_46465e6a87eeb192.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_ModelPairCandidate_e0ec35f57565671c.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_agg_subclause1_70828864d99d0453.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_ModelPair_1383b78f536ccc12.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_FilteredTests_461fa6cfdecd9b07.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_agg_subclause6_45a72b49481e6e73.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_agg_single0_934ad608bfdbcb95.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_agg_subclause5_3fc943c051ed830e.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_agg_single_39ee9cda178f5d07.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_FinalNoTestData_88637b76361e3e80.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_FinalNoTestDataWithMultiUse_af20826df0e8421f.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_agg_subclause_f71d8ac7de83919b.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_Telemetry_OverlapLeak_c3acba6310b72397.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_agg_subclause0_032523e2f63b0d44.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_FinalOverlapLeak_2872601ec653ee81.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_agg_subclause2_c2e2a1c2343f77cf.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_NoTestData_55494f244720b649.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_agg_subclause3_8ce33083abd27210.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_NoValAndTestData_d3cbe3b109984f39.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_OverlapLeak_f6e6ef75f6375c76.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_PreProcessingLeak_aea74049e16ab76c.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_Telemetry_PreProcessingLeak_250ec078ec730e80.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_Telemetry_FinalPreProcessingLeak_55372d1daee4f94b.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_Telemetry_ModelPair_240dd7003845be94.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_PureMethod_9625f9d3538f170a.run(args, ret);
}
{
 std::vector<RamDomain> args, ret;
stratum_VarEquals_724b807f74d45218.run(args, ret);
}

// -- relation hint statistics --
signalHandler->reset();
}

void Sf_main::run(){
runFunction("", "", false, false);
}

void Sf_main::runAll(std::string inputDirectoryArg,std::string outputDirectoryArg,bool performIOArg,bool pruneImdtRelsArg){
runFunction(inputDirectoryArg, outputDirectoryArg, performIOArg, pruneImdtRelsArg);
}

void Sf_main::printAll([[maybe_unused]] std::string outputDirectoryArg){
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","invo\tcallerCtx\tmeth\tcalleeCtx"},{"auxArity","0"},{"name","CallGraphEdge"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"invo\", \"callerCtx\", \"meth\", \"calleeCtx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Invocation\", \"r:Context\", \"s:Method\", \"r:Context\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_CallGraphEdge_333c9d69fed5eee7);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","base\tbaseHctx\tfield\tvalue\thctx"},{"auxArity","0"},{"name","FieldPointsTo"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"base\", \"baseHctx\", \"field\", \"value\", \"hctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Value\", \"r:HContext\", \"s:Field\", \"s:Value\", \"r:HContext\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_FieldPointsTo_79eb0e1cfe8639b3);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","baseValue\tbaseHctx\tvalue\thctx"},{"auxArity","0"},{"name","IndexContentPointsTo"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"baseValue\", \"baseHctx\", \"value\", \"hctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Value\", \"r:HContext\", \"s:Value\", \"r:HContext\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_IndexContentPointsTo_db1dfbfa873aff0a);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","var\tctx\tvalue\thctx"},{"auxArity","0"},{"name","VarPointsTo"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"var\", \"ctx\", \"value\", \"hctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Var\", \"r:Context\", \"s:Value\", \"r:HContext\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_VarPointsTo_c1a9f897b9f324f0);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\ttoCtx\tfrom\tfromCtx"},{"auxArity","0"},{"name","Alias"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"to\", \"toCtx\", \"from\", \"fromCtx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_Alias_22e56a91218d2f0d);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\ttoCtx\tfrom\tfromCtx\ttag"},{"auxArity","0"},{"name","FlowFromEdge"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"to\", \"toCtx\", \"from\", \"fromCtx\", \"tag\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\", \"s:symbol\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_FlowFromEdge_6f9cb97dfaad1a54);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\ttoCtx\tfrom\tfromCtx\ttag"},{"auxArity","0"},{"name","FlowFrom"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"to\", \"toCtx\", \"from\", \"fromCtx\", \"tag\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\", \"s:symbol\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_FlowFrom_0c9cf4995aeb9ef7);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\ttoCtx\tfrom\tfromCtx\ttag"},{"auxArity","0"},{"name","FlowFromExtended"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"to\", \"toCtx\", \"from\", \"fromCtx\", \"tag\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\", \"s:symbol\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_FlowFromExtended_7fd58681b534e204);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","model\ttrain\tinvo\tmeth"},{"auxArity","0"},{"name","TorchModelWithData"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"model\", \"train\", \"invo\", \"meth\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_TorchModelWithData_3bc4694c9032b02a);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","model\ttrain\tinvo\tmeth\tctx"},{"auxArity","0"},{"name","TrainingDataWithModel"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"model\", \"train\", \"invo\", \"meth\", \"ctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_TrainingDataWithModel_bf0078ce702b39b8);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","model\ttest\tinvo\tmeth\tctx"},{"auxArity","0"},{"name","ValOrTestDataWithModel"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"model\", \"test\", \"invo\", \"meth\", \"ctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_ValOrTestDataWithModel_2810ba231c0c185a);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","model\ttest\tinvo\tmeth\tctx"},{"auxArity","0"},{"name","ScoredDataWithModel"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"model\", \"test\", \"invo\", \"meth\", \"ctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_ScoredDataWithModel_55bb6aafc5a52e34);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\ttoCtx\tfrom\tfromCtx\tinvo\tmeth\tlabel"},{"auxArity","0"},{"name","TaintStartsTarget"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 7, \"params\": [\"to\", \"toCtx\", \"from\", \"fromCtx\", \"invo\", \"meth\", \"label\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 7, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\", \"s:Invocation\", \"s:Method\", \"s:symbol\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_TaintStartsTarget_b45151d0d1a25a24);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","train\tctx1\ttest\tctx2"},{"auxArity","0"},{"name","DataOverlap"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"train\", \"ctx1\", \"test\", \"ctx2\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_DataOverlap_5a4300eece6cb523);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","test\tinvo\tmeth\tctx"},{"auxArity","0"},{"name","MultiUseTestLeak"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"test\", \"invo\", \"meth\", \"ctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_MultiUseTestLeak_0ea2b38088c6193a);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","testModel\ttest\ttestInvo\ttestMeth\tctx1\ttestModel2\ttest2\ttestInvo2\ttestMeth2\tctx2"},{"auxArity","0"},{"name","Telemetry_MultiUseTestLeak"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 10, \"params\": [\"testModel\", \"test\", \"testInvo\", \"testMeth\", \"ctx1\", \"testModel2\", \"test2\", \"testInvo2\", \"testMeth2\", \"ctx2\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 10, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\", \"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_Telemetry_MultiUseTestLeak_f37504d03b612c98);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","model\tval\tinvo\tmeth\tctx"},{"auxArity","0"},{"name","ValDataWithModel"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"model\", \"val\", \"invo\", \"meth\", \"ctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_ValDataWithModel_ef5cc7d0fb594fa5);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","model\ttest\tinvo\tmeth\tctx"},{"auxArity","0"},{"name","TestDataWithModel"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"model\", \"test\", \"invo\", \"meth\", \"ctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_TestDataWithModel_2269d730f5799893);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to_invo\tto_ctx\tfrom_invo\tfrom_ctx"},{"auxArity","0"},{"name","InvokeEdge"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"to_invo\", \"to_ctx\", \"from_invo\", \"from_ctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Invocation\", \"r:Context\", \"s:Invocation\", \"r:Context\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_InvokeEdge_101b6dc2a844897b);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to_invo\tto_ctx\tfrom_invo\tfrom_ctx"},{"auxArity","0"},{"name","InvokePath"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"to_invo\", \"to_ctx\", \"from_invo\", \"from_ctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Invocation\", \"r:Context\", \"s:Invocation\", \"r:Context\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_InvokePath_12c42b7c9b655a96);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","testModel\tctx1\ttrainModel\tctx2"},{"auxArity","0"},{"name","ModelPairCandidate"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"testModel\", \"ctx1\", \"trainModel\", \"ctx2\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_ModelPairCandidate_9322881dca01d8da);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","testModel\tctx1\ttrainModel\tctx2"},{"auxArity","0"},{"name","ModelPair"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"testModel\", \"ctx1\", \"trainModel\", \"ctx2\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_ModelPair_a5a4124c4969f589);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","testModel\ttest\tinvo\tmeth\tctx"},{"auxArity","0"},{"name","FilteredTests"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"testModel\", \"test\", \"invo\", \"meth\", \"ctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_FilteredTests_bd4cd275bd1cb347);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","msg\tcnt"},{"auxArity","0"},{"name","FinalNoTestData"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"msg\", \"cnt\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:symbol\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_FinalNoTestData_1dcf6aa80b893c15);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","msg\tcnt"},{"auxArity","0"},{"name","FinalNoTestDataWithMultiUse"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"msg\", \"cnt\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:symbol\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_FinalNoTestDataWithMultiUse_99aec0c4382a0994);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","trainModel\ttrain\ttrainInvo\ttrainMeth\tctx1\ttestModel\ttest\ttestInvo\ttestMeth\tctx2"},{"auxArity","0"},{"name","Telemetry_OverlapLeak"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 10, \"params\": [\"trainModel\", \"train\", \"trainInvo\", \"trainMeth\", \"ctx1\", \"testModel\", \"test\", \"testInvo\", \"testMeth\", \"ctx2\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 10, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\", \"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_Telemetry_OverlapLeak_d0dea07db73811e8);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","trainModel\ttrain\tinvo\tmeth\tctx\tc"},{"auxArity","0"},{"name","FinalOverlapLeak"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 6, \"params\": [\"trainModel\", \"train\", \"invo\", \"meth\", \"ctx\", \"c\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 6, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\", \"i:number\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_FinalOverlapLeak_78ab00e4c1b08b0b);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","trainModel\ttrain\tinvo\tmeth\tctx"},{"auxArity","0"},{"name","NoTestData"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"trainModel\", \"train\", \"invo\", \"meth\", \"ctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_NoTestData_38fc47759ae30ee9);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","trainModel\ttrain\tinvo\tmeth\tctx"},{"auxArity","0"},{"name","NoValAndTestData"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"trainModel\", \"train\", \"invo\", \"meth\", \"ctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_NoValAndTestData_4e404a42ce2c80b7);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","testModel\tctx1\ttrainModel\tctx2\tinvo\tmeth"},{"auxArity","0"},{"name","OverlapLeak"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 6, \"params\": [\"testModel\", \"ctx1\", \"trainModel\", \"ctx2\", \"invo\", \"meth\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 6, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\", \"s:Invocation\", \"s:Method\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_OverlapLeak_703978dd669490f5);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","var\tinvo\tmeth\tctx"},{"auxArity","0"},{"name","PreProcessingLeak"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"var\", \"invo\", \"meth\", \"ctx\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_PreProcessingLeak_3d7ccc563a957981);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","trainModel\ttrain\ttrainInvo\ttrainMeth\tctx1\ttestModel\ttest\ttestInvo\ttestMeth\tctx2\tdes\tsrc"},{"auxArity","0"},{"name","Telemetry_PreProcessingLeak"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 12, \"params\": [\"trainModel\", \"train\", \"trainInvo\", \"trainMeth\", \"ctx1\", \"testModel\", \"test\", \"testInvo\", \"testMeth\", \"ctx2\", \"des\", \"src\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 12, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\", \"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\", \"s:Var\", \"s:Var\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","trainModel\ttrain\ttrainInvo\ttrainMeth\tctx1\ttestModel\ttest\ttestInvo\ttestMeth\tctx2\tdes\tsrc"},{"auxArity","0"},{"name","Telemetry_FinalPreProcessingLeak"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 12, \"params\": [\"trainModel\", \"train\", \"trainInvo\", \"trainMeth\", \"ctx1\", \"testModel\", \"test\", \"testInvo\", \"testMeth\", \"ctx2\", \"des\", \"src\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 12, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\", \"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\", \"s:Var\", \"s:Var\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_Telemetry_FinalPreProcessingLeak_3e7f0db68d270037);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","testModel\ttest\tinvo\tmeth\tctx1\ttrainModel\ttrain\tinvo2\tmeth2\tctx2"},{"auxArity","0"},{"name","Telemetry_ModelPair"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 10, \"params\": [\"testModel\", \"test\", \"invo\", \"meth\", \"ctx1\", \"trainModel\", \"train\", \"invo2\", \"meth2\", \"ctx2\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 10, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\", \"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_Telemetry_ModelPair_f363adad3d285f6e);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","var1\tvar2"},{"auxArity","0"},{"name","VarEquals"},{"operation","output"},{"output-dir","."},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"var1\", \"var2\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Var\", \"s:Var\"]}}"}});
if (!outputDirectoryArg.empty()) {directiveMap["output-dir"] = outputDirectoryArg;}
IOSystem::getInstance().getWriter(directiveMap, symTable, recordTable)->writeAll(*rel_VarEquals_a4540819e065ea89);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}

void Sf_main::loadAll([[maybe_unused]] std::string inputDirectoryArg){
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","invo\ttoMeth\tinMeth"},{"auxArity","0"},{"fact-dir","."},{"name","Invoke"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"invo\", \"toMeth\", \"inMeth\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Invocation\", \"s:Method\", \"s:Method\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_Invoke_d61c77705bff35b0);
} catch (std::exception& e) {std::cerr << "Error loading Invoke data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","keyword\tinvo\tvar"},{"auxArity","0"},{"fact-dir","."},{"name","ActualKeyParam"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"keyword\", \"invo\", \"var\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Var\", \"s:Invocation\", \"s:Var\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_ActualKeyParam_c37ca7251a780d4f);
} catch (std::exception& e) {std::cerr << "Error loading ActualKeyParam data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","index\tinvo\tvar"},{"auxArity","0"},{"fact-dir","."},{"name","ActualParam"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"index\", \"invo\", \"var\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"i:number\", \"s:Invocation\", \"s:Var\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_ActualParam_b7a735170493e717);
} catch (std::exception& e) {std::cerr << "Error loading ActualParam data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","index\tinvo\tvar"},{"auxArity","0"},{"fact-dir","."},{"name","ActualReturn"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"index\", \"invo\", \"var\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"i:number\", \"s:Invocation\", \"s:Var\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_ActualReturn_8bc9db09e057aa22);
} catch (std::exception& e) {std::cerr << "Error loading ActualReturn data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","var\tvalue\tinMeth"},{"auxArity","0"},{"fact-dir","."},{"name","Alloc"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"var\", \"value\", \"inMeth\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Var\", \"s:Value\", \"s:Method\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_Alloc_31bbfa07060a4241);
} catch (std::exception& e) {std::cerr << "Error loading Alloc data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\tfrom"},{"auxArity","0"},{"fact-dir","."},{"name","AssignGlobal"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"to\", \"from\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Var\", \"s:Var\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_AssignGlobal_f60b14713e1f1ab7);
} catch (std::exception& e) {std::cerr << "Error loading AssignGlobal data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\tfrom"},{"auxArity","0"},{"fact-dir","."},{"name","AssignVar"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"to\", \"from\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Var\", \"s:Var\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_AssignVar_b173aa4bb6352b3a);
} catch (std::exception& e) {std::cerr << "Error loading AssignVar data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","base\tf\tfrom"},{"auxArity","0"},{"fact-dir","."},{"name","StoreField"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"base\", \"f\", \"from\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Var\", \"s:Field\", \"s:Var\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_StoreField_7d8d16151c0ea49b);
} catch (std::exception& e) {std::cerr << "Error loading StoreField data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","new_base\tbase\tf\tfrom"},{"auxArity","0"},{"fact-dir","."},{"name","StoreFieldSSA"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"new_base\", \"base\", \"f\", \"from\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Var\", \"s:Var\", \"s:Field\", \"s:Var\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_StoreFieldSSA_051b143b9d011002);
} catch (std::exception& e) {std::cerr << "Error loading StoreFieldSSA data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\tbase\tst\ted\tstep"},{"auxArity","0"},{"fact-dir","."},{"name","LoadSlice"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"to\", \"base\", \"st\", \"ed\", \"step\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"s:Var\", \"s:Var\", \"s:Var\", \"s:Var\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_LoadSlice_e590a0ee3f45cac8);
} catch (std::exception& e) {std::cerr << "Error loading LoadSlice data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","base\tst\ted\tstep\tfrom"},{"auxArity","0"},{"fact-dir","."},{"name","StoreSlice"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"base\", \"st\", \"ed\", \"step\", \"from\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:Var\", \"s:Var\", \"s:Var\", \"s:Var\", \"s:Var\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_StoreSlice_2d8a31bc728a3bbd);
} catch (std::exception& e) {std::cerr << "Error loading StoreSlice data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","new_base\tbase\tst\ted\tstep\tfrom"},{"auxArity","0"},{"fact-dir","."},{"name","StoreSliceSSA"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 6, \"params\": [\"new_base\", \"base\", \"st\", \"ed\", \"step\", \"from\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 6, \"types\": [\"s:Var\", \"s:Var\", \"s:Var\", \"s:Var\", \"s:Var\", \"s:Var\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_StoreSliceSSA_f26b3c4e2aecada2);
} catch (std::exception& e) {std::cerr << "Error loading StoreSliceSSA data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","base\ti\tfrom"},{"auxArity","0"},{"fact-dir","."},{"name","StoreIndex"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"base\", \"i\", \"from\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Var\", \"s:Index\", \"s:Var\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_StoreIndex_bab2c0876dfa7ece);
} catch (std::exception& e) {std::cerr << "Error loading StoreIndex data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","new_base\tbase\ti\tfrom"},{"auxArity","0"},{"fact-dir","."},{"name","StoreIndexSSA"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"new_base\", \"base\", \"i\", \"from\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Var\", \"s:Var\", \"s:Index\", \"s:Var\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_StoreIndexSSA_431249b1dfe65e85);
} catch (std::exception& e) {std::cerr << "Error loading StoreIndexSSA data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","index\tmeth\tvar"},{"auxArity","0"},{"fact-dir","."},{"name","FormalReturn"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"index\", \"meth\", \"var\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"i:number\", \"s:Method\", \"s:Var\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_FormalReturn_62e4844334f73406);
} catch (std::exception& e) {std::cerr << "Error loading FormalReturn data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","index\tmeth\tvar"},{"auxArity","0"},{"fact-dir","."},{"name","FormalParam"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"index\", \"meth\", \"var\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"i:number\", \"s:Method\", \"s:Var\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_FormalParam_f381be5dce5c9780);
} catch (std::exception& e) {std::cerr << "Error loading FormalParam data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\tbase\tf"},{"auxArity","0"},{"fact-dir","."},{"name","LoadField"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"to\", \"base\", \"f\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Var\", \"s:Var\", \"s:Field\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_LoadField_6018b2c33f454495);
} catch (std::exception& e) {std::cerr << "Error loading LoadField data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\tbase\ti"},{"auxArity","0"},{"fact-dir","."},{"name","LoadIndex"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"to\", \"base\", \"i\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:Var\", \"s:Var\", \"s:Index\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_LoadIndex_3a07e512c7efb9bd);
} catch (std::exception& e) {std::cerr << "Error loading LoadIndex data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","var\tmeth"},{"auxArity","0"},{"fact-dir","."},{"name","VarInMethod"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"var\", \"meth\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Var\", \"s:Method\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_VarInMethod_a7f53498a99fbbab);
} catch (std::exception& e) {std::cerr << "Error loading VarInMethod data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\tleft\top\tright"},{"auxArity","0"},{"fact-dir","."},{"name","AssignBinOp"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"to\", \"left\", \"op\", \"right\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"s:Var\", \"s:Var\", \"s:symbol\", \"s:Var\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_AssignBinOp_ac278042ec33e40a);
} catch (std::exception& e) {std::cerr << "Error loading AssignBinOp data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\tconstant"},{"auxArity","0"},{"fact-dir","."},{"name","AssignBoolConstant"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"to\", \"constant\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Var\", \"s:symbol\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_AssignBoolConstant_153553f1352c29c5);
} catch (std::exception& e) {std::cerr << "Error loading AssignBoolConstant data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\tconstant"},{"auxArity","0"},{"fact-dir","."},{"name","AssignFloatConstant"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"to\", \"constant\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Var\", \"s:symbol\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_AssignFloatConstant_2958d76b03506f1d);
} catch (std::exception& e) {std::cerr << "Error loading AssignFloatConstant data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\tconstant"},{"auxArity","0"},{"fact-dir","."},{"name","AssignIntConstant"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"to\", \"constant\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Var\", \"s:symbol\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_AssignIntConstant_91e14648ac326411);
} catch (std::exception& e) {std::cerr << "Error loading AssignIntConstant data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","to\tconstant"},{"auxArity","0"},{"fact-dir","."},{"name","AssignStrConstant"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"to\", \"constant\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Var\", \"s:symbol\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_AssignStrConstant_2b622c7da0720ea5);
} catch (std::exception& e) {std::cerr << "Error loading AssignStrConstant data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","var\ttype"},{"auxArity","0"},{"fact-dir","."},{"name","VarType"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"var\", \"type\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Var\", \"s:Type\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_VarType_28c8217e193eb319);
} catch (std::exception& e) {std::cerr << "Error loading VarType data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","meth"},{"auxArity","0"},{"fact-dir","."},{"name","LocalMethod"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"meth\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:Method\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_LocalMethod_5b358702fac6f178);
} catch (std::exception& e) {std::cerr << "Error loading LocalMethod data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","subtype\ttype"},{"auxArity","0"},{"fact-dir","."},{"name","SubType"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"subtype\", \"type\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Type\", \"s:Type\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_SubType_1b987a9db6ba7d57);
} catch (std::exception& e) {std::cerr << "Error loading SubType data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","invo\tloop_var"},{"auxArity","0"},{"fact-dir","."},{"name","InvokeInLoop"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"invo\", \"loop_var\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Var\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_InvokeInLoop_c641dec75a6890e7);
} catch (std::exception& e) {std::cerr << "Error loading InvokeInLoop data: " << e.what() << '\n';
exit(1);
}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","invo1\tinvo2"},{"auxArity","0"},{"fact-dir","."},{"name","NextInvoke"},{"operation","input"},{"params","{\"records\": {\"Context\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}, \"HContext\": {\"arity\": 1, \"params\": [\"invo\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"invo1\", \"invo2\"]}}"},{"types","{\"ADTs\": {}, \"records\": {\"r:Context\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}, \"r:HContext\": {\"arity\": 1, \"types\": [\"s:Invocation\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:Invocation\", \"s:Invocation\"]}}"}});
if (!inputDirectoryArg.empty()) {directiveMap["fact-dir"] = inputDirectoryArg;}
IOSystem::getInstance().getReader(directiveMap, symTable, recordTable)->readAll(*rel_NextInvoke_f6aefda469e3b88c);
} catch (std::exception& e) {std::cerr << "Error loading NextInvoke data: " << e.what() << '\n';
exit(1);
}
}

void Sf_main::dumpInputs(){
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Invoke";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Invocation\", \"s:Method\", \"s:Method\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_Invoke_d61c77705bff35b0);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "ActualKeyParam";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Invocation\", \"s:Var\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_ActualKeyParam_c37ca7251a780d4f);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "ActualParam";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"i:number\", \"s:Invocation\", \"s:Var\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_ActualParam_b7a735170493e717);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "ActualReturn";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"i:number\", \"s:Invocation\", \"s:Var\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_ActualReturn_8bc9db09e057aa22);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Alloc";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Value\", \"s:Method\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_Alloc_31bbfa07060a4241);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "AssignGlobal";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_AssignGlobal_f60b14713e1f1ab7);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "AssignVar";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_AssignVar_b173aa4bb6352b3a);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "StoreField";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Field\", \"s:Var\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_StoreField_7d8d16151c0ea49b);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "StoreFieldSSA";
rwOperation["types"] = "{\"relation\": {\"arity\": 4, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\", \"s:Field\", \"s:Var\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_StoreFieldSSA_051b143b9d011002);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "LoadSlice";
rwOperation["types"] = "{\"relation\": {\"arity\": 5, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\", \"s:Var\", \"s:Var\", \"s:Var\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_LoadSlice_e590a0ee3f45cac8);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "StoreSlice";
rwOperation["types"] = "{\"relation\": {\"arity\": 5, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\", \"s:Var\", \"s:Var\", \"s:Var\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_StoreSlice_2d8a31bc728a3bbd);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "StoreSliceSSA";
rwOperation["types"] = "{\"relation\": {\"arity\": 6, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\", \"s:Var\", \"s:Var\", \"s:Var\", \"s:Var\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_StoreSliceSSA_f26b3c4e2aecada2);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "StoreIndex";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Index\", \"s:Var\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_StoreIndex_bab2c0876dfa7ece);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "StoreIndexSSA";
rwOperation["types"] = "{\"relation\": {\"arity\": 4, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\", \"s:Index\", \"s:Var\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_StoreIndexSSA_431249b1dfe65e85);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "FormalReturn";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"i:number\", \"s:Method\", \"s:Var\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_FormalReturn_62e4844334f73406);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "FormalParam";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"i:number\", \"s:Method\", \"s:Var\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_FormalParam_f381be5dce5c9780);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "LoadField";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\", \"s:Field\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_LoadField_6018b2c33f454495);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "LoadIndex";
rwOperation["types"] = "{\"relation\": {\"arity\": 3, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\", \"s:Index\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_LoadIndex_3a07e512c7efb9bd);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "VarInMethod";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Method\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_VarInMethod_a7f53498a99fbbab);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "AssignBinOp";
rwOperation["types"] = "{\"relation\": {\"arity\": 4, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\", \"s:symbol\", \"s:Var\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_AssignBinOp_ac278042ec33e40a);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "AssignBoolConstant";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:symbol\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_AssignBoolConstant_153553f1352c29c5);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "AssignFloatConstant";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:symbol\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_AssignFloatConstant_2958d76b03506f1d);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "AssignIntConstant";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:symbol\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_AssignIntConstant_91e14648ac326411);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "AssignStrConstant";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:symbol\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_AssignStrConstant_2b622c7da0720ea5);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "VarType";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Type\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_VarType_28c8217e193eb319);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "LocalMethod";
rwOperation["types"] = "{\"relation\": {\"arity\": 1, \"auxArity\": 0, \"types\": [\"s:Method\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_LocalMethod_5b358702fac6f178);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "SubType";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Type\", \"s:Type\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_SubType_1b987a9db6ba7d57);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "InvokeInLoop";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Invocation\", \"s:Var\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_InvokeInLoop_c641dec75a6890e7);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "NextInvoke";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Invocation\", \"s:Invocation\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_NextInvoke_f6aefda469e3b88c);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}

void Sf_main::dumpOutputs(){
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "CallGraphEdge";
rwOperation["types"] = "{\"relation\": {\"arity\": 4, \"auxArity\": 0, \"types\": [\"s:Invocation\", \"r:Context\", \"s:Method\", \"r:Context\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_CallGraphEdge_333c9d69fed5eee7);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "FieldPointsTo";
rwOperation["types"] = "{\"relation\": {\"arity\": 5, \"auxArity\": 0, \"types\": [\"s:Value\", \"r:HContext\", \"s:Field\", \"s:Value\", \"r:HContext\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_FieldPointsTo_79eb0e1cfe8639b3);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "IndexContentPointsTo";
rwOperation["types"] = "{\"relation\": {\"arity\": 4, \"auxArity\": 0, \"types\": [\"s:Value\", \"r:HContext\", \"s:Value\", \"r:HContext\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_IndexContentPointsTo_db1dfbfa873aff0a);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "VarPointsTo";
rwOperation["types"] = "{\"relation\": {\"arity\": 4, \"auxArity\": 0, \"types\": [\"s:Var\", \"r:Context\", \"s:Value\", \"r:HContext\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_VarPointsTo_c1a9f897b9f324f0);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Alias";
rwOperation["types"] = "{\"relation\": {\"arity\": 4, \"auxArity\": 0, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_Alias_22e56a91218d2f0d);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "FlowFromEdge";
rwOperation["types"] = "{\"relation\": {\"arity\": 5, \"auxArity\": 0, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\", \"s:symbol\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_FlowFromEdge_6f9cb97dfaad1a54);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "FlowFrom";
rwOperation["types"] = "{\"relation\": {\"arity\": 5, \"auxArity\": 0, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\", \"s:symbol\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_FlowFrom_0c9cf4995aeb9ef7);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "FlowFromExtended";
rwOperation["types"] = "{\"relation\": {\"arity\": 5, \"auxArity\": 0, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\", \"s:symbol\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_FlowFromExtended_7fd58681b534e204);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "TorchModelWithData";
rwOperation["types"] = "{\"relation\": {\"arity\": 4, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_TorchModelWithData_3bc4694c9032b02a);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "TrainingDataWithModel";
rwOperation["types"] = "{\"relation\": {\"arity\": 5, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_TrainingDataWithModel_bf0078ce702b39b8);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "ValOrTestDataWithModel";
rwOperation["types"] = "{\"relation\": {\"arity\": 5, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_ValOrTestDataWithModel_2810ba231c0c185a);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "ScoredDataWithModel";
rwOperation["types"] = "{\"relation\": {\"arity\": 5, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_ScoredDataWithModel_55bb6aafc5a52e34);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "TaintStartsTarget";
rwOperation["types"] = "{\"relation\": {\"arity\": 7, \"auxArity\": 0, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\", \"s:Invocation\", \"s:Method\", \"s:symbol\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_TaintStartsTarget_b45151d0d1a25a24);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "DataOverlap";
rwOperation["types"] = "{\"relation\": {\"arity\": 4, \"auxArity\": 0, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_DataOverlap_5a4300eece6cb523);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "MultiUseTestLeak";
rwOperation["types"] = "{\"relation\": {\"arity\": 4, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_MultiUseTestLeak_0ea2b38088c6193a);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Telemetry_MultiUseTestLeak";
rwOperation["types"] = "{\"relation\": {\"arity\": 10, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\", \"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_Telemetry_MultiUseTestLeak_f37504d03b612c98);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "ValDataWithModel";
rwOperation["types"] = "{\"relation\": {\"arity\": 5, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_ValDataWithModel_ef5cc7d0fb594fa5);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "TestDataWithModel";
rwOperation["types"] = "{\"relation\": {\"arity\": 5, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_TestDataWithModel_2269d730f5799893);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "InvokeEdge";
rwOperation["types"] = "{\"relation\": {\"arity\": 4, \"auxArity\": 0, \"types\": [\"s:Invocation\", \"r:Context\", \"s:Invocation\", \"r:Context\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_InvokeEdge_101b6dc2a844897b);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "InvokePath";
rwOperation["types"] = "{\"relation\": {\"arity\": 4, \"auxArity\": 0, \"types\": [\"s:Invocation\", \"r:Context\", \"s:Invocation\", \"r:Context\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_InvokePath_12c42b7c9b655a96);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "ModelPairCandidate";
rwOperation["types"] = "{\"relation\": {\"arity\": 4, \"auxArity\": 0, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_ModelPairCandidate_9322881dca01d8da);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "ModelPair";
rwOperation["types"] = "{\"relation\": {\"arity\": 4, \"auxArity\": 0, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_ModelPair_a5a4124c4969f589);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "FilteredTests";
rwOperation["types"] = "{\"relation\": {\"arity\": 5, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_FilteredTests_bd4cd275bd1cb347);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "FinalNoTestData";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:symbol\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_FinalNoTestData_1dcf6aa80b893c15);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "FinalNoTestDataWithMultiUse";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:symbol\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_FinalNoTestDataWithMultiUse_99aec0c4382a0994);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Telemetry_OverlapLeak";
rwOperation["types"] = "{\"relation\": {\"arity\": 10, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\", \"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_Telemetry_OverlapLeak_d0dea07db73811e8);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "FinalOverlapLeak";
rwOperation["types"] = "{\"relation\": {\"arity\": 6, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\", \"i:number\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_FinalOverlapLeak_78ab00e4c1b08b0b);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "NoTestData";
rwOperation["types"] = "{\"relation\": {\"arity\": 5, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_NoTestData_38fc47759ae30ee9);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "NoValAndTestData";
rwOperation["types"] = "{\"relation\": {\"arity\": 5, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_NoValAndTestData_4e404a42ce2c80b7);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "OverlapLeak";
rwOperation["types"] = "{\"relation\": {\"arity\": 6, \"auxArity\": 0, \"types\": [\"s:Var\", \"r:Context\", \"s:Var\", \"r:Context\", \"s:Invocation\", \"s:Method\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_OverlapLeak_703978dd669490f5);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "PreProcessingLeak";
rwOperation["types"] = "{\"relation\": {\"arity\": 4, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_PreProcessingLeak_3d7ccc563a957981);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Telemetry_PreProcessingLeak";
rwOperation["types"] = "{\"relation\": {\"arity\": 12, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\", \"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\", \"s:Var\", \"s:Var\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_Telemetry_PreProcessingLeak_439a5eeb9a82d185);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Telemetry_FinalPreProcessingLeak";
rwOperation["types"] = "{\"relation\": {\"arity\": 12, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\", \"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\", \"s:Var\", \"s:Var\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_Telemetry_FinalPreProcessingLeak_3e7f0db68d270037);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "Telemetry_ModelPair";
rwOperation["types"] = "{\"relation\": {\"arity\": 10, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\", \"s:Var\", \"s:Var\", \"s:Invocation\", \"s:Method\", \"r:Context\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_Telemetry_ModelPair_f363adad3d285f6e);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> rwOperation;
rwOperation["IO"] = "stdout";
rwOperation["name"] = "VarEquals";
rwOperation["types"] = "{\"relation\": {\"arity\": 2, \"auxArity\": 0, \"types\": [\"s:Var\", \"s:Var\"]}}";
IOSystem::getInstance().getWriter(rwOperation, symTable, recordTable)->writeAll(*rel_VarEquals_a4540819e065ea89);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}

SymbolTable& Sf_main::getSymbolTable(){
return symTable;
}

RecordTable& Sf_main::getRecordTable(){
return recordTable;
}

void Sf_main::setNumThreads(std::size_t numThreadsValue){
SouffleProgram::setNumThreads(numThreadsValue);
symTable.setNumLanes(getNumThreads());
recordTable.setNumLanes(getNumThreads());
regexCache.setNumLanes(getNumThreads());
}

void Sf_main::executeSubroutine(std::string name,const std::vector<RamDomain>& args,std::vector<RamDomain>& ret){
if (name == "+disconnected0") {
stratum_disconnected0_f9c4672e8cd1a89c.run(args, ret);
return;}
if (name == "+disconnected1") {
stratum_disconnected1_c26d0381dceb6887.run(args, ret);
return;}
if (name == "ActualKeyParam") {
stratum_ActualKeyParam_12a6a43c75fda34b.run(args, ret);
return;}
if (name == "ActualParam") {
stratum_ActualParam_0254ef2a539f6763.run(args, ret);
return;}
if (name == "ActualReturn") {
stratum_ActualReturn_339859d89a01e808.run(args, ret);
return;}
if (name == "Alias") {
stratum_Alias_f3647b52a0dd5327.run(args, ret);
return;}
if (name == "Alloc") {
stratum_Alloc_49c7a43733f3d7b7.run(args, ret);
return;}
if (name == "ArityMatch") {
stratum_ArityMatch_010c8824ed4a833c.run(args, ret);
return;}
if (name == "AssignBinOp") {
stratum_AssignBinOp_92254d469ef1b822.run(args, ret);
return;}
if (name == "AssignBoolConstant") {
stratum_AssignBoolConstant_433e069d31d94440.run(args, ret);
return;}
if (name == "AssignFloatConstant") {
stratum_AssignFloatConstant_e4a7f759412fc710.run(args, ret);
return;}
if (name == "AssignGlobal") {
stratum_AssignGlobal_3bcffbb0794f2821.run(args, ret);
return;}
if (name == "AssignIntConstant") {
stratum_AssignIntConstant_0255ebd32aa44813.run(args, ret);
return;}
if (name == "AssignStrConstant") {
stratum_AssignStrConstant_6e56f1d6ad531ff5.run(args, ret);
return;}
if (name == "AssignVar") {
stratum_AssignVar_47ce3275170456ae.run(args, ret);
return;}
if (name == "CallGraphEdge") {
stratum_CallGraphEdge_ba9ff3425740b561.run(args, ret);
return;}
if (name == "ConstantValue") {
stratum_ConstantValue_2aaebc1b0ca71039.run(args, ret);
return;}
if (name == "DataOverlap") {
stratum_DataOverlap_989fa0addfb2c9db.run(args, ret);
return;}
if (name == "DuplicateEdge") {
stratum_DuplicateEdge_1bf07be33b6f763a.run(args, ret);
return;}
if (name == "FieldPointsTo") {
stratum_FieldPointsTo_64e220f021bc71ba.run(args, ret);
return;}
if (name == "FilteredMethod") {
stratum_FilteredMethod_bbfe11620421651e.run(args, ret);
return;}
if (name == "FilteredTests") {
stratum_FilteredTests_461fa6cfdecd9b07.run(args, ret);
return;}
if (name == "FilteredTrainingMethod") {
stratum_FilteredTrainingMethod_76dbc635e0be94f1.run(args, ret);
return;}
if (name == "FinalNoTestData") {
stratum_FinalNoTestData_88637b76361e3e80.run(args, ret);
return;}
if (name == "FinalNoTestDataWithMultiUse") {
stratum_FinalNoTestDataWithMultiUse_af20826df0e8421f.run(args, ret);
return;}
if (name == "FinalOverlapLeak") {
stratum_FinalOverlapLeak_2872601ec653ee81.run(args, ret);
return;}
if (name == "FlowCondition") {
stratum_FlowCondition_dc0e9ac85375b076.run(args, ret);
return;}
if (name == "FlowFrom") {
stratum_FlowFrom_d1e3516602a0c8a2.run(args, ret);
return;}
if (name == "FlowFromEdge") {
stratum_FlowFromEdge_dc7331509fe42d03.run(args, ret);
return;}
if (name == "FlowFromExtended") {
stratum_FlowFromExtended_1a66e3f0059098b0.run(args, ret);
return;}
if (name == "FormalParam") {
stratum_FormalParam_1bc5e7a7041c708a.run(args, ret);
return;}
if (name == "FormalReturn") {
stratum_FormalReturn_2d2d898c7d038d3b.run(args, ret);
return;}
if (name == "InterProcAssign") {
stratum_InterProcAssign_ffe550986b3c2f8d.run(args, ret);
return;}
if (name == "Invoke") {
stratum_Invoke_6b18f063cb12c287.run(args, ret);
return;}
if (name == "InvokeEdge") {
stratum_InvokeEdge_561a26cc8f11b31d.run(args, ret);
return;}
if (name == "InvokeInLoop") {
stratum_InvokeInLoop_b84d1c07a14b9d1e.run(args, ret);
return;}
if (name == "InvokePath") {
stratum_InvokePath_46465e6a87eeb192.run(args, ret);
return;}
if (name == "IsDataFrameEquivIndexing") {
stratum_IsDataFrameEquivIndexing_8535167db21969f0.run(args, ret);
return;}
if (name == "LoadField") {
stratum_LoadField_1959d147bc3bf36d.run(args, ret);
return;}
if (name == "LoadIndex") {
stratum_LoadIndex_5f2b437de44efaae.run(args, ret);
return;}
if (name == "LoadSlice") {
stratum_LoadSlice_d064a977133f8b38.run(args, ret);
return;}
if (name == "LocalMethod") {
stratum_LocalMethod_49c0d263261e8d97.run(args, ret);
return;}
if (name == "MethodIndexToKey") {
stratum_MethodIndexToKey_38eeac50fa87c6ee.run(args, ret);
return;}
if (name == "MethodSSA") {
stratum_MethodSSA_aa09a85875e68cdd.run(args, ret);
return;}
if (name == "MethodUpdate") {
stratum_MethodUpdate_d1ca17b13e092ba8.run(args, ret);
return;}
if (name == "ModelPair") {
stratum_ModelPair_1383b78f536ccc12.run(args, ret);
return;}
if (name == "ModelPairCandidate") {
stratum_ModelPairCandidate_e0ec35f57565671c.run(args, ret);
return;}
if (name == "MultiUseTestLeak") {
stratum_MultiUseTestLeak_3188e75ada8f9655.run(args, ret);
return;}
if (name == "NextInvoke") {
stratum_NextInvoke_167dc995a535ae93.run(args, ret);
return;}
if (name == "NoTestData") {
stratum_NoTestData_55494f244720b649.run(args, ret);
return;}
if (name == "NoValAndTestData") {
stratum_NoValAndTestData_d3cbe3b109984f39.run(args, ret);
return;}
if (name == "OverlapLeak") {
stratum_OverlapLeak_f6e6ef75f6375c76.run(args, ret);
return;}
if (name == "ParamContentToRetCondEquivFlow") {
stratum_ParamContentToRetCondEquivFlow_9994fea784d6b73d.run(args, ret);
return;}
if (name == "ParamToParamDataFlow") {
stratum_ParamToParamDataFlow_446aa191f53628ae.run(args, ret);
return;}
if (name == "ParamToParamFlow") {
stratum_ParamToParamFlow_4280e65256ca7e4d.run(args, ret);
return;}
if (name == "ParamToParamTaintSourceMethod") {
stratum_ParamToParamTaintSourceMethod_98e55c9c77865b73.run(args, ret);
return;}
if (name == "ParamToRetCondEquivFlow") {
stratum_ParamToRetCondEquivFlow_289daa0f2308054b.run(args, ret);
return;}
if (name == "ParamToRetCondTaintSourceMethod") {
stratum_ParamToRetCondTaintSourceMethod_c32a3a2a879e1b22.run(args, ret);
return;}
if (name == "ParamToRetDataFlow") {
stratum_ParamToRetDataFlow_740720c7dcae95b0.run(args, ret);
return;}
if (name == "ParamToRetEquivFlow") {
stratum_ParamToRetEquivFlow_ce6a445b7c8e7e6a.run(args, ret);
return;}
if (name == "ParamToRetTaintSourceMethod") {
stratum_ParamToRetTaintSourceMethod_33f90b6a1d8be9d0.run(args, ret);
return;}
if (name == "PreProcessingLeak") {
stratum_PreProcessingLeak_aea74049e16ab76c.run(args, ret);
return;}
if (name == "PureMethod") {
stratum_PureMethod_9625f9d3538f170a.run(args, ret);
return;}
if (name == "Reachable") {
stratum_Reachable_3609bcb81aba1219.run(args, ret);
return;}
if (name == "ReduceEdge") {
stratum_ReduceEdge_f23db963fdbb6a7d.run(args, ret);
return;}
if (name == "RetTaintSourceMethod") {
stratum_RetTaintSourceMethod_46d3cbd918420f3b.run(args, ret);
return;}
if (name == "ScoredData") {
stratum_ScoredData_b7d1ba106c7cdd30.run(args, ret);
return;}
if (name == "ScoredDataWithModel") {
stratum_ScoredDataWithModel_699c9bae39cecfe6.run(args, ret);
return;}
if (name == "ScoredResult") {
stratum_ScoredResult_132799981e44fb82.run(args, ret);
return;}
if (name == "SliceIndex") {
stratum_SliceIndex_0898fd080c8755ea.run(args, ret);
return;}
if (name == "StoreField") {
stratum_StoreField_081769e2d0503294.run(args, ret);
return;}
if (name == "StoreFieldSSA") {
stratum_StoreFieldSSA_20c74fd0fd3a43b6.run(args, ret);
return;}
if (name == "StoreIndex") {
stratum_StoreIndex_4047534a727c5ea9.run(args, ret);
return;}
if (name == "StoreIndexSSA") {
stratum_StoreIndexSSA_d5260c12dceeb54a.run(args, ret);
return;}
if (name == "StoreSlice") {
stratum_StoreSlice_4bebfea803e57871.run(args, ret);
return;}
if (name == "StoreSliceSSA") {
stratum_StoreSliceSSA_5db6bfe77d4c2b53.run(args, ret);
return;}
if (name == "SubType") {
stratum_SubType_014b00fd31af85f0.run(args, ret);
return;}
if (name == "TaintCondition") {
stratum_TaintCondition_16931132151a48cd.run(args, ret);
return;}
if (name == "TaintStarts") {
stratum_TaintStarts_f68137b8aa877618.run(args, ret);
return;}
if (name == "TaintStartsTarget") {
stratum_TaintStartsTarget_fbaa024b117819b9.run(args, ret);
return;}
if (name == "Telemetry_FinalPreProcessingLeak") {
stratum_Telemetry_FinalPreProcessingLeak_55372d1daee4f94b.run(args, ret);
return;}
if (name == "Telemetry_ModelPair") {
stratum_Telemetry_ModelPair_240dd7003845be94.run(args, ret);
return;}
if (name == "Telemetry_MultiUseTestLeak") {
stratum_Telemetry_MultiUseTestLeak_8a4534192b2810ba.run(args, ret);
return;}
if (name == "Telemetry_OverlapLeak") {
stratum_Telemetry_OverlapLeak_c3acba6310b72397.run(args, ret);
return;}
if (name == "Telemetry_PreProcessingLeak") {
stratum_Telemetry_PreProcessingLeak_250ec078ec730e80.run(args, ret);
return;}
if (name == "TestData") {
stratum_TestData_b867b0fac6d0da2a.run(args, ret);
return;}
if (name == "TestDataWithModel") {
stratum_TestDataWithModel_f27573b86a50c3ca.run(args, ret);
return;}
if (name == "TorchModelWithData") {
stratum_TorchModelWithData_397ff8db1c01d2da.run(args, ret);
return;}
if (name == "TrainingData") {
stratum_TrainingData_0c12b3e5997d2e70.run(args, ret);
return;}
if (name == "TrainingDataWithModel") {
stratum_TrainingDataWithModel_391fd5f898f6ccf8.run(args, ret);
return;}
if (name == "ValData") {
stratum_ValData_e7530baa3ed8df4b.run(args, ret);
return;}
if (name == "ValDataWithModel") {
stratum_ValDataWithModel_14d6b9aa9be3460b.run(args, ret);
return;}
if (name == "ValOrTestDataWithModel") {
stratum_ValOrTestDataWithModel_1ec7730e583f5da2.run(args, ret);
return;}
if (name == "VarEquals") {
stratum_VarEquals_724b807f74d45218.run(args, ret);
return;}
if (name == "VarInMethod") {
stratum_VarInMethod_ed7e3b42e5a6bf0c.run(args, ret);
return;}
if (name == "VarType") {
stratum_VarType_6bc0d8b3d6ce42e2.run(args, ret);
return;}
if (name == "__agg_single") {
stratum_agg_single_39ee9cda178f5d07.run(args, ret);
return;}
if (name == "__agg_single0") {
stratum_agg_single0_934ad608bfdbcb95.run(args, ret);
return;}
if (name == "__agg_subclause") {
stratum_agg_subclause_f71d8ac7de83919b.run(args, ret);
return;}
if (name == "__agg_subclause0") {
stratum_agg_subclause0_032523e2f63b0d44.run(args, ret);
return;}
if (name == "__agg_subclause1") {
stratum_agg_subclause1_70828864d99d0453.run(args, ret);
return;}
if (name == "__agg_subclause2") {
stratum_agg_subclause2_c2e2a1c2343f77cf.run(args, ret);
return;}
if (name == "__agg_subclause3") {
stratum_agg_subclause3_8ce33083abd27210.run(args, ret);
return;}
if (name == "__agg_subclause5") {
stratum_agg_subclause5_3fc943c051ed830e.run(args, ret);
return;}
if (name == "__agg_subclause6") {
stratum_agg_subclause6_45a72b49481e6e73.run(args, ret);
return;}
fatal(("unknown subroutine " + name).c_str());
}

} // namespace  souffle
namespace souffle {
SouffleProgram *newInstance_main(){return new  souffle::Sf_main;}
SymbolTable *getST_main(SouffleProgram *p){return &reinterpret_cast<souffle::Sf_main*>(p)->getSymbolTable();}
} // namespace souffle

#ifndef __EMBEDDED_SOUFFLE__
#include "souffle/CompiledOptions.h"
int main(int argc, char** argv)
{
try{
souffle::CmdOptions opt(R"(../src/main.dl)",
R"()",
R"()",
false,
R"()",
1);
if (!opt.parse(argc,argv)) return 1;
souffle::Sf_main obj;
#if defined(_OPENMP) 
obj.setNumThreads(opt.getNumJobs());

#endif
obj.runAll(opt.getInputFileDir(), opt.getOutputFileDir());
return 0;
} catch(std::exception &e) { souffle::SignalHandler::instance()->error(e.what());}
}
#endif

namespace  souffle {
using namespace souffle;
class factory_Sf_main: souffle::ProgramFactory {
public:
souffle::SouffleProgram* newInstance();
 factory_Sf_main();
private:
};
} // namespace  souffle
namespace  souffle {
using namespace souffle;
souffle::SouffleProgram* factory_Sf_main::newInstance(){
return new  souffle::Sf_main();
}

 factory_Sf_main::factory_Sf_main():
souffle::ProgramFactory("main"){
}

} // namespace  souffle
namespace souffle {

#ifdef __EMBEDDED_SOUFFLE__
extern "C" {
souffle::factory_Sf_main __factory_Sf_main_instance;
}
#endif
} // namespace souffle

